<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Google.PowerShell</name>
    </assembly>
    <members>
        <member name="T:Google.PowerShell.BigQuery.BqCmdlet">
            <summary>
            Base class for Google Cloud BigQuery cmdlets.
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.DataFormats">
            <summary>
            Data formats for input and output
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.GetBqJob">
            <summary>
            <para type="synopsis">
            Lists all jobs that you started in the specified project or returns information about a specific job.
            </para>
            <para type="description">
            If no Job is specified through the JobId parameter or object via pipeline, a list of all jobs in the 
            specified project will be returned. If a Job is specified, it will return a descriptor object for 
            that job. Listing requires "Viewer" or "Owner" roles. Viewing information about a specific job 
            requires the "Owner" role. Job information is stored for six months after its creation.
            </para>
            <example>
              <code>
            PS C:\> Get-BqJob
              </code>
              <para>Lists all past or present jobs from the default project.</para>
            </example>
            <example>
              <code>
            PS C:\> Get-BqJob -ProjectId "my_project"
              </code>
              <para>Lists list all past or present jobs from the specified project, "my_project".</para>
            </example>
            <example>
              <code>
            PS C:\> $job = Get-BqJob "job_p6focacVVo29rJ4_yvn8Aabi2wQ"
              </code>
              <para>This returns a descriptor object for the specified job in the default project.</para>
            </example> 
            <example>
              <code>
            PS C:\> $job = $job | Get-BqJob
              </code>
              <para>This will update the local descriptor "$job" with the most recent server state.</para>
            </example> 
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs)">
            [BigQuery Jobs]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqJob.Project">
            <summary>
            <para type="description">
            The project to look for jobs in. If not set via PowerShell parameter processing, it will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqJob.JobId">
            <summary>
            <para type="description">
            The ID of the Job to get a reference for. Can be passed as a string parameter or
            as a Job object through the pipeline. Other types accepted are JobsData and JobReference.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqJob.InputObject">
            <summary>
            <para type="description">
            JobReference to get an updated Job object for. Other types accepted are Job and JobsData.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqJob.State">
            <summary>
            <para type="description">
            Filter jobs returned by state. Options are "DONE", "PENDING", and "RUNNING"
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqJob.AllUsers">
            <summary>
            <para type="description">
            Forces the cmdlet to display jobs owned by all users in the project.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.GetBqJob.DoListRequest">
            <summary>
            Executes a List Jobs request and writes returned objects or errors.
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.GetBqJob.DoGetRequest">
            <summary>
            Executes a Get Jobs request and writes the returned Job or error.
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.StartBqJob">
            <summary>
            <para type="synopsis">
            Starts a new, asynchronous BigQuery Job.
            </para>
            <para type="description">
            Starts a new asynchronous job. This call requires the "Viewer" role. The Type parameter 
            can be "-Query", "-Copy", "-Load", or "-Extract". Each of these job types has its own set of 
            type-specific parameters to define what the job does (see below). Job types all share a set 
            of parameters that define job attributes such as start time and handle statistics such 
            as rows and raw amounts of data processed. This PowerShell module does not support billing 
            tier or maximum billed data control for individual queries, so the project defaults will be 
            taken. This cmdlet supports "ShouldProcess()", and as such, has the "-WhatIf" parameter to 
            show the projected results of the cmdlet without actually changing any server resources. 
            
            Use "-PollUntilComplete" to have the cmdlet treat the job as a blocking operation. 
            It will poll until the job has finished, and then it will return a job reference. 
            Tables referenced in queries should be fully qualified, but to use any that are not, 
            the DefaultDataset parameter must be used to specify where to find them.
            
            | All Job Flags: -Project -PollUntilComplete
            | Query Job Flags: -QueryString, -UseLegacySql, -DefaultDataset, -Priority
            | Copy Job Flags: -Source, -Destination, WriteMode
            | Load Job Flags: -Destination, -Type, -SourceUris, -Encoding, -FieldDelimiter, -Quote, -SkipLeadingRows, 
            -AllowUnknownFields, -AllowJaggedRows, -AllowQuotedNewlines
            | Extract Job Flags: -Source, -Type, -DestinationUris, -FieldDelimiter, -Compress, -NoHeader
            </para>
            <example>
              <code>
            PS C:\> $job = Start-BqJob -Query "select * from book_data.classics where Year > 1900"
              </code>
              <para>Queries the classics table and returns a Job object so that results can be viewed.</para>
            </example>
            <example>
              <code>
            PS C:\> $job = Start-BqJob -Query "select * from classics where Year > 1900" `
            -DefaultDataset $dataset -DestinationTable $table
              </code>
              <para>Queries with a default dataset and using a permanent table as the destination for results.</para>
            </example>
            <example>
              <code>
            PS C:\> $source_table | Get-BqTable -DatasetId "books" "classics"
            PS C:\> $dest_table | Get-BqTable -DatasetId "books" "suggestions"
            PS C:\> $source_table | Start-BqJob -Copy $dest_table -WriteMode WriteAppend -PollUntilComplete
              </code>
              <para>Copies the contents of the source to the end of the destination table as long as the 
              source and destination schemas match.</para>
            </example>
            <example>
              <code>
            PS C:\> $gcspath = "gs://ps_test"
            PS C:\> $table | Get-BqTable -DatasetId "books" "classics"
            PS C:\> $job = $table | Start-BqJob -Load CSV "$gcspath/basic.csv" -SkipLeadingRows 1 -Synchronous
              </code>
              <para>Loads in a table from "basic.csv" in the GCS bucket "ps_test".</para>
            </example>
            <example>
              <code>
            PS C:\> $gcspath = "gs://ps_test"
            PS C:\> $table | Get-BqTable -DatasetId "books" "classics"
            PS C:\> $job = $table | Start-BqJob -Extract CSV "$gcspath/basic.csv" -Synchronous
              </code>
              <para>Exports the given table to a .csv file in Cloud Storage.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs)">
            [BigQuery Jobs]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/)">
            [Google Cloud Storage]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Project">
            <summary>
            <para type="description">
            The project to run jobs in. If not set via PowerShell parameter processing, it will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.PollUntilComplete">
            <summary>
            <para type="description">
            Turns the async call into a synchronous call by polling until the job is complete before 
            returning. Can also be accessed by "-Synchronous".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Query">
            <summary>
            <para type="description">
            Selects job type Query.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.QueryString">
            <summary>
            <para type="description">
            A query string, following the BigQuery query syntax, of the query to execute.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.UseLegacySql">
            <summary>
            <para type="description">
            Specifies BigQuery's legacy SQL dialect for this query.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.DefaultDataset">
            <summary>
            <para type="description">
            The dataset to use for any unqualified table names in QueryString.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Priority">
            <summary>
            <para type="description">
            Priority of the query. Can be "Batch" or "Interactive".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Copy">
            <summary>
            <para type="description">
            Selects job type Copy.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Source">
            <summary>
            <para type="description">
            The source table to copy from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Destination">
            <summary>
            <para type="description">
            The destination table to write to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.WriteMode">
            <summary>
            <para type="description">
            Write Disposition of the operation. Handles what happens if the destination table 
            already exists. If this parameter is not supplied, this defaults to WriteEmpty.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Load">
            <summary>
            <para type="description">
            Selects job type Load.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Type">
            <summary>
            <para type="description">
            The format to input/output (CSV, JSON, AVRO, DATASTORE_BACKUP).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.SourceUris">
            <summary>
            <para type="description">
            A list of fully-qualified Google Cloud Storage URIs where data should be imported from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Encoding">
            <summary>
            <para type="description">
            The character encoding of the data. The supported values are "UTF-8" (default) or "ISO-8859-1".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.FieldDelimiter">
            <summary>
            <para type="description">
            Delimiter to use between fields in the exported data. Default value is comma (,).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Quote">
            <summary>
            <para type="description">
            The value that is used to quote data sections in a CSV file. Default value is double-quote (").
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.SkipLeadingRows">
            <summary>
            <para type="description">
            The number of rows to skip from the input file. (Usually used for headers.)
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.AllowUnknownFields">
            <summary>
            <para type="description">
            Allows insertion of rows with fields that are not in the schema, ignoring the extra fields.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.AllowJaggedRows">
            <summary>
            <para type="description">
            Allows insertion of rows that are missing trailing optional columns.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.AllowQuotedNewlines">
            <summary>
            <para type="description">
            Allows quoted data sections to contain newlines
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.MaxBadRecords">
            <summary>
            <para type="description">
            The maximum number of bad records that BigQuery can ignore while
            running the job. If the number of bad records exceeds this value,
            an invalid error is returned in the job result.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Extract">
            <summary>
            <para type="description">
            Selects job type Extract.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.DestinationUris">
            <summary>
            <para type="description">
            A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.Compress">
            <summary>
            <para type="description">
            Instructs the server to output with GZIP compression. Otherwise, no compression is used.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StartBqJob.NoHeader">
            <summary>
            <para type="description">
            Disables printing of a header row in the results. Otherwise, a header will be printed.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.StartBqJob.DoQuery">
            <summary>
            Query Job main processing function.
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.StartBqJob.DoCopy">
            <summary>
            Copy Job main processing function. 
            *This is written using Apis.BigQuery.v2 becuase Cloud.BigQuery did not 
            support Copy opertations at the time of writing.
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.StartBqJob.DoLoad">
            <summary>
            Load Job main processing function.
            *This is written using Apis.BigQuery.v2 becuase Cloud.BigQuery did not 
            support Load opertations at the time of writing.
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.StartBqJob.DoExtract">
            <summary>
            Extract Job main processing function.
            *This is written using Apis.BigQuery.v2 becuase Cloud.BigQuery did not 
            support Extract opertations at the time of writing.
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.StartBqJob.PollForCompletion(Google.Apis.Bigquery.v2.Data.Job)">
            <summary>
            This function waits for a job to reach the "DONE" status and then returns.
            </summary>
            <param name="job">Job to poll for completion.</param>
        </member>
        <member name="T:Google.PowerShell.BigQuery.ReceiveBqJob">
            <summary>
            <para type="synopsis">
            Returns the result of a completed BQ Job.
            </para>
            <para type="description">
            Returns the result of a completed BQ Job. Requires the "Reader" dataset role. You can specify 
            how long the call should wait for the query to be completed, if it is not already finished. 
            This is done with the "-Timeout" parameter. An integer number of seconds is taken, and the 
            default is 10. This cmdlet returns BigQueryRow objects.
            </para>
            <example>
              <code>
            PS C:\> $job = Start-BqJob -Query "select * from book_data.classics"
            PS C:\> $job | Receive-BqJob -Timeout 60
              </code>
              <para>This will run a query in the book_data.classics table and will wait up to 60 seconds 
              for its completion. When it finishes, it will print a number of BigQueryRow objects to 
              the terminal.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs)">
            [BigQuery Jobs]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.ReceiveBqJob.InputObject">
            <summary>
            <para type="description">
            JobReference to get results from. Other types accepted are Job and JobsData.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.ReceiveBqJob.Timeout">
            <summary>
            <para type="description">
            Max time, in seconds, to wait for the job to complete before failing (Default: 10).
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.StopBqJob">
            <summary>
            <para type="synopsis">
            Requests that a running BigQuery Job be canceled.
            </para>
            <para type="description">
            Requests that a job be canceled. This call will return immediately, and the client 
            is responsible for polling for job status. Canceled jobs may still incur costs. 
            This cmdlet returns a Job object if successful.
            </para>
            <example>
              <code>
            PS C:\> $job = Start-BqJob -Query "SELECT * FROM book_data.classics"
            PS C:\> $job = $job | Stop-BqJob
              </code>
              <para>This will send a request to stop $job as soon as possible. "$job.Status.State" 
              should now be "DONE", but there is a chance that the user will have to continue to
              poll for status with Get-BqJob.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs)">
            [BigQuery Jobs]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.StopBqJob.InputObject">
            <summary>
            <para type="description">
            JobReference to get results from. Other types accepted are Job and JobsData.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.GetBqTable">
            <summary>
            <para type="synopsis">
            Lists all tables in the specified dataset or finds a specific table by name.
            </para>
            <para type="description">
            If no table is specified, lists all tables in the specified dataset (Requires the "READER" 
            dataset role). If a table is specified, it will return the table resource. Note that 
            this is not the actual data from the table. If no Project is specified, the default 
            project will be used. Dataset can be specified by the "-DatasetId" parameter or by 
            passing in a Dataset object. This cmdlet returns a single Table if a table ID is 
            specified, and any number of TableList.TablesData objects otherwise.
            </para>
            <example>
              <code>PS C:\> Get-BqDataset "my_data" | Get-BqTable</code>
              <para>This will list all of the tables in the dataset "my_data" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-BqDataset "my_data" | Get-BqTable "my_table"</code>
              <para>This will return a Table descriptor object for "my_table" in "my_data".</para>
            </example>
            <example>
              <code>PS C:\> Get-BqTable "my_table" -Project "my_proj" -Dataset "my_data"</code>
              <para>This returns a Table descriptor object for this project:dataset:table combination.</para>
            </example> 
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tables)">
            [BigQuery Tables]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqTable.Project">
            <summary>
            <para type="description">
            The project to look for tables in. If not set via PowerShell parameter processing, it will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqTable.Table">
            <summary>
            <para type="description">
            The ID of the table that you want to get a descriptor object for.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqTable.DatasetId">
            <summary>
            <para type="description">
            The ID of the dataset to search. Can be a string, a Dataset, a DatasetReference, or a DatasetsData object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqTable.Dataset">
            <summary>
            <para type="description">
            The Dataset that you would like to search. This field takes Dataset or DatasetRefrence objects.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqTable.InputObject">
            <summary>
            <para type="description">
            The Table object to get a reference for.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.SetBqTable">
            <summary>
            <para type="synopsis">
            Updates information describing an existing BigQuery table.
            </para>
            <para type="description">
            Updates information in an existing table. Pass in the updated Table object via the 
            pipeline or the "-InputObject" parameter. This cmdlet returns the updated Table object.
            </para>
            <example>
              <code>
            PS C:\> $my_tab = Get-BqTable "my_table" -DatasetId "my_data" 
            PS C:\> $my_tab.Description = "Some new description!"
            PS C:\> $my_tab | Set-BqTable
              </code>
              <para>This is an example of how to locally update a field within a table and then 
              push your changes to the cloud resource</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tables)">
            [BigQuery Tables]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.SetBqTable.InputObject">
            <summary>
            <para type="description">
            The updated Table object. Must have the same tableId as an existing table in the dataset.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.NewBqTable">
            <summary>
            <para type="synopsis">
            Creates a new empty table in the specified project and dataset.
            </para>
            <para type="description">
            Creates a new empty table in the specified dataset. A Table can be supplied by object 
            via the pipeline or the "-InputObject" parameter, or it can be instantiated by value 
            with the flags below. The Dataset ID can be specified by passing in a string to 
            "-DatasetId", or you can pass a Dataset or DatasetReference to the "-Dataset" parameter. 
            Schemas can be set by passing in a TableSchema object with the "-Schema" flag. If no 
            Project is specified, the default project will be used. This cmdlet returns a Table object.
            </para>
            <example>
              <code>
            PS C:\> New-BqTable "new_tab" 
                                -Dataset "my_data" 
                                -Description "Some nice data!" 
                                -Expiration (60*60*24*30)
              </code>
              <para>This makes a new Table called "new_tab" with a lifetime of 30 days.</para>
            </example>
            <example>
              <code>
            PS C:\> Get-BqDataset "my_data" | New-BqTable "new_tab"
              </code>
              <para>This shows how the pipeline can be used to specify Dataset and Project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tables)">
            [BigQuery Tables]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.InputObject">
            <summary>
            <para type="description">
            The Table object that will be sent to the server to be inserted.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.Project">
            <summary>
            <para type="description">
            The project to put the table in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.DatasetId">
            <summary>
            <para type="description">
            The DatasetId that you would like to add to. This field takes strings.
            To pass in an object to specify datasetId, use the Dataset parameter.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.Dataset">
            <summary>
            <para type="description">
            The Dataset that you would like to add to. This field takes Dataset or DatasetRefrence objects.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.TableId">
            <summary>
            <para type="description">
            The TableId must be unique within the Dataset and match the pattern "[a-zA-Z0-9_]+".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.Name">
            <summary>
            <para type="description">
            User-friendly name for the table.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.Description">
            <summary>
            <para type="description">
            Description of the table.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.Expiration">
            <summary>
            <para type="description">
            The lifetime of this table from the time of creation (in seconds).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqTable.Schema">
            <summary>
            <para type="description">
            Schema of the new table. Created by the New-BqSchema and Set-BqSchema cmdlets.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.RemoveBqTable">
            <summary>
            <para type="synopsis">
            Deletes the specified table.
            </para>
            <para type="description">
            Deletes the specified table from the dataset. The table to be deleted should be passed 
            in via the pipeline or identified by DatasetId and TableId. If the table contains data, 
            this operation will prompt the user for confirmation before any deletions are performed. 
            To delete a non-empty table automatically, use the "-Force" parameter. If no Project is 
            specified, the default project will be used. This cmdlet returns a Table object. 
            This cmdlet supports the ShouldProcess function, so it has the corresponding "-WhatIf" 
            and "-Confirm" flags.
            </para>
            <example>
              <code>
            PS C:\> $table = Get-BqTable "my_table" -Dataset "my_dataset"
            PS C:\> $table | Remove-BqTable
              </code>
              <para>This will remove "my_table" if it is empty, and will prompt for user confirmation 
              if it is not. All data in "my_table" will be deleted if the user accepts.</para>
            </example>
            <example>
              <code>
            PS C:\> Remove-BqTable "my_table" -DatasetId "my_dataset" -Force
              </code>
              <para>This will remove "my_table" and all of its data.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tables)">
            [BigQuery Tables]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqTable.Project">
            <summary>
            <para type="description">
            The project to look for tables in. If not set via PowerShell parameter processing, it will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqTable.TableId">
            <summary>
            <para type="description">
            The ID of the table that you want to remove.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqTable.DatasetId">
            <summary>
            <para type="description">
            The ID of the dataset to search. This dataset should contain the table you wish to remove.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqTable.Dataset">
            <summary>
            <para type="description">
            The Dataset that you would like to search. This field takes Dataset or DatasetRefrence objects.
            This dataset should contain the table you wish to remove.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqTable.Table">
            <summary>
            <para type="description">
            The Table object that will be sent to the server to be removed. 
            Also takes TableReference and TableList.TablesData objects.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqTable.Force">
            <summary>
            <para type="description">
            Forces deletion of non-empty tables and the data contained in them.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.GetBqDataset">
            <summary>
            <para type="synopsis">
            Lists BigQuery datasets in a specific Cloud project.
            </para>
            <para type="description">
            If a Dataset is specified, it will return an object describing that dataset. If no Dataset is 
            specified, this cmdlet lists all datasets in the specified project to which you have been granted the 
            "READER" dataset role. The "-IncludeHidden" flag will include hidden datasets in the search results. 
            The "-Filter" flag allows you to filter results by label. The syntax to filter is "name[:value]". 
            Multiple filters can be ANDed together by passing them in as a string array. See the link below for 
            more on labels. If no Project is specified, the default project will be used. If no Dataset was 
            specified, this cmdlet returns any number of DatasetList.DatasetData objects. Otherwise, it returns
            a Dataset object.
            </para>
            <example>
              <code>
            PS C:\> Get-BqDataset -Project my-project
              </code>
              <para>This lists all of the non-hidden datasets in the Cloud project "my-project".</para>
            </example>
            <example>
              <code>
            PS C:\> Get-BqDataset -IncludeHidden -Filter "department:shipping"
              </code>
              <para>This lists all of the datasets in the default Cloud project for your account that have 
              the key "department" with the value "shipping".</para>
            </example>
            <example>
              <code>
            PS C:\> Get-BqDataset -IncludeHidden -Filter "department:shipping","location:usa"
              </code>
              <para>This is an example of ANDing multiple filters for a list request.</para>
            </example>
            <example>
              <code>
            PS C:\> Get-BqDataset "my-dataset"
              </code>
              <para>This returns a Dataset object from the default project of the dataset with id "my-dataset".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets)">
            [BigQuery Datasets]
            </para>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/labeling-datasets#filtering_datasets_using_labels)">
            [Filtering datasets using labels]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqDataset.Project">
            <summary>
            <para type="description">
            The project to look for datasets in. If not set via PowerShell parameter processing, it will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqDataset.IncludeHidden">
            <summary>
            <para type="description">
            Includes hidden datasets in the output if set.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqDataset.Filter">
            <summary>
            <para type="description">
            Filters results by label. The syntax for each label is "/<name/>[:/<value/>]".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqDataset.DatasetId">
            <summary>
            <para type="description">
            The ID of the dataset that you want to get a descriptor object for. This field also accepts 
            DatasetData objects so they can be mapped to full Dataset objects.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqDataset.Dataset">
            <summary>
            <para type="description">
            DatasetRefrence object to get an updated Dataset object for.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.SetBqDataset">
            <summary>
            <para type="synopsis">
            Updates information describing an existing BigQuery dataset.
            </para>
            <para type="description">
            Updates information describing an existing BigQuery dataset. If the dataset passed in does not
            already exist on the server, it will be inserted. Use the -SetLabel and -ClearLabel flags to 
            manage the dataset's key:value label pairs. This cmdlet returns a Dataset object.
            </para>
            <example>
              <code>
            PS C:\> $updatedSet = Get-BqDataset "my_dataset"
            PS C:\> $updatedSet.Description = "An updated summary of the data contents."
            PS C:\> $updatedSet | Set-BqDataset
              </code>
              <para>This will update the values stored for the Bigquery dataset passed in the default project.</para>
            </example>
            <example>
              <code>
            PS C:\> $data = Get-BqDataset "test_set"
            PS C:\> $data = $data | Set-BqDataset -SetLabel @{"test"="three";"other"="two"}
              </code>
              <para>This will add the labels "test" and "other" with their values to "test_set".</para>
            </example>
            <example>
              <code>
            PS C:\> $data = Get-BqDataset "test_set"
            PS C:\> $data = $data | Set-BqDataset -ClearLabel "test","other"
              </code>
              <para>This is the opposite of the above. It removes the labels "test" and "other" from the Dataset.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets)">
            [BigQuery Datasets]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.SetBqDataset.Project">
            <summary>
            <para type="description">
            The project to look for datasets in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.SetBqDataset.Dataset">
            <summary>
            <para type="description"> 
            The updated Dataset object. Must have the same DatasetId as an existing 
            dataset in the project specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.SetBqDataset.SetLabel">
            <summary>
            <para type="description">
            Sets the labels in Keys to the values in Values for the target Dataset.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.SetBqDataset.ClearLabel">
            <summary>
            <para type="description">
            Clears the keys in Keys for the target Dataset.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.NewBqDataset">
            <summary>
            <para type="synopsis">
            Creates a new empty dataset in the specified project.
            </para>
            <para type="description">
            Creates a new, empty dataset in the specified project. A Dataset can be supplied by object via the 
            pipeline or the "-Dataset" parameter, or it can be instantiated by value with the flags below. 
            If no Project is specified, the default project will be used. This cmdlet returns a Dataset object.
            </para>
            <example>
              <code>
            PS C:\> $premade_dataset | New-BqDataset
              </code>
              <para>This takes a Dataset object from the pipeline and inserts it into the Cloud project "my-project".</para>
            </example>
            <example>
              <code>
            PS C:\> New-BqDataset "test_data_id" `
                                  -Name "Testdata" `
                                  -Description "Some interesting data!" `
                                  -Expiration 86400000
              </code>
              <para>This builds a new dataset with the supplied datasetId, name, description, and an expiration of 1 day.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets)">
            [BigQuery Datasets]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqDataset.Project">
            <summary>
            <para type="description">
            The project to look for datasets in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqDataset.Dataset">
            <summary>
            <para type="description">
            The dataset object that will be sent to the server to be inserted.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqDataset.DatasetId">
            <summary>
            <para type="description">
            "DatasetId" must be unique within the project and match the pattern "[a-zA-Z0-9_]+".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqDataset.Name">
            <summary>
            <para type="description">
            User-friendly name for the dataset
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqDataset.Description">
            <summary>
            <para type="description">
            Description of the dataset.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqDataset.Expiration">
            <summary>
            <para type="description">
            The default lifetime for tables in the dataset (in seconds).
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.RemoveBqDataset">
            <summary>
            <para type="synopsis">
            Deletes the specified dataset.
            </para>
            <para type="description">
            Deletes the specified dataset. This command takes a Dataset object as input, typically off the 
            pipeline or through the "-Dataset" parameter. You can also specify a projectId:datasetId 
            combination through the "-Project" and "-DatasetId" flags. The dataset must be empty to be deleted. 
            Use the "-Force" flag if the dataset is not empty to confirm deletion of all tables in the dataset. 
            Once this operation is complete, you may create a new dataset with the same name. If no Project 
            is specified, the default project will be used. If the deletion runs without error, this cmdlet 
            has no output. This cmdlet supports the ShouldProcess function, so it has the corresponding 
            "-WhatIf" and "-Confirm" flags.
            </para>
            <example>
              <code>
            PS C:\> Get-BqDataset "my-values" | Remove-BqDataset
              </code>
              <para>This deletes "my-values" only if it is empty.</para>
            </example>
            <example>
              <code>
            PS C:\> $set = Get-BqDataset "test-values"
            PS C:\> Remove-BqDataset $set -Force
              </code>
              <para>This deletes "test-values" and all of its contents.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets)">
            [BigQuery Datasets]
            </para>
            <para type="link" uri="(https://msdn.microsoft.com/en-us/library/ms568267.aspx)">
            [ShouldProcess]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqDataset.Project">
            <summary>
            <para type="description">
            The project to look for datasets in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's default project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqDataset.DatasetId">
            <summary>
            <para type="description">
            DatasetId to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqDataset.Dataset">
            <summary>
            <para type="description">
            Dataset to delete. Takes Dataset, DatasetsData, and DatasetReference Objects.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.RemoveBqDataset.Force">
            <summary>
            <para type="description">
            Forces deletion of tables inside a non-empty Dataset.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.ColumnType">
            <summary>
            Possible types for each column in a TableSchema
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.ColumnMode">
            <summary>
            Possible types for each column in a TableSchema
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.NewBqSchema">
            <summary>
            <para type="synopsis">
            Instantiates a new BQ schema or adds a field to a pre-existing schema.
            </para>
            <para type="description">
            This command defines one column of a TableSchema. To create a multi-row schema, either chain 
            multiple instances of this command together on the pipeline, pass in a JSON array that describes 
            the schema as a string with "-JSON", or pass in a file containing the JSON array with "-Filename".
            Required fields for each column are Name and Type. Possible values for Type include "STRING", 
            "BYTES", "INTEGER", "FLOAT", "BOOLEAN", "TIMESTAMP", "DATE", "TIME", "DATETIME", and "RECORD" 
            ("RECORD" indicates the field contains a nested schema). Case is ignored for both Type and Mode. 
            Possible values for the Mode field include "REQUIRED", "REPEATED", and the default "NULLABLE". 
            This command forwards all TableFieldSchemas that it is passed, and will add one or more new 
            TableFieldSchema objects to the pipeline.
            </para>
            <example>
              <code>
            PS C:\> $dataset = New-BqDataset "books"
            PS C:\> $table = $dataset | New-BqTable "book_info"
            PS C:\> $result = New-BqSchema "Author" "STRING" | New-BqSchema "Copyright" "STRING" |
                              New-BqSchema "Title" "STRING" | Set-BqSchema $table
              </code>
              <para>This will create a new schema, assign it to a table, and then send the 
              revised table to the server to be saved.</para>
            </example> 
            <example>
              <code>
            PS C:\> $dataset = New-BqDataset "books"
            PS C:\> $table = $dataset | New-BqTable "book_info"
            PS C:\> $result = New-BqSchema -JSON `
                              '[{"Name":"Title","Type":"STRING"},{"Name":"Author","Type":"STRING"},{"Name":"Year","Type":"INTEGER"}]' |
                              Set-BqSchema $table
              </code>
              <para>This will create a new schema using JSON input and will assign it to a table.</para>
            </example> 
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tables)">
            [BigQuery Tables]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.PassThruObject">
            <summary>
            <para type="description">
            Holder parameter to allow cmdlet to forward TableFieldSchemas down the pipeline.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.Name">
            <summary>
            <para type="description">
            The name of the column to be added. The name must be unique among columns in each schema.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.Type">
            <summary>
            <para type="description">
            The type of the column to be added. Possible values include "STRING", "BYTES", "INTEGER" 
            (INT64), "FLOAT" (FLOAT64), "BOOLEAN" (BOOL), "TIMESTAMP", "DATE", "TIME", "DATETIME", 
            and "RECORD" (STRUCT).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.Description">
            <summary>
            <para type="description">
            An optional description for this column.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.Mode">
            <summary>
            <para type="description">
            The mode of the column to be added. Possible values include "NULLABLE", "REQUIRED", and 
            "REPEATED". The default value is "NULLABLE".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.Fields">
            <summary>
            <para type="description">
            Describes the optional nested schema fields if the type property is set to "RECORD". Pass in 
            an array of TableFieldSchema objects and it will be nested inside a single column.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.JSON">
            <summary>
            <para type="description">
            JSON string of the schema. Should be in the form: 
            [{"Name":"Title","Type":"STRING"},{"Name":"Author","Type":"STRING"},{"Name":"Year","Type":"INTEGER"}]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.NewBqSchema.Filename">
            <summary>
            <para type="description">
            File to read a JSON schema from.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.BigQuery.NewBqSchema.JsonToColumns(System.String)">
            <summary>
            Helper method to serialize TableFieldSchema records.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Google.PowerShell.BigQuery.SetBqSchema">
            <summary>
            <para type="synopsis">
            Attaches a TableSchema to a BQ Table.
            </para>
            <para type="description">
            This command takes a Table and sets its schema to be the aggregation of all TableFieldSchema 
            objects passed in from New-BqSchema calls earlier on the pipeline. If multiple columns are 
            passed in with the same "-Name" field, an error will be thrown. If no Table argument is passed in, 
            the Schema object will be written to the pipeline and the cmdlet will quit. This can be used in 
            combination with the -Schema flag in New-BqTable to apply one schema to multiple tables. If a 
            Table is passed in, this command returns a Table object showing the updated server state.
            <example>
              <code>
            PS C:\> $table = Get-BqTable "21st_century" -DatasetId "book_data"
            PS C:\> $table = New-BqSchema "Title" "STRING" | Set-BqSchema $table
              </code>
              <para>This will create a new schema, assign it to a table, and then send the 
              revised table to the server to be saved.</para>
            </example>
            <example>
              <code>
            PS C:\> $schema = New-BqSchema "Title" "STRING" | New-BqSchema "Author" "STRING" | Set-BqSchema
            PS C:\> $table1 = New-BqTable "my_table" -DatasetId "my_dataset" -Schema $schema
            PS C:\> $table2 = New-BqTable "another_table" -DatasetId "my_dataset" -Schema $schema
              </code>
              <para>This will create a new schema and save it to a variable so it can be passed into 
              multiple table creation cmdlets.</para>
            </example> 
            </para>
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tables)">
            [BigQuery Tables]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.SetBqSchema.InputObject">
            <summary>
            <para type="description">
            Variable to aggregate the TableFieldSchemas from the pipeline. Pipe one or 
            TableFieldSchema object in using the New-BqSchema cmdlet.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.SetBqSchema.Table">
            <summary>
            <para type="description">
            The table that you wish to add this schema to.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.AddBqTableRow">
            <summary>
            <para type="synopsis">
            Streams data from a file into BigQuery one record at a time without needing to run a load job.
            </para>
            <para type="description">
            Streams data into BigQuery one record at a time without needing to run a load job. This cmdlet 
            accepts CSV, JSON, and Avro files, and has a number of configuration parameters for each type. 
            This cmdlet returns nothing if the insert completed successfully.
            WriteMode Options:
            - "WriteAppend" will add data to the existing table.
            - "WriteTruncate" will truncate the table before additional data is inserted.
            - "WriteIfEmpty" will throw an error unless the table is empty.
            </para>
            <example>
              <code>
            PS C:\> $filename = "C:\data.json"
            PS C:\> $table = New-BqTable "tab_name" -DatasetId "db_name"
            PS C:\> $table | Add-BqTableRow JSON $filename 
              </code>
              <para>This code will ingest a newline-delimited JSON file from the location "$filename" on local 
              disk to db_name:tab_name in BigQuery.</para>
              <code>
            PS C:\> $filename = "C:\data.csv"
            PS C:\> $table = New-BqTable "tab_name" -DatasetId "db_name"
            PS C:\> $table | Add-BqTableRow CSV $filename -SkipLeadingRows 1 -AllowJaggedRows -AllowUnknownFields
              </code>
              <para>This code will take a CSV file and upload it to a BQ table. It will set missing fields 
              from the CSV to null, and it will keep rows that have fields that aren't in the table's schema.
              </para>
            </example> 
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata)">
            [BigQuery Tabledata]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.InputObject">
            <summary>
            <para type="description">
            The table to insert the data.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.Type">
            <summary>
            <para type="description">
            The format of the data file (CSV | JSON | AVRO).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.Filename">
            <summary>
            <para type="description">
            The filname containing the data to insert.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.WriteMode">
            <summary>
            <para type="description">
            Write Disposition of the operation. Governs what happens to the data currently in the table.
            If this parameter is not supplied, this defaults to "WriteAppend".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.AllowUnknownFields">
            <summary>
            <para type="description">
            CSV ONLY: Allows insertion of rows with fields that are not in the schema, ignoring the extra fields.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.AllowJaggedRows">
            <summary>
            <para type="description">
            CSV ONLY: Allows insertion of rows that are missing trailing optional columns.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.AllowQuotedNewlines">
            <summary>
            <para type="description">
            CSV ONLY: Allows quoted data sections to contain newlines
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.FieldDelimiter">
            <summary>
            <para type="description">
            CSV ONLY: Separator between fields in the data. Default value is comma (,).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.Quote">
            <summary>
            <para type="description">
            CSV ONLY: Value used to quote data sections. Default value is double-quote (").
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.AddBqTableRow.SkipLeadingRows">
            <summary>
            <para type="description">
            CSV ONLY: The number of rows to skip from the input file. (Usually used for headers.)
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.BigQuery.GetBqTableRow">
            <summary>
            <para type="synopsis">
            Retrieves table data from a specified set of rows.
            </para>
            <para type="description">
            Retrieves table data from a specified set of rows. Requires the "READER" dataset role. 
            Rows are returned as Google.Cloud.BigQuery.V2.BigQueryRow objects.
            Data can be extracted by indexing by column name. (ex: row["title"] )
            </para>
            <example>
              <code>
            PS C:\> $table = Get-BqTable "classics" -DatasetID "book_data"
            PS C:\> $list = $table | Get-BqTableRow
              </code>
              <para>Fetches all of the rows in book_data:classics and exports them to "$list".</para>
            </example> 
            <para type="link" uri="(https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata)">
            [BigQuery Tabledata]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.BigQuery.GetBqTableRow.InputObject">
            <summary>
            <para type="description">
            The table to export rows from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudResourceManager.CloudResourceManagerCmdlet">
            <summary>
            Base class for Cloud Resource Manager cmdlet.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudResourceManager.GetGcpProjectCmdlet">
            <summary>
            <para type="synopsis">
            Retrieves one or more Google Cloud projects.
            </para>
            <para type="description">
            Retrieves one or more Google Cloud projects. The cmdlet will return all available projects if no parameter
            is used. If -Name, -Id or -Label is used, the cmdlets will return the projects that match the given arguments.
            </para>
            <example>
              <code>PS C:\> Get-GcProject</code>
              <para>This command gets all the available Google Cloud projects.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcProject -Name "My Project"</code>
              <para>This command gets the project that has the name "My Project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcProject -Id "my-id"</code>
              <para>This command gets the project that has the Id "my-id".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcProject -Label @{"environment" = "test"}</code>
              <para>This command gets all the projects that has the label "environment" with value "test".</para>
            </example>
            <para
                type="link"
                uri="(https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy#cloud_platform_projects)">
            [Projects]
            </para>
            <para type="link" uri="(https://cloud.google.com/resource-manager/docs/using-labels)">
            [Labels]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.GetGcpProjectCmdlet.Name">
            <summary>
            <para type="description">
            The name of the project to seach for.
            This parameter is case insensitive.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.GetGcpProjectCmdlet.ProjectId">
            <summary>
            <para type="description">
            The Id of the project to seach for.
            This parameter is case insensitive.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.GetGcpProjectCmdlet.Label">
            <summary>
            <para type="description">
            The labels of the project to seach for.
            Key and value of the label should be in lower case with no spaces in them.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudResourceManager.GetGcpProjectCmdlet.ConstructFilter(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Constructs filter for the list request based on name, projectid and label.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudResourceManager.GetGcpProjectCmdlet.GetProjects(System.String)">
            <summary>
            Returns list of projects based on the filter.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudResourceManager.GcIamPolicyBindingCmdlet">
            <summary>
            Base class for IAM Policy Binding Cmdlets. Contains common method to retrieve all grantable roles.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudResourceManager.GcIamPolicyBindingCmdlet.s_rolesDictionary">
            <summary>
            Dictionary of roles with key as project and value as the roles available in the project.
            This dictionary is used for caching the various roles available in a project.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudResourceManager.GcIamPolicyBindingCmdlet.GetGrantableRoles(System.String)">
            <summary>
            Returns all the possible roles that can be granted in a project.
            This is used to provide tab completion for -Role parameter.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudResourceManager.GetGcIamPolicyBindingCmdlet">
            <summary>
            <para type="synopsis">
            Lists all IAM policy bindings in a project.
            </para>
            <para type="description">
            Lists all IAM policy bindings in a project. The cmdlet will use the default project if -Project is not used.
            </para>
            <example>
              <code>PS C:\> Get-GcIamPolicyBinding</code>
              <para>This command gets all the IAM policy bindings from the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/iam/docs/overview)">
            [Google Cloud IAM]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.GetGcIamPolicyBindingCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for IAM Policies. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet">
            <summary>
            Base class for cmdlet that add or remove IAM Policy Bindings.
            Contains all the neccessary parameters. Inherited class just needs to implement ProcessRecord.
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.Project">
            <summary>
            <para type="description">
            The project for the IAM Policy Bindings. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.User">
            <summary>
            <para type="description">
            Email address that represents a specific Google account.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            Email address that represents a service account.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.Group">
            <summary>
            <para type="description">
            Email address that represents a Google group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.Domain">
            <summary>
            <para type="description">
            A Google Apps domain name that represents all the users of that domain.
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet._dynamicParameters">
            <summary>
            This dynamic parameter dictionary is used by PowerShell to generate parameters dynamically.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.GetDynamicParameters">
            <summary>
            Creates a dynamic parameter "Role" based on the Project parameter.
            This function will first issue a call to the server to get all the possible roles based on
            the Project parameter. It will then create a dynamic parameter that corresponds to:
            [Parameter(Mandatory = true, HelpMessage = "Role that is assigned to the specified member.")]
            [ValidateSet(The possible roles we get from the server)]
            public string Role { get; set; }
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.GetRole">
            <summary>
            Returns the appropriate role of the member.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudResourceManager.AddOrRemoveGcIamPolicyBindingCmdlet.GetMember">
            <summary>
            Returns the appropriate member string based on the parameter set.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudResourceManager.AddGcIamPolicyBindingCmdlet">
            <summary>
            <para type="synopsis">
            Adds an IAM policy binding to a project.
            </para>
            <para type="description">
            Adds an IAM policy binding to a project. The cmdlet will use the default project if -Project is not used.
            </para>
            <example>
              <code>PS C:\> Add-GcIamPolicyBinding -Role roles/owner -User abc@google.com -Project "my-project"</code>
              <para>This command gives user abc@google.com owner role in the project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Add-GcIamPolicyBinding -Role roles/container.admin -Group my-group@google.com</code>
              <para>This command gives the group my-group@google.com container admin role in the default project.</para>
            </example>
            <example>
              <code>
              PS C:\> Add-GcIamPolicyBinding -Role roles/container.admin `
                                             -ServiceAccount service@project.iam.gserviceaccount.com
              </code>
              <para>
              This command gives the serviceaccount service@project.iam.gserviceaccount.com
              container admin role in the default project.
              </para>
            </example>
            <example>
              <code>PS C:\> Add-GcIamPolicyBinding -Role roles/editor -Domain example.com</code>
              <para>This command gives all users of the domain example.com editor role in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/iam/docs/overview)">
            [Google Cloud IAM]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudResourceManager.RemoveGcIamPolicyBindingCmdlet">
            <summary>
            <para type="synopsis">
            Removes an IAM policy binding to a project.
            </para>
            <para type="description">
            Removes an IAM policy binding to a project. The cmdlet will use the default project if -Project is not used.
            If the binding does not exist, the cmdlet will not raise error.
            </para>
            <example>
              <code>PS C:\> Remove-GcIamPolicyBinding -Role roles/owner -User abc@google.com -Project "my-project"</code>
              <para>This command removes the owner role of user abc@google.com in the project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcIamPolicyBinding -Role roles/container.admin -Group my-group@google.com</code>
              <para>
              This command removes the container admin role of the group my-group@google.com in the default project.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Remove-GcIamPolicyBinding -Role roles/container.admin `
                                             -ServiceAccount service@project.iam.gserviceaccount.com
              </code>
              <para>
              This command removes the container admin role of the serviceaccount service@project.iam.gserviceaccount.com
              in the default project.
              </para>
            </example>
            <example>
              <code>PS C:\> Remove-GcIamPolicyBinding -Role roles/editor -Domain example.com</code>
              <para>This command removes the editor role of all users of the domain example.com in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/iam/docs/overview)">
            [Google Cloud IAM]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.ActiveUserConfig">
            <summary>
            Class that represents the current active gcloud config.
            The active gcloud config is the config that is listed when running "gcloud config list".
            This active config can be changed if the user run commands like "gcloud config set account"
            or if certain CLOUDSDK_* environment variables are changed.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ActiveUserConfig.UserToken">
            <summary>
            The token that belongs to this config.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ActiveUserConfig.SentinelFile">
            <summary>
            This file will be updated whenever there is a change to the active config.
            However, this file will not be updated if there is a change in the environment variables (CLOUDSDK_*)
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ActiveUserConfig.CachedFingerPrint">
            <summary>
            This string will be changed whenever there is a change to the active config,
            even if that change is caused by a change in the environment variables.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ActiveUserConfig.PropertiesJson">
            <summary>
            The JSON that represents the properties of this config.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ActiveUserConfig.ActiveConfig">
            <summary>
            Cache of the current active user config.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.ActiveUserConfig.s_lock">
            <summary>
            Lock to help prevents race condition when modifying the cache.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.ActiveUserConfig.GetActiveUserConfig(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Gets the current active config. This value will be cached for the next call.
            If refreshConfig is true, however, we will refresh the cache. Everytime the cache is refreshed,
            a new access token will be generated for the current active config (even if there is no change
            in the current active config).
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.ActiveUserConfig.GetActiveUserToken(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Gets the token that belongs to the current active config.
            This value will be normally be cached as the current active user config is normally cached.
            If refresh is true or if the current token already expired, however, we will refresh
            the active user config to get a new token.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.ActiveUserConfig.#ctor(System.String)">
            <summary>
            Creates an active user config by parsing a JSON.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.ActiveUserConfig.GetPropertyValue(System.String)">
            <summary>
            Returns a property of the configuration based on the given key.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.ActiveUserConfig.GetCurrentConfigurationFingerPrint">
            <summary>
            Returns fingerprint of the current configuration. The result will only be changed if there is
            either a change in the sentinel file (which is touched by gcloud any time the configuration is changed)
            or if there is a change in any CLOUDSDK_* environment variables.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.JsonExtensions">
            <summary>
            Static class that contains extension static to manipulate JToken.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.JsonExtensions.TryGetPropertyValue(Newtonsoft.Json.Linq.JToken,System.String,System.String@)">
            <summary>
            Search the JToken and its children recursively for a key that matches the given key.
            If such a key is found, set the value to the ref variable value and returns true.
            Otherwise, returns false.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.TokenResponse">
            <summary>
            OAuth 2.0 model for a successful access token response as specified in 
            http://tools.ietf.org/html/rfc6749#section-5.1.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.TokenResponse.AccessToken">
            <summary>The access token issued by the authorization server.</summary>
        </member>
        <member name="P:Google.PowerShell.Common.TokenResponse.ExpiredTime">
            <summary>
            The date and time that this token was issued.
            This is set in UTC time.
            It should be set by the CLIENT after the token was received from the server.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.TokenResponse.IsExpired">
            <summary>
            Returns <c>true</c> if the token is expired or it's going to be expired in the next minute.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.TokenResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Construct a new token by parsing activeConfigJson and get the credential.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.AuthenticateWithSdkCredentialsExecutor">
            <summary>
            OAuth 2.0 credential for accessing protected resources using an access token.
            This class will get the access token from "gcloud auth print-access-token".
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.AuthenticateWithSdkCredentialsExecutor.flow">
            <summary>
            Returns the authorization code flow. 
            This is used to revoke token (in RevokeTokenAsync)
            and intercept request with the access token (in InterceptAsync).
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.AuthenticateWithSdkCredentialsExecutor.InterceptAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Default implementation is to try to refresh the access token if there is no access token or if we are 1 
            minute away from expiration. If token server is unavailable, it will try to use the access token even if 
            has expired. If successful, it will call <see cref="M:Google.Apis.Auth.OAuth2.IAccessMethod.Intercept(System.Net.Http.HttpRequestMessage,System.String)"/>.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.AuthenticateWithSdkCredentialsExecutor.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)">
            <summary>
            Handles an abnormal response when sending a HTTP request.
            A simple rule must be followed, if you modify the request object in a way that the abnormal response can
            be resolved, you must return <c>true</c>.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.AuthenticateWithSdkCredentialsExecutor.RefreshTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Refreshes the token by calling to ActiveUserConfig.GetActiveUserToken
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.AuthenticateWithSdkCredentialsExecutor.RevokeTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously revokes the token by calling
            <see cref="M:Google.Apis.Auth.OAuth2.Flows.IAuthorizationCodeFlow.RevokeTokenAsync(System.String,System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="taskCancellationToken">Cancellation token to cancel an operation.</param>
            <returns><c>true</c> if the token was revoked successfully.</returns>
        </member>
        <member name="T:Google.PowerShell.Common.IHitSender">
            <summary>
            This interface defines the what a class capable of sending hits to an analytics
            services should implement.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.HitSender">
            <summary>
            Class used to send Google Analytic hits using the Google Analytics measurement protocol.
            
            For more information, see:
            https://developers.google.com/analytics/devguides/collection/protocol/v1/
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.HitSender.SendHitData(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends the hit data to the server.
            </summary>
            <param name="hitData">The hit data to be sent.</param>
        </member>
        <member name="T:Google.PowerShell.Common.IAnalyticsReporter">
            <summary>
            This interface abstracts away a class to send analytics data.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.IAnalyticsReporter.ReportEvent(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Reports a single event as defined by Google Analytics.
            </summary>
            <param name="category">The cateogry of the event.</param>
            <param name="action">The action taken.</param>
            <param name="label">The label for the event, optional.</param>
            <param name="value">The value for the event, optional.</param>
        </member>
        <member name="M:Google.PowerShell.Common.IAnalyticsReporter.ReportPageView(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Reports a page view.
            </summary>
            <param name="page">The URL of the page.</param>
            <param name="title">The title of the page.</param>
            <param name="host">The host name for the page.</param>
            <param name="customDimensions">Custom values to report using the custom dimensions.</param>
        </member>
        <member name="T:Google.PowerShell.Common.AnalyticsReporter">
            <summary>
            <para>
            Client for the the Google Analytics Measurement Protocol service, which makes
            HTTP requests to publish data to a Google Analytics account
            </para>
            
            <para>
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.AnalyticsReporter.ApplicationName">
            <summary>
            The name of the application to use when reporting data.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.AnalyticsReporter.ApplicationVersion">
            <summary>
            The version to use when reporting data.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.AnalyticsReporter.PropertyId">
            <summary>
            The property ID being used by this reporter.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.AnalyticsReporter.ClientId">
            <summary>
            The client ID being used by this reporter.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.AnalyticsReporter.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,Google.PowerShell.Common.IHitSender)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="propertyId">The property ID to use, string with the format US-XXXX. Must not be null.</param>
            <param name="appName">The name of the app for which this reporter is reporting. Must not be null.</param>
            <param name="clientId">The client id to use when reporting, if null a new random Guid will be generated.</param>
            <param name="appVersion">Optional, the app version. Defaults to null.</param>
            <param name="debug">Optional, whether this reporter is in debug mode. Defaults to false.</param>
            <param name="userAgent">Optiona, the user agent to use for all HTTP requests.</param>
            <param name="sender">The instance of <seealso cref="T:Google.PowerShell.Common.IHitSender"/> to use to send the this.</param>
        </member>
        <member name="M:Google.PowerShell.Common.AnalyticsReporter.ReportEvent(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Convenience method to report a single event to Google Analytics.
            </summary>
            <param name="category">The category for the event.</param>
            <param name="action">The action that took place.</param>
            <param name="label">The label affected by the event.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Google.PowerShell.Common.AnalyticsReporter.ReportPageView(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Reports a page view hit to analytics.
            </summary>
            <param name="page">The URL to the page.</param>
            <param name="title">The page title.</param>
            <param name="host">The page host name.</param>
            <param name="customDimensions">Custom dimensions to add to the hit.</param>
        </member>
        <member name="M:Google.PowerShell.Common.AnalyticsReporter.ReportScreen(System.String)">
            <summary>
            Reports a window view.
            </summary>
            <param name="name">The name of the window. Must not be null.</param>
        </member>
        <member name="M:Google.PowerShell.Common.AnalyticsReporter.ReportStartSession">
            <summary>
            Reports that the session is starting.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.AnalyticsReporter.ReportEndSession">
            <summary>
            Reports that the session is ending.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.AnalyticsReporter.MakeBaseHitData">
            <summary>
            Constructs the dictionary with the common parameters that all requests must
            have.
            </summary>
            <returns>Dictionary with the parameters for the report request.</returns>
        </member>
        <member name="T:Google.PowerShell.Common.IEventsReporter">
            <summary>
            This interface abstracts a generic events reporter for analytics.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.IEventsReporter.ReportEvent(System.String,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Report an event to analytics.
            </summary>
            <param name="source">The source of the events.</param>
            <param name="eventType">The event type.</param>
            <param name="eventName">The event name.</param>
            <param name="userLoggedIn">Is there a logged in user.</param>
            <param name="projectNumber">The project number, optional.</param>
            <param name="metadata">Extra metadata for the event, optional.</param>
        </member>
        <member name="T:Google.PowerShell.Common.EventsReporter">
            <summary>
            Reports events using the provided analytics reporter.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.EventsReporter.EscapeValue(System.String)">
            <summary>
            Escapes a value so it can be included in the GA hit and being able to parse them again on
            the backend Only the ',', '=' and '\\' characters need to be escaped as those are the separators
            for the values, in the string.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.AnalyticsEvent">
            <summary>
            Data object representing an analytics event. Useful for bundling data to be passed to an IEventReporter.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.CloudSdkSettings">
            <summary>
            Wrapper over the settings files created by the Google Cloud SDK. No data is cached, so
            it is possible to have race conditions between gcloud and PowerShell. This is by design.
            gcloud is the source of truth for data.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.CloudSdkConfigVariable">
            <summary>
            Environment variable which points to the location of the current configuration file.
            This overrides the user configuration file as well as the global installation properties file.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.CloudSdkActiveConfigNameVariable">
            <summary>
            Environment variable which stores the current active config.
            This overrides value found in active_config file if present.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.AppdataEnvironmentVariable">
            <summary>Environment variable which contains the Application Data settings.</summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.CloudSDKConfigDirectoryWindows">
            <summary>
            GCloud configuration directory, relative to %APPDATA% in Windows
            and %HOME%/.config in UNIX.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.ActiveConfigFileName">
            <summary>Name of the Cloud SDK file containing the name of the active config.</summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.ConfigurationsFolderName">
            <summary>Folder name where configuration files are stored.</summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.ClientIDFileName">
            <summary>Name of the file containing the anonymous client ID.</summary>
        </member>
        <member name="M:Google.PowerShell.Common.CloudSdkSettings.GetSettingsValue(System.String)">
            <summary>
            Returns the setting with the given name from the currently active gcloud configuration.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.CloudSdkSettings.GetDefaultProject">
            <summary>Returns the default project for the Google Cloud SDK.</summary>
        </member>
        <member name="M:Google.PowerShell.Common.CloudSdkSettings.GetOptIntoUsageReporting">
            <summary>
            Returns whether or not the user has opted-into of telemetry reporting. Defaults to false (opted-out).
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.CloudSdkSettings.GetAnonymousClientID">
             <summary>
             Client ID refers to the random UUID generated to group telemetry reporting.
            
             The file is generated on-demand by the Python code. Returns a new UUID if
             the file isn't found. (Meaning we will generate new UUIDs until the Python
             code gets executed.)
             </summary>
        </member>
        <member name="F:Google.PowerShell.Common.CloudSdkSettings.s_isWindows">
            <summary>
            True if the module is run on Windows. This is a cache
            for IsWindows property.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.CloudSdkSettings.IsWindows">
            <summary>True if the module is run on Windows.</summary>
        </member>
        <member name="M:Google.PowerShell.Common.CloudSdkSettings.GetCloudSdkFolder">
            <summary>
            Returns the folder that contains Cloud SDK Config.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.GCloudCmdlet">
            <summary>
            Base commandlet for all Google Cloud cmdlets.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.GCloudCmdlet.UnknownCmdletName">
            <summary>Placeholder for an unknown cmdlet name when reporting telemetry.</summary>
        </member>
        <member name="P:Google.PowerShell.Common.GCloudCmdlet.Project">
            <summary>
            The project that is used by the cmdlet. This value will be used in reporting usage.
            The logic is in the Dispose function. We will map this project id to a project number.
            If the derived class leaves it as null, we will fall back to the active project in
            the Cloud SDK. The project number will also be converted to hash before we use it
            in reporting usage.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetBaseClientServiceInitializer">
            <summary>
            Returns an instance of the Google Client API initializer, using the active user's credentials.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetFullPath(System.String)">
            <summary>
            Given a path, try to get the fully-qualified path and returns the PowerShell Provider
            that resolves the path. For example, if the path is C:\Test, this will return "C:\Test"
            with provider as FileSystem. If the path is gs:\my-bucket, this wil return "my-bucket"
            with provider as GoogleCloudStorage.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetFullFilePath(System.String)">
             <summary>
             Returns the fully-qualified file path, properly relative file paths (taking the current Powershell
             environemnt into account.)
            
             This method eliminates a class of bug where cmdlets do not support relative file paths. Because
             Path.GetFile only handles file paths relative to the current (process) directory, which is not going to be
             correct if the user has changed the current directory within the PowerShell session.
            
             You should *always* call this instead of Path.GetFullPath inside of cmdlets.
             </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.ConvertToDictionary``2(System.Collections.Hashtable)">
            <summary>
            Converts a PowerShell Hashtable object to a dictionary.
            By default, @{"a" = "b"} in PowerShell is passed to cmdlets as HashTable so we will have to
            convert it to a dictionary if we want to use function that requires Dictionary.
            Returns an empty dictionary if hashTable is null.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.WriteResourceExistsError(System.String,System.String,System.Object)">
            <summary>
            Helper function to write an exception when we try to create a resource that already exists.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.WriteResourceMissingError(System.String,System.String,System.Object)">
            <summary>
            Helper function to write an exception when we try to access a resource that does not exist.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.BeginProcessing">
            <summary>
            Sets properties and fields decordated with ConfigPropertyNameAttribute to their defaults, if necessary.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.UpdateConfigPropertyNameAttribute">
            <summary>
            Updates the properties of the cmdlet that are marked with a ConfigPropertyName attribute, are an
            active PowerShell parameter for the current parameter set, and do not yet have a value.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.IsActiveParameter(System.Reflection.MemberInfo)">
            <summary>
            Checks if the member is a powershell parameter that applys to the currently active parameter set.
            </summary>
            <param name="member">
            The member of the cmdlet to check.
            </param>
            <returns>
            True if the member is a powershell parameter of the current parameter set, false otherwise.
            </returns>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.EndProcessing">
            <summary>
            Provides a one-time, post-processing functionality for the cmdlet.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetCmdletName">
            <summary>
            Returns the name of a properly annotated cmdlet, e.g. Test-GcsBucket, otherwise UnknownCmdletName.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.ResolveVariable(System.String,System.Object)">
            <summary>
            Given a variable name, resolve it to an object.
            If we cannot resolve it, returns the defaultValue.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetCloudSdkSettingValue(System.String,System.String)">
            <summary>
            Given a settingName (e.g. Project) and a settingValue (e.g. "gcloud-testing" or $project),
            this function will try to first resolve the settingValue to a string. If it fails to do so,
            then the function will look into the Cloud SDK Settings to get the default value.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetProjectNumber(System.String)">
            <summary>
            Returns a project number based on a project ID.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.GCloudCmdlet.UnknownParameterSetException">
            <summary>
            The exeption to be thrown when the parameter set is invalid. Should only be called if the code is
            not properly handling all parameter sets.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetProjectNameFromUri(System.String)">
            <summary>
            Library method to pull the name of a project from a uri.
            </summary>
            <param name="uri">
            The uri that includes the project.
            </param>
            <returns>
            The name of the project.
            </returns>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GetUriPart(System.String,System.String)">
            <summary>
            Library method to pull a resource name from a Rest uri.
            </summary>
            <param name="resourceType">
            The type of resource to get the name of (e.g. projects, zones, instances)
            </param>
            <param name="uri">
            The uri to pull the resource name from.
            </param>
            <returns>
            The name of the resource i.e. the section of the uri following the resource type.
            </returns>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudCmdlet.GenerateRuntimeParameter(System.String,System.String,System.String[],System.Boolean,System.String[])">
            <summary>
            Generate a RuntimeDefinedParameter based on the parameter name,
            the help message and the valid set of parameter values.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.GCloudWrapper">
            <summary>
            This class shell executes "gcloud {command} --format=json",
            to allow delegation to Cloud SDK implementation. Used for things like
            credential management.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudWrapper.GetActiveConfig">
            <summary>
            Gets the current active gcloud config by calling config-helper.
            Every call will also create a new access token in the string returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.PowerShell.Common.GCloudWrapper.GetGCloudCommandOutput(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Execute cmd.exe /c "gcloud {command} --format=json" and returns
            the standard output if the command returns exit code 0.
            This will not pop up any new windows.
            The environment parameter is used to set environment variable for the execution.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.Preconditions">
            <summary>
            Preconditions for checking method arguments, state etc.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckNotNull``1(``0,System.String)">
            <summary>
            Checks that the given argument (to the calling method) is non-null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument"></param>
            <param name="paramName">The name of the parameter in the calling method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument"/> is null</exception>
            <returns><paramref name="argument"/> if it is not null</returns>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckArgumentRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Checks that the given argument value is valid.
            </summary>
            <remarks>
            Note that the upper bound (<paramref name="maxInclusive"/>) is inclusive,
            not exclusive. This is deliberate, to allow the specification of ranges which include
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
            <param name="argument">The value of the argument passed to the calling method.</param>
            <param name="paramName">The name of the parameter in the calling method.</param>
            <param name="minInclusive">The smallest valid value.</param>
            <param name="maxInclusive">The largest valid value.</param>
            <returns><paramref name="argument"/> if it was in range</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument was outside the specified range.</exception>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckState(System.Boolean,System.String)">
            <summary>
            Checks that given condition is met, throwing an <see cref="T:System.InvalidOperationException"/> otherwise.
            </summary>
            <param name="condition">The (already evaluated) condition to check.</param>
            <param name="message">The message to include in the exception, if generated. This should not
            use interpolation, as the interpolation would be performed regardless of whether or
            not an exception is thrown.</param>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckState``1(System.Boolean,System.String,``0)">
            <summary>
            Checks that given condition is met, throwing an <see cref="T:System.InvalidOperationException"/> otherwise.
            </summary>
            <param name="condition">The (already evaluated) condition to check.</param>
            <param name="format">The format string to use to create the exception message if the
            condition is not met.</param>
            <param name="arg0">The argument to the format string.</param>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckState``2(System.Boolean,System.String,``0,``1)">
            <summary>
            Checks that given condition is met, throwing an <see cref="T:System.InvalidOperationException"/> otherwise.
            </summary>
            <param name="condition">The (already evaluated) condition to check.</param>
            <param name="format">The format string to use to create the exception message if the
            condition is not met.</param>
            <param name="arg0">The first argument to the format string.</param>
            <param name="arg1">The second argument to the format string.</param>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckArgument(System.Boolean,System.String,System.String)">
            <summary>
            Checks that given argument-based condition is met, throwing an <see cref="T:System.ArgumentException"/> otherwise.
            </summary>
            <param name="condition">The (already evaluated) condition to check.</param>
            <param name="paramName">The name of the parameter whose value is being tested.</param>
            <param name="message">The message to include in the exception, if generated. This should not
            use interpolation, as the interpolation would be performed regardless of whether or not an exception
            is thrown.</param>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckArgument``1(System.Boolean,System.String,System.String,``0)">
            <summary>
            Checks that given argument-based condition is met, throwing an <see cref="T:System.ArgumentException"/> otherwise.
            </summary>
            <param name="condition">The (already evaluated) condition to check.</param>
            <param name="paramName">The name of the parameter whose value is being tested.</param>
            <param name="format">The format string to use to create the exception message if the
            condition is not met.</param>
            <param name="arg0">The argument to the format string.</param>
        </member>
        <member name="M:Google.PowerShell.Common.Preconditions.CheckArgument``2(System.Boolean,System.String,System.String,``0,``1)">
            <summary>
            Checks that given argument-based condition is met, throwing an <see cref="T:System.ArgumentException"/> otherwise.
            </summary>
            <param name="condition">The (already evaluated) condition to check.</param>
            <param name="paramName">The name of the parameter whose value is being tested.</param>
            <param name="format">The format string to use to create the exception message if the
            condition is not met.</param>
            <param name="arg0">The first argument to the format string.</param>
            <param name="arg1">The second argument to the format string.</param>
        </member>
        <member name="T:Google.PowerShell.Common.ProcessOutput">
            <summary>
            This class contains the output of a running process.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ProcessOutput.Succeeded">
            <summary>
            Whether the process succeeded or not.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ProcessOutput.StandardError">
            <summary>
            The complete contents of the stderr stream.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ProcessOutput.StandardOutput">
            <summary>
            The complete contents of the stdout stream.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.OutputStream">
            <summary>
            The output streams from a process.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.OutputHandlerEventArgs">
            <summary>
            Evemt args passed to the output handler of a process.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.ProcessUtils">
            <summary>
            This class defines helper methods for starting sub-processes and getting the output from the processes.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.ProcessUtils.RunCommand(System.String,System.String,System.EventHandler{Google.PowerShell.Common.OutputHandlerEventArgs},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Runs the given binary given by <paramref name="file"/> with the passed in <paramref name="args"/> and
            reads the output of the new process as it happens, calling <paramref name="handler"/> with each line being output
            by the process.
            Uses <paramref name="environment"/> if provided to customize the environment of the child process.
            </summary>
            <param name="file">The path to the binary to execute, it must not be null.</param>
            <param name="args">The arguments to pass to the binary to execute, it can be null.</param>
            <param name="handler">The callback to call with the line being oput by the process, it can be called outside
            of the UI thread. Must not be null.</param>
            <param name="environment">Optional parameter with values for environment variables to pass on to the child process.</param>
            <returns></returns>
        </member>
        <member name="M:Google.PowerShell.Common.ProcessUtils.GetCommandOutput(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Runs a process until it exits, returns it's complete output.
            </summary>
            <param name="file">The path to the exectuable.</param>
            <param name="args">The arguments to pass to the executable.</param>
            <param name="environment">The environment variables to use for the executable.</param>
            <returns></returns>
        </member>
        <member name="T:Google.PowerShell.Common.IReportCmdletResults">
            <summary>
            Interface for reporting cmdlet invocations and results to analytic services. See concrete
            implementations for details.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.IReportCmdletResults.ReportSuccess(System.String,System.String,System.String)">
            <summary>
            Report a successful cmdlet invocation. "Expected" errors are considered a success.
            For example, Test-XXX should report success even if the existance test fails.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.IReportCmdletResults.ReportFailure(System.String,System.String,System.String,System.Int32)">
            <summary>
            Report a cmdlet failing. Failure is defined as any abnormal termination, such as
            a runtime exception, user-cancelation, etc.
            </summary>
            <param name="cmdletName">Name of the cmdlet that failed.</param>
            <param name="parameterSet">Name of the parameter set the cmdlet was running.</param>
            <param name="projectNumber">Name of project that the cmdlet was using (if applicable).</param>
            <param name="errorCode">Return the HTTP error code as applicable, otherwise use non-zero.</param>
        </member>
        <member name="T:Google.PowerShell.Common.InMemoryCmdletResultReporter">
            <summary>
            Fake implementation of IReportCmdletResults for unit testing. This will also be used in
            production for users who have opted-out of sending analytics data to Google. (Read:
            performance matters, it can't just store everything in memory.)
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.InMemoryCmdletResultReporter.EventRecord">
            <summary>
            IMPORTANT: We rely on ValueType.Equals for structural equality later. If
            you make this a class you will need to overwrite Equals and GetHashCode.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.InMemoryCmdletResultReporter.kMaxEvents">
            <summary>
            Keep kMaxEvents stored in memory, for checking later. After kMaxEvents have
            been recorded, the oldest events will get overwritten.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.InMemoryCmdletResultReporter.Reset">
            <summary>
            Clears all history of events.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Common.InMemoryCmdletResultReporter.ContainsEvent(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns whether or not an event with the given makeup has been recorded.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.AnalyticsEventCategory">
            <summary>
            Type of analytic event.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.GoogleAnalyticsCmdletReporter">
            <summary>
            Reports PowerShell cmdlet results to Google Analytics.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.GoogleAnalyticsCmdletReporter.s_reporter">
            <summary>
            Singleton instance of the event reporter object, wrapping the actual calls to Google Analytics.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Common.GoogleAnalyticsCmdletReporter._category">
            <summary>
            Category for all analytic events reported through this instance.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.PropertyByTypeTransformationAttribute">
            <summary>
            This attribute allows a parameter to accept multiple types by replacing a target type with the value
            of a specified property. If the argument is not of the target type, it will not be changed.
            </summary>
            <example>
            <code>
            [PropertyByTypeTransformation(Property = "Name", TypeToTransform = typeof(Zone))]
            public string ZoneName { get; set; }
            </code>
            Transforms any Zone objects given to the ZoneName Parameter into zoneObject.Name
            </example>
        </member>
        <member name="P:Google.PowerShell.Common.PropertyByTypeTransformationAttribute.TypeToTransform">
            <summary>
            The target Type that will be transformed. e.g. A Google.Aips.Compute.v1.Zone object.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.PropertyByTypeTransformationAttribute.Property">
            <summary>
            The name of the Property/Field to return. e.g. Name, a property of the type Zone
            </summary>
        </member>
        <member name="T:Google.PowerShell.Common.ConfigPropertyNameAttribute">
            <summary>
            This attribute indicates which property of the gcloud config provides the default for this parameter.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Common.ConfigPropertyNameAttribute.Property">
            <summary>
            The gcloud config property that holds the default for this attribute.
            </summary>
            <example>
            project, zone
            </example>
        </member>
        <member name="M:Google.PowerShell.Common.ConfigPropertyNameAttribute.SetConfigDefault(System.Reflection.PropertyInfo,Google.PowerShell.Common.GCloudCmdlet)">
            <summary>
            Gives the property a default value from the gcould config if needed.
            </summary>
            <param name="property">
            The property info.
            </param>
            <param name="instance">
            The instance the property is a member of.
            </param>
        </member>
        <member name="M:Google.PowerShell.Common.ConfigPropertyNameAttribute.SetObjectConfigDefault(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gives the property a default value from the gcould config. This sets the property regardless of its
            current value.
            </summary>
            <param name="property">The property to set.</param>
            <param name="instance">The instance that contains the property to set.</param>
        </member>
        <member name="M:Google.PowerShell.Common.ConfigPropertyNameAttribute.SetConfigDefault(System.Reflection.FieldInfo,Google.PowerShell.Common.GCloudCmdlet)">
            <summary>
            Gives the field a default value from the gcould config.
            </summary>
            <param name="field">
            The field info.
            </param>
            <param name="instance">
            The instance the field is a member of.
            </param>
        </member>
        <member name="T:Google.PowerShell.Common.ArrayPropertyTransformAttribute">
            <summary>
            This attribute allows an array parameter to accept multiple types by replacing a target type with the 
            value of a specified property. If the array element is not of the target type, it will not be changed.
            </summary>
            <example>
            <code>
            [ArrayPropertyTransform(typeof(Zone), nameof(Zone.Name))]
            public string[] ZoneName { get; set; }
            </code>
            Transforms any Zone objects given to the ZoneName Parameter into zoneObject.Name
            </example>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceAddressCmdlet">
            <summary>
            <para type="synopsis">
            Gets information about a Google Compute Engine address.
            </para>
            <para type="description">
            Get an object that has information about an address.
            </para>
            <example>
            <code>Get-GceAddress</code>
            <para>
            List all global and region addresses.
            </para>
            </example>
            <example>
            <code>Get-GceAddress $addressName</code>
            <para>
            Get a named addresses of the region of the current gcloud config.
            </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/addresses#resource)">
            [Address resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceAddressCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the address. Required if not specified by the gcloud config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceAddressCmdlet.Region">
            <summary>
            <para type="description">
            The region the address is in. Requried when listing addresses of a region.
            Defaults to gcloud config region when getting a non-global named address.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceAddressCmdlet.Name">
            <summary>
            <para type="description">
            The name of the address to get.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceAddressCmdlet.Global">
            <summary>
            <para type="description">
            If set, will get global addresses, rather than region specific ones.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.AddGceAddressCmdlet">
            <summary>
            <para type="synopsis">
            Adds a new address.
            </para>
            <para type="description">
            Adds a new static external IP address to Google Compute Engine.
            </para>
            <example>
            <code>Add-GceAddress $addressName</code>
            <para>
            Adds an address to the default project and region:
            </para>
            </example>
            <example>
            <code>Add-GceAddress $addressName -Global</code>
            <para>Adds a global address to the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/addresses#resource)">
            [Address resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceAddressCmdlet.Project">
            <summary>
            <para type="description">
            The project that will own the address. Will default to the gcloud config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceAddressCmdlet.Region">
            <summary>
            <para type="description">
            The region the address will be in. For non-global addresses, will default to the gcloud config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceAddressCmdlet.Object">
            <summary>
            <para type="description">
            The Google.Apis.Compute.v1.Data.Address object with the information used to create an address.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceAddressCmdlet.Name">
            <summary>
            <para type="description">
            The name of the address to create. Must comply with RFC1035.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceAddressCmdlet.Description">
            <summary>
            <para type="description">
            Human readable description of the address.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceAddressCmdlet.Global">
            <summary>
            <para type="description">
            If set, will create a global address, rather than a region specific one.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RemoveGceAddressCmdlet">
            <summary>
            <para type="synopsis">
            Removes a Google Compute Engine address.
            </para>
            <para type="description">
            Removes a Google Compute Engine static external IP address.
            </para>
            <example>
            <code>Remove-GceAddress $addressName</code>
            <para>Removes an address of the default project and region</para>
            </example>
            <example>
            <code>Remove-GceAddress $addressName -Global</code>
            <para>
            Removes a global address of the default project.
            </para>
            </example>
            <example>
            <code>Get-GceAddress | Remove-GceAddress</code>
            <para>
            Removes all global and region specific addresses of the default project.
            </para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceAddressCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the address. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceAddressCmdlet.Region">
            <summary>
            <para type="description">
            The region the address is in. Defaults to the gcloud config region.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceAddressCmdlet.Name">
            <summary>
            <para type="description">
            The name of the address to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceAddressCmdlet.Global">
            <summary>
            <para type="description">
            If set, will delete a global address, rather than a region specific one.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceAddressCmdlet.Object">
            <summary>
            <para type="description">
            The address object to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceBackendServiceCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Compute Engine backend services.
            </para>
            <para type="description">
            Lists backend services of a project, or gets a specific one.
            </para>
            <example>
            <code>PS C:\> Get-GceBackendService</code>
            <para>This command lists all backend services for the default project.</para>
            </example>
            <example>
            <code>PS C:\> Get-GceBackendService "my-backendservice"</code>
            <para>This command gets the backend service named "my-backendservice".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/backendServices#resource-representations)">
            [Backend resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceBackendServiceCmdlet.Project">
            <summary>
            <para type="description">
            The project the backend services belong to. Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceBackendServiceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the backend service to get.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GceCmdlet">
            <summary>
            Base class for Google Compute Engine-based cmdlets. 
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.WaitForZoneOperation(System.String,System.String,Google.Apis.Compute.v1.Data.Operation,System.String)">
            <summary>
            Waits for the provided zone operation to complete. This way cmdlets can return newly
            created objects once they are finished being created, rather than returning thunks.
            
            Will throw an exception if the operation fails for any reason.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.WaitForRegionOperation(System.String,System.String,Google.Apis.Compute.v1.Data.Operation,System.String)">
            <summary>
            Waits for the provided region operation to complete. This way cmdlets can return newly
            created objects once they are finished being created, rather than returning thunks.
            
            Will throw an exception if the operation fails for any reason.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.WaitForGlobalOperation(System.String,Google.Apis.Compute.v1.Data.Operation,System.String)">
            <summary>
            Waits for the provided global operation to complete. This way cmdlets can return newly
            created objects once they are finished being created, rather than returning thunks.
            
            Will throw an exception if the operation fails for any reason.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.WriteProgress(Google.Apis.Compute.v1.Data.Operation,System.String)">
            <summary>
            Writes a progress record to give feedback to the user.
            </summary>
            <param name="op">The operation we are waiting on.</param>
            <param name="progressMessage">The custom message to write to the progress bar. If null, this
             method will generate a message from the operation.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.BuildActivity(Google.Apis.Compute.v1.Data.Operation)">
            <summary>
            Builds an activity. This is displayed on the top line of the progress bar.
            </summary>
            <param name="op">The operation to build an activity from.</param>
            <returns>The type and target of the operation </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.WriteProgressComplete(Google.Apis.Compute.v1.Data.Operation)">
            <summary>
            Closes the progress bar of the operation.
            </summary>
            <param name="op">The operation the progress bar was created for.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.GetZoneNameFromUri(System.String)">
            <summary>
            Library method to pull the name of a zone from a uri.
            </summary>
            <param name="uri">
            A uri that includes the zone.
            </param>
            <returns>
            The name of the zone part of the uri.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.GetRegionNameFromUri(System.String)">
            <summary>
            Library method to pull the name of a region from a URI.
            </summary>
            <param name="uri">
            A URI that includes the region.
            </param>
            <returns>
            The name of the region part of the URI.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceCmdlet.ConstructNetworkName(System.String,System.String)">
            <summary>
            Constructs network identifier. If networkName is an absolute URI, returns the URI.
            If networkName is empty, we will use the default network.
            If project is empty, we will use the default project.
            We will use the networkName and project's name to construct a network identifier and returns that.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet">
            <summary>
            This class is used write cmdlet that run concurrent Gce operations. A class inheriting this should add
            ongoing operations to the operations field in the BeginProcessing() and ProcessRecord() methods. These
            operations will then be waited on in the EndProccessing() method. If a child class requires its own
            EndProcessing(), it must call the base.EndProcessing() at some point.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.LocalOperation">
            <summary>
            Container class for all information needed to wait on a zone operation.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.LocalOperation.Callback">
            <summary>
            The action executed when the operation is complete.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.GlobalOperation">
            <summary>
            Container class for all information needed to wait on a gobal operation.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.GlobalOperation.Callback">
            <summary>
            The action executed when the operation is complete.
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet._zoneOperations">
            <summary>
            A place to store in progress operations to be waitied on in EndProcessing().
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.AddZoneOperation(System.String,System.String,Google.Apis.Compute.v1.Data.Operation)">
            <summary>
            Used by child classes to add zone operations to wait on.
            </summary>
            <param name="project">The name of the Google Cloud project.</param>
            <param name="zone">The name of the zone.</param>
            <param name="operation">The Operation object to wait on.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.AddZoneOperation(System.String,System.String,Google.Apis.Compute.v1.Data.Operation,System.Action)">
            <summary>
            Used by child classes to add zone operations to wait on.
            </summary>
            <param name="project">The name of the Google Cloud project.</param>
            <param name="zone">The name of the zone.</param>
            <param name="operation">The Operation object to wait on.</param>
            <param name="callback">The action to call when the operation is complete.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.AddRegionOperation(System.String,System.String,Google.Apis.Compute.v1.Data.Operation)">
            <summary>
            Used by child classes to add region operations to wait on.
            </summary>
            <param name="project">The name of the Google Cloud project.</param>
            <param name="region">The name of the region.</param>
            <param name="operation">The Operation object to wait on.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.AddRegionOperation(System.String,System.String,Google.Apis.Compute.v1.Data.Operation,System.Action)">
            <summary>
            Used by child classes to add region operations to wait on.
            </summary>
            <param name="project">The name of the Google Cloud project.</param>
            <param name="region">The name of the region.</param>
            <param name="operation">The Operation object to wait on.</param>
            <param name="callback">The action to call when the operation is complete.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.AddGlobalOperation(System.String,Google.Apis.Compute.v1.Data.Operation)">
            <summary>
            Used by child classes to add global operations to wait on.
            </summary>
            <param name="project">The name of the Google Cloud project</param>
            <param name="operation">The Operation object to wait on.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.AddGlobalOperation(System.String,Google.Apis.Compute.v1.Data.Operation,System.Action)">
            <summary>
            Used by child classes to add global operations to wait on.
            </summary>
            <param name="project">The name of the Google Cloud project</param>
            <param name="operation">The Operation object to wait on.</param>
            <param name="callback">The action to call when the operation is complete.</param>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceConcurrentCmdlet.EndProcessing">
            <summary>
            Waits on all the operations started by this cmdlet.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet">
            <summary>
              <para type="synopsis">
                Use this cmdlet when you need to provide additional information to Set-GceInstance -AddDisk or
                Add-GceInstance.
              </para>
              <para type="description">
                Creates a single new AttachedDisk object. These objects are used by New-GceInstanceConfig,
                Add-GceInstance, Add-GceInstanceTemplate and Set-GceInstance. They provide additional information
                about the disk being attached, such as the local name of the disk, or whether the disk should be
                automatically deleted.
              </para>
              <example>
                <code>
            PS C:\> $image = Get-GceImage "windows-cloud" -Family "windows-2012-r2"
            PS C:\> $disks = (New-GceAttachedDiskConfig $image -Boot -AutoDelete), `
                             (New-GceAttachedDiskConfig (Get-GceDisk "persistant-disk-name") -ReadOnly)
            PS C:\> Add-GceInstanceTemplate -Name "template-name" -Disk $disks
                </code>
                <para>Creates two attached disk objects, and creates a new template using them.</para>
              </example>
              <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances/attachDisk#request-body)">
                [Attached Disk resource definition]
              </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.Source">
            <summary>
            <para type="description">
            The URI of the preexisting disk to attach to an instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.SourceImage">
            <summary>
            <para type="description">
            The source image of the new disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.Name">
            <summary>
            <para type="description">
            The name of the disk to create.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.DiskType">
            <summary>
            <para type="description">
            Specifies the type of the disk. Defaults to pd-standard.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.Size">
            <summary>
            <para type="description">
            The size of the disk to create, in GB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.AutoDelete">
            <summary>
            <para type="description">
            When set, disk will be deleted when the instance is.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.Boot">
            <summary>
            <para type="description">
            When set, describes the boot disk of an instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.Nvme">
            <summary>
            <para type="description">
            When set, the disk interface will be NVME rather than SCSI.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.DeviceName">
            <summary>
            <para type="description">
            The name of the disk on the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceAttachedDiskConfigCmdlet.ReadOnly">
            <summary>
            <para type="description">
            Set to limit the instance to read operations.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceFirewallCmdlet">
            <summary>
            <para type="synopsis">
            Gets firewall rules for a project.
            </para>
            <para type="description">
            Gets firewall rules for a project.
            </para>
            <example>
              <code>PS C:\> Get-GceFirewall</code>
              <para>Lists all firewall rules in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceFirewall "my-firewall"</code>
              <para>Gets the information of the firewall rule in the default project named "my-firewall".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/firewalls#resource)">
            [Firewall resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceFirewallCmdlet.Project">
            <summary>
            <para type="description">
            The Project to get the firewall rule of.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceFirewallCmdlet.FirewallName">
            <summary>
            <para type="description">
            The name of the firewall rule to get. -Name and -Firewall are aliases of this parameter.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet">
            <summary>
            <para type="synopsis">
            Adds a new firewall rule.
            </para>
            <para type="description">
            Adds a new firewall rule. When given a pipeline of many Firewall.AllowedData, will collect them all and
            create a single new firewall rule.
            </para>
            <example>
            <code>
            PS C:\> New-GceFirewallProtocol tcp -Ports 80, 443 |
                New-GceFirewallProtocol esp |
                Add-GceFirewall -Name "my-firewall" -SourceTag my-source -TargetTag my-target
            </code>
            <para>Creates a new firewall rule in the default project named "my-firewall". The firewall allows
            traffic using tcp on ports 80 and 443 as well as the esp protocol from servers tagged my-source to
            servers tagged my-target.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/firewalls#resource)">
            [Firewall resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.Project">
            <summary>
            <para type="description">
            The name of the project to add the firewall rule to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.Name">
            <summary>
            <para type="description">
            The name of the new firewall rule.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.AllowedProtocol">
            <summary>
            <para type="description">
            A list of allowed protocols and ports. you can use New-GceFirewallProtocol to create them.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.Description">
            <summary>
            <para type="description">
            The human readable description of this firewall rule.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.Network">
            <summary>
            <para type="description">
            Url of the network resource for this firewall rule. If empty will be the default network.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.SourceRange">
            <summary>
            <para type="description">
            The IP address block that this rule applies to, expressed in CIDR format. One or both of
            SourceRange and SourceTag may be set. If both parameters are set, an inbound connection is allowed
            if it matches either SourceRange or SourceTag.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.SourceTag">
            <summary>
            <para type="description">
            The instance tag which this rule applies to. One or both of SourceRange and SourceTag may be set.
            If both parameters are set, an inbound connection is allowed it matches either SourceRange or
            SourceTag. Source tags cannot be used to allow access to an instance's external IP address.
            Source tags can only be used to control traffic traveling from an instance inside the same network
            as the firewall rule.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.TargetTag">
            <summary>
            <para type="description">
            An instance tag indicating sets of instances located in the network that may make network
            connections as specified in allowed[]. If TargetTag is not specified, the firewall rule applies to
            all instances on the specified network.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.ProcessRecord">
            <summary>
            Collect allowed from the pipeline.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.AddGceFirewallCmdlet.EndProcessing">
            <summary>
            Create the firewall rule.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RemoveGceFirewallCmdlet">
            <summary>
            <para type="synopsis">
            Removes a firewall rule from a project.
            </para>
            <para type="description">
            Removes a firewall rule from a project.
            </para>
            <example>
              <code>PS C:\> Remove-GceFirewall "my-firewall"</code>
              <para>Removes the firewall named "my-firewall" in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/firewalls#resource)">
            [Firewall resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceFirewallCmdlet.Project">
            <summary>
            <para type="description">
            The name of the project from which to remove the firewall.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceFirewallCmdlet.FirewallName">
            <summary>
            <para type="description">
            The name of the firewall rule to remove.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceFirewallCmdlet.InputObject">
            <summary>
            <para type="description">
            The firewall object to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.SetGceFirewallCmdlet">
            <summary>
            <para type="synopsis">
            Sets the data of a firewall rule.
            </para>
            <para type="description">
            Overwrites all data about a firewall rule.
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/firewalls#resource)">
            [Firewall resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceFirewallCmdlet.Project">
            <summary>
            <para type="description">
            The name of the project that owns the firewall rule to change.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceFirewallCmdlet.Firewall">
            <summary>
            <para type="description">
            The new firewall rule data.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceForwardingRuleCmdlet">
            <para type="synopsis">
            Gets Google Compute Engine forwarding rules.
            </para>
            <para type="description">
            Lists forwarding rules of a project, or gets a specific one.
            </para>
            <example>
              <code>PS C:\> Get-GceForwardingRule</code>
              <para>This command lists all forwarding rules for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceForwardingRule -Region us-central1</code>
              <para>This command lists all forwarding rules in region "us-central1" for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceForwardingRule "my-forwarding-rule"</code>
              <para>This command gets the forwarding rule named "my-forwarding-rule" in the default project and region.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceForwardingRule -Project my-project -Global</code>
              <para>This command lists all global forwarding rules for the project named "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GceForwardingRule "my-forwarding-rule" -Gobal</code>
              <para>This command gets the global forwarding rule named "my-forwarding-rule" in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/forwardingRules#resource)">
            [Forwarding Rule resource definition]
            </para>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceForwardingRuleCmdlet.Project">
            <summary>
            <para type="description">
            The project the forwarding rules belong to. Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceForwardingRuleCmdlet.Global">
            <summary>
            <para type="description">
            If set, will retrieve only global forwarding rules.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceForwardingRuleCmdlet.Region">
            <summary>
            <para type="description">
            The region of the forwaring rule to get. Defaults to the region in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceForwardingRuleCmdlet.Name">
            <summary>
            <para type="description">
            The name of the forwarding rule to get.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet">
            <summary>
            <para type="synopsis">
            Adds a Google Compute Engine health check.
            </para>
            <para type="descritpion">
            Adds a Google Compute Engine health check. Use this cmdlet to create both HTTP and HTTPS health checks.
            https://cloud.google.com/compute/docs/load-balancing/health-checks
            </para>
            <example>
              <code>PS C:\> Add-GceHealthCheck "my-health-check" -Project "my-project" -Http</code>
              <para>Adds an HTTP health check to the project named "my-project".</para>
            </example>
            <example>
              <code> PS C:\> Add-GceHealthCheck "my-health-check" -Https </code>
              <para>Adds an HTTPS health check to the project in the Cloud SDK config.</para>
            </example>
            <example>
              <code>
              PS C:\> Add-GceHealthCheck "my-health-check" -Http -Description "Description of my health check." `
                 -HostHeader "mydomain.com" -Port 50 -RequestPath "/some/path" -CheckInterval "0:0:2" `
                 -Timeout "0:0:2" -HealthyThreshold 3 -UnhealthyThreshold 3
              </code>
              <para>Adds an HTTP health check with non-default values.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/httpHealthChecks#resource)">
            [HealthCheck resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.Project">
            <summary>
            <para type="description">
            The project to add the health check to. Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.Name">
            <summary>
            <para type="description">
            The name of the health check to add.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.Description">
            <summary>
            <para type="description">
            Human readable description of the health check.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.HostHeader">
            <summary>
            <para type="description">
            The value of the host header in the health check request. If left empty, the public IP on behalf
            of which this health check is performed will be used.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.Port">
            <summary>
            <para type="description">
            The TCP port number for the health check request. Defaults to 80 for HTTP and 443 for HTTPS.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.RequestPath">
            <summary>
            <para type="description">
            The request path for the health check request. Defaults to "/".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.CheckInterval">
            <summary>
            <para type="description">
            How often to send a health check request. Defaults to 5 seconds.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.Timeout">
            <summary>
            <para type="description">
            How long to wait before claiming failure. Defaults to 5 seconds.
            May not be greater than CheckInterval.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.HealthyThreshold">
            <summary>
            <para type="description">
            Number of consecutive success required to mark an unhealthy instance healthy. Defaults to 2.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.UnhealthyThreshold">
            <summary>
            <para type="description">
            Number of consecutive failures required to mark a healthy instance unhealthy. Defaults to 2.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.Https">
            <summary>
            <para type="description">
            If set, will create an HTTPS health check. If not set, will create an HTTP health check.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.HttpsObject">
            <summary>
            <para type="description">
            Object describing a new HTTPS health check.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceHealthCheckCmdlet.HttpObject">
            <summary>
            <para type="description">
            Object describing a new http health check.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceHealthCheckCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Compute Engine health checks.
            </para>
            <para type="description">
            Gets Google Compute Engine health checks.
            This cmdlet can be used to retrieve both HTTP and HTTPS health checks. It can list all health checks
            of a project, or get a health check by name.
            </para>
            <example>
              <code>PS C:\> Get-GceHealthCheck -Project "my-project"</code>
              <para>Gets all health checks of project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GceHealthCheck -Https</code>
              <para>Gets all HTTPS health checks of the project in the Cloud SDK config.</para>
            </example>
            <example>
              <code>PS C:\>; Get-GceHealthCheck "my-health-check" -Http</code>
              <para>
                Gets the HTTP health check named "my-health-check" in the project of the Cloud SDK config.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/httpHealthChecks#resource)">
            [HealthCheck resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceHealthCheckCmdlet.Project">
            <summary>
            <para type="description">
            The name of the project to get the health checks of.
            Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceHealthCheckCmdlet.Name">
            <summary>
            <para type="description">
            The name of the health check to get.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceHealthCheckCmdlet.Http">
            <summary>
            <para type="description">
            If set, will get health checks that use HTTP.
            If neither -Http nor -Https are set, Get-GceHealthCheck will retrieve both.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceHealthCheckCmdlet.Https">
            <summary>
            <para type="description">
            If set, will get health checks that use HTTPS.
            If neither -Http nor -Https are set, Get-GceHealthCheck will retrieve both.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RemoveGceHealthCheckCmdlet">
            <summary>
            <para type="synopsis">
            Removes a Google Compute Engine health check.
            </para>
            <para type="description">
            Removes a Google Compute Engine Health check. Use this cmdlet to remove both HTTP and HTTPS health
            checks.
            </para>
            <example>
              <code> PS C:\> Remove-GceHealthCheck "my-health-check" -Project "my-project" -Http </code>
              <para>Remove HTTP health check "my-health-check" from project "my-project".</para>
            </example>
            <example>
              <code> PS C:\> Remove-GceHealthCheck "my-health-check" -Https </code>
              <para>Remove HTTPS health check "my-health-check" from the project in the Cloud SDK config.</para>
            </example>
            <example>
              <code> PS C:\> Get-GceHealthCheck -Project "my-project | Remove-GceHealthCheck</code>
              <para>Remove all health checks from project "my-project".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/httpHealthChecks#resource)">
            [HealthCheck resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceHealthCheckCmdlet.Project">
            <summary>
            <para type="description">
            The name of the project to remove the health check from.
            Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceHealthCheckCmdlet.Name">
            <summary>
            <para type="description">
            The name of the health check to remove.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceHealthCheckCmdlet.Http">
            <summary>
            <para type="description">
            If set, will remove a health check that uses HTTP.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceHealthCheckCmdlet.Https">
            <summary>
            <para type="description">
            If set, will remove a health check that uses HTTPS.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceHealthCheckCmdlet.HttpObject">
            <summary>
            <para type="description">
            An object defining the HTTP health check to remove.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceHealthCheckCmdlet.HttpsObject">
            <summary>
            <para type="description">
            An object defining the HTTPS health check to remove.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.SetGceHealthCheckCmdlet">
            <summary>
            <para type="synopsis">
            Sets the data of a Google Compute Engine health check.
            </para>
            <para type="description">
            Sets the data of a Google Compute Engine health check. First get the health check object with
            Get-GceHealthCheck. Then change the data in the object you received. Finally send that object to
            Set-GceHealthCheck.
            </para>
            <example>
              <code>
                PS C:\> $healthCheck = Get-GceHealthCheck "my-health-check" -Project "my-project"
                PS C:\> $healthCheck.CheckIntervalSec = 30
                PS C:\> $healthCheck | Set-GceHealthCheck
              </code>
              <para>Changes the  HTTP health check "my-health-check" from project "my-project".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/httpHealthChecks#resource)">
            [HealthCheck resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceHealthCheckCmdlet.HttpObject">
            <summary>
            <para type="description">
            The object describing a health check using HTTP.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceHealthCheckCmdlet.HttpsObject">
            <summary>
            <para type="description">
            The object describing a health check using HTTPS.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceImageCmdlets">
            <summary>
            <para type="synopsis">
            Gets information about Google Compute Engine disk images.
            </para>
            <para type="description">
            Gets information about Google Compute Engine disk images. These images can be used to as the inital
            state of a disk, whether created manually, as part of a new instance, or from an instance tempalte.
            </para>
            <example>
              <code>PS C:\> Get-GceImage</code>
              <para>Lists all the standard up to date images.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceImage -Family "window-2012-r2"</code>
              <para>Gets the latest windows 2012 r2 image from the windows-cloud project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceImage "windows-server-2008-r2-dc-v20160719"</code>
              <para>Gets the image named windows-server-2008-r2-dc-v20160719 from the windows-cloud project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceImage "my-image" -Project "my-project"</code>
              <para>Gets the custom image named "my-image" from the private project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GceImage -Project "my-project" -IncludeDeprecated</code>
              <para>Lists all images in project "my-project", including images marked as deprecated.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/images#resource)">
            [Image resource definition]
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/images)">
            [Google Cloud Platform images]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceImageCmdlets.Name">
            <summary>
            <para type="description">
            The name of the image to get. e.g. "windows-server-2012-r2-dc-v20160623".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceImageCmdlets.Family">
            <summary>
            <para type="description">
            The name of the image family to get the latest image of. e.g. "windows-2012-r2".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceImageCmdlets.Project">
            <summary>
            <para type="description">
            The project that owns the image. This defaults to a standard set of public image projects.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceImageCmdlets.IncludeDeprecated">
            <summary>
            <para type="description">
            If set, deprecated images will be included.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.AddGceImageCmdlet">
            <summary>
            <para type="synopsis">
            Creates a Google Compute Engine image.
            </para>
            <para type="description">
            Creates a Google Compute Engine image from the given disk.
            </para>
            <example>
              <code>PS C:\> Get-GceDisk "my-disk" | Add-GceImage -Name "my-image" -Family "my-family"</code>
              <para>Creates a new image named "my-image" of the family "my-family" in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/images#resource)">
            [Image resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceImageCmdlet.Project">
            <summary>
            <para type="description">
            The project that will own the image. This defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceImageCmdlet.SourceDisk">
            <summary>
            <para type="description">
            The Disk object that describes the disk to build the image from. You can get this from Get-GceDisk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceImageCmdlet.Name">
            <summary>
            <para type="description">
            The name of the image to create. This defaults to the name of the disk the image is being created
            from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceImageCmdlet.Family">
            <summary>
            <para type="description">
            The family this image is part of.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceImageCmdlet.Label">
            <summary>
            <para type="description">
            The map of labels (key/value pairs) to be applied to the image.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceImageCmdlet.Description">
            <summary>
            <para type="description">
            Human readable description of the image.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RemoveGceImageCmdlet">
            <summary>
            <para type="synopsis">
            Removes a Google Compute Engine disk image.
            </para>
            <para type="description">
            Removes a Google Compute Engine disk image.
            </para>
            <example>
              <code>PS C:\> Remove-GceImage "my-image"</code>
              <para>Removes the image named "my-image" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceImage -Project "my-project" | Remove-GceImage</code>
              <para>Removes all images from project "my-project".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/images#resource)">
            [Image resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceImageCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the image. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceImageCmdlet.Name">
            <summary>
            <para type="description">
            The name of the image to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceImageCmdlet.Object">
            <summary>
            <para type="description">
            The Image object that describes the image to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet">
            <summary>
            <para type="synopsis">
            Marks an image or schedules an image to be marked as DEPRECATED, OBSOLETE, or DELETED.
            </para>
            <para type="description">
            Marks an image or schedules an image to be marked as DEPRECATED, OBSOLETE, or DELETED.
            </para>
            <example>
              <code>
              PS C:\> $image2 = Get-GceImage "my-new-image" -Project "my-project"
              PS C:\> Disable-GceImage "my-old-image" -State DEPRECATED -Replacement $image2
              </code>
              <para>Marks the image named "my-old-image" as deprecated, and sets "my-new-image" as its replacement.</para>
            </example>
            <example>
              <code>
              PS C:\> $image1 = Get-GceImage "my-old-image" -Project "my-project"
              PS C:\> $image2 = Get-GceImage "my-new-image" -Project "my-project"
              PS C:\> Disable-GceImage $image1 -State OBSOLETE -Replacement $image2
              </code>
              <para>Marks the image named "my-old-image" as obsolete, and sets "my-new-image" as its replacement.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/images#resource)">
            [Image resource definition]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.ImageDisableState">
            <summary>
            Enum of available disabled states for instances.
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.ImageDisableState.DEPRECATED">
            <summary>
            Operations using a DEPRECATED image will return with a warning.
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.ImageDisableState.OBSOLETE">
            <summary>
            Operations using an OBSOLETE image will result in an error.
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.ImageDisableState.DELETED">
            <summary>
            Operations using a DELETED image will result in an error. Deleted images are only marked
            deleted, and still require a request to remove them.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the image to disable. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.Name">
            <summary>
            <para type="description">
            The name of the image to disable.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.Object">
            <summary>
            <para type="description">
            The Image object that describes the image to disable.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.Replacement">
            <summary>
            <para type="description">
            The Image object that is the suggested replacement for the image being disabled.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.ReplacementUrl">
            <summary>
            <para type="description">
            The url of the image that is the suggested replacement for the image being disabled.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.State">
            <summary>
            <para type="description">
            The new state of the image.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.DeprecateOn">
            <summary>
            <para type="description">
            The date to mark the image as deprecated.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.ObsoleteOn">
            <summary>
            <para type="description">
            The date to mark the image as obsolete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.DisableGceImageCmdlet.DeleteOn">
            <summary>
            <para type="description">
            The date to mark the image as deleted. The image will only be marked, and not actually destroyed
            until a request is made to remove it.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Gets information about one or more Google Compute Engine VM instances.
            </para>
            <para type="description">
            Gets information about all Google Compute Engine VM instances. Can get all instances of a project, or 
            all instances in a zone, or a specific instance by name. Can also get all instances of a managed
            instance group.
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            <example>
              <code>PS C:\> Get-GceInstance -Project "my-project"</code>
              <para>Gets all instances of the project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GceInstance -Zone "us-west1-a"</code>
              <para>Gets all instances in the zone "us-west1-a" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceInstance "my-instance"</code>
              <para>Gets the instance named "my-instance" in the default project and zone</para>
            </example>
            <example>
              <code>PS C:\> Get-GceInstance -ManagedGroupName "my-group"</code>
              <para>Gets all instances that are members of the managed instance group named "my-group".</para>
            </example>
            <example>
              <code>PS C:\> Get-GceInstance "my-instance" -SerialPortOutput -Port 4.</code>
              <para>Returns the data from serial port 4 of "my-instance".</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the instance resides.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.Object">
            <summary>
            <para type="description">
            The Instance object to get a new copy of.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.ManagedGroupName">
            <summary>
            <para type="description">
            The name of the instance group manager to get the instances of.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.ManagedGroupObject">
            <summary>
            <para type="description">
            The InstanceGroupManager object to get the instances of.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.SerialPortOutput">
            <summary>
            <para type="description">
            When this switch is set, the cmdlet will output the string contents of the serial port of the
            instance rather than the normal data about the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceCmdlet.PortNumber">
            <summary>
            <para type="description">
            The number of the serial port to read from. Defaults to 1. Has no effect if -SerialPortOutput is
            not set. Must be between 1 and 4, inclusive.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Creates and starts a Google Compute Engine VM instance.
            </para>
            <para type="description">
            Creates and starts a Google Compute Engine VM instance. You create a new instance by either using an 
            instance config created by New-GceInstanceConfig, or by specifying the parameters you want on this
            cmdlet.
            </para>
            <example>
              <code>
              PS C:\> New-GceInstanceConfig -Name "new-instance" -BootDiskImage $image |
                      Add-GceInstance -Project "my-project" -Zone "us-central1-a"
              </code>
              <para>Creates a new instance from an instance config.</para>
            </example>
            <example>
              <code>
                PS C:\> Add-GceInstance -Name "new-instance" -BootDisk $disk `
                    -MachineType "n1-standard-4" `
                    -Tag http, https `
                    -Metadata @{"windows-startup-script-ps1" =
                            "Read-GcsObject bucket object -OutFile temp.txt"}
              </code>
              <para>
                Creates a new instance in the default project and zone. The boot disk is the prexisting disk
                stored in $disk, the machine type has 4 cores, it runs a script on startup, and it is tagged as an
                http and https server.
              </para>
            </example>
            <example>
              <code>
                PS C:\> Add-GceInstance -Name "new-instance" -BootDisk $disk `
                    -MachineType "n1-standard-4" `
                    -Subnetwork "my-subnetwork" `
                    -Address "10.128.0.1"
              </code>
              <para>
                Creates a new instance in the default project and zone. The boot disk is the prexisting disk
                stored in $disk, the machine type has 4 cores, it uses the subnetwork "my-subnetwork" and
                the ip address "10.123.0.1" (this address must be within the subnetwork).
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Project">
            <summary>
            <para type="description">
            The project that will own the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the instance will reside.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.InstanceConfig">
            <summary>
            <para type="description">
            The definition of the instance to create.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance to add.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.MachineType">
            <summary>
            <para type="description">
            The machine type of this instance. Can be a name, a URL or a MachineType object from
            Get-GceMachineType. Defaults to "n1-standard-1".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.CustomCpu">
            <summary>
            <para type="description">
            Number of vCPUs used for a custom machine type.
            This has to be used together with CustomMemory.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.CustomMemory">
            <summary>
            <para type="description">
            Total amount of memory used for a custom machine type.
            This has to be used together with CustomCpu.
            The amount of memory is in MB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.CanIpForward">
            <summary>
            <para type="description">
            Enables instances to send and receive packets for IP addresses other than their own. Switch on if
            this instance will be used as an IP gateway or it will be set as the next-hop in a Route
            resource.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Description">
            <summary>
            <para type="description">
            Human readable description of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.BootDisk">
            <summary>
            <para type="description">
            The persistant disk to use as a boot disk. Use Get-GceDisk to get one of these.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.BootDiskImage">
            <summary>
            <para type="description">
            The the image used to create the boot disk. Use Get-GceImage to get one of these.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.ExtraDisk">
            <summary>
            <para type="description">
            An existing disk to attach. It will attach in read-only mode.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Disk">
            <summary>
            <para type="description">
            An AttachedDisk object specifying a disk to attach. Do not specify `-BootDiskImage` or
            `-BootDiskSnapshot` if this is a boot disk. You can build one using New-GceAttachedDiskConfig.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Metadata">
            <summary>
            <para type="description">
            The keys and values of the Metadata of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Network">
            <summary>
            <para type="description">
            The name of the network to use. If not specified, is default. This can be a Network object you get
            from Get-GceNetwork.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Region">
            <summary>
            <para type="description">
            The region in which the subnet of the instance will reside. Defaults to the region in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Subnetwork">
            <summary>
            <para type="description">
            The name of the subnetwork to use.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.NoExternalIp">
            <summary>
            <para type="description">
            If set, the instance will not have an external ip address.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Preemptible">
            <summary>
            <para type="description">
            If set, the instance will be preemptible. If set, AutomaticRestart will be false.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.AutomaticRestart">
            <summary>
            <para type="description">
            If set, the instance will not restart when shut down by Google Compute Engine.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.TerminateOnMaintenance">
            <summary>
            <para type="description">
            If set, the instance will terminate rather than migrate when the host undergoes maintenance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            The ServiceAccount used to specify access tokens. Use New-GceServiceAccountConfig to build one.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Tag">
            <summary>
            <para type="description">
            A tag of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Label">
            <summary>
            <para type="description">
            The map of labels (key/value pairs) to be applied to the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceCmdlet.Address">
            <summary>
            <para type="description">
            The static ip address this instance will have. Can be a string, or and Address object from
            Get-GceAddress.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RemoveGceInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a Google Compute Engine VM instance.
            </para>
            <para type="description">
            Deletes a Google Compute Engine VM instance.
            </para>
            <example>
                <code>PS C:\> Remove-GceInstance "my-instance"</code>
                <para>Removes the instance named "my-instance" in the default project and zone.</para>
            </example>
            <example>
              <code>
              PS C:\> Get-GceInstance -Project "my-project"|
                  where Status -eq Stopped |
                  Remove-GceInstance
              </code>
              <para>Removes all instances in project "my-project" that are currently stopped.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceInstanceCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceInstanceCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the instance resides.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceInstanceCmdlet.Object">
            <summary>
            <para type="description">
            The instance object to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.StartGceInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Starts a Google Compute Engine VM instance.
            </para>
            <para type="description">
            Starts a Google Compute Engine VM instance.
            </para>
            <example>
              <code>PS C:\> Start-GceInstance "my-instance"</code>
              <para>Starts the instance named "my-instance" in the default project and zone.</para>
            </example>
            <example>
              <code>
              PS C:\> Get-GceInstance -Project "my-project"|
                  where Status -eq Stopped |
                  Start-GceInstance
              </code>
              <para>Starts all instances in project "my-project" that are currently stopped.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StartGceInstanceCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StartGceInstanceCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the instance resides.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StartGceInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance to start.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StartGceInstanceCmdlet.Object">
            <summary>
            <para type="description">
            The instance object to start.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.StopGceInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Stops a Google Compute Engine VM instance.
            </para>
            <para type="description">
            Stops a Google Compute Engine VM instance.
            </para>
            <example>
              <code>PS C:\> Stop-GceInstance "my-instance"</code>
              <para>Stops the instance named "my-instance" in the default project and zone.</para>
            </example>
            <example>
              <code>
              PS C:\> Get-GceInstance -Project "my-project"|
                  where Status -eq Running |
                  Stop-GceInstance
              </code>
              <para>Stops all instances in project "my-project" that are currently running.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StopGceInstanceCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StopGceInstanceCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the instance resides.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StopGceInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance to stop.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.StopGceInstanceCmdlet.Object">
            <summary>
            <para type="description">
            The instance object to stop.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RestartGceInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Resets a Google Compute Engine VM instance.
            </para>
            <para type="description">
            Resets a Google Compute Engine VM instance.
            </para>
            <example>
              <code>PS C:\> Reset-GceInstance "my-instance"</code>
              <para>Resets the instance named "my-instance" in the default project and zone.</para>
            </example>
            <example>
              <code>
              PS C:\> Get-GceInstance -Project "my-project"|
                  Reset-GceInstance
              </code>
              <para>Removes all instances in project "my-project".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RestartGceInstanceCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RestartGceInstanceCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the instance resides.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RestartGceInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance to reset.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RestartGceInstanceCmdlet.Object">
            <summary>
            <para type="description">
            The instance object to restart.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Sets various attributes of a VM instance.
            </para>
            <para type="description">
            With this cmdlet, you can update metadata, attach and detach disks, add and remove access configs,
            or add and remove tags.
            </para>
            <example>
              <code>
              PS C:\> Set-GceInstance -Name "my-instance" -AttachDisk $disk
              </code>
              <para>Attach disk $disk to the instance "my-instance" in the default project.</para>
            </example>
            <example>
              <code>
              PS C:\> Set-GceInstance -Name "my-instance" -RemoveDisk "my-disk" -Project "my-project"
              </code>
              <para>
              Remove disk "my-disk" from the instance "my-instance" in the project "my-project".
              Please note that "my-disk" is the device name of the disk in the instance, not the
              persistent name of the disk.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GceInstance -Name "my-instance" -TurnOnAutoDeleteDisk "my-disk"
              </code>
              <para>
              Turn on autodelete for disk "my-disk" from the instance "my-instance".
              Please note that "my-disk" is the device name of the disk in the instance, not the
              persistent name of the disk.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GceInstance -Name "my-instance" -TurnOffAutoDeleteDisk $disk1, $disk2
              </code>
              <para>
              Turn off autodelete for disk $disk1 and $disk2 from the instance "my-instance".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the instance to update.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the instance resides.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance to update.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.Object">
            <summary>
            <para type="description">
            The instance object to update.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.NetworkInterface">
            <summary>
            <para type="description">
            The name of the network interface to add or remove access configs.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.AddAccessConfig">
            <summary>
            <para type="description">
            The new access config to add to a network interface.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.RemoveAccessConfig">
            <summary>
            <para type="description">
            The name of the access config to remove from the network interface.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.AddDisk">
            <summary>
            <para type="description">
            The disk to attach. Can the name of a disk, a disk object from Get-GceDisk, or an attached disk
            object from New-GceAttachedDiskConfig.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.RemoveDisk">
            <summary>
            <para type="description">
            The name of the disk to detach.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.TurnOnAutoDeleteDisk">
            <summary>
            <para type="description">
            The names of the disks to turn on autodelete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.TurnOffAutoDeleteDisk">
            <summary>
            <para type="description">
            The names of the disks to turn off autodelete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.AddMetadata">
            <summary>
            <para type="description">
            The keys and values of the metadata to add.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.RemoveMetadata">
            <summary>
            <para type="description">
            The keys of the metadata to remove.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.AddTag">
            <summary>
            <para type="description">
            The tag to add.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.RemoveTag">
            <summary>
            <para type="description">
            The tag to remove.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.ProcessAccessConfig">
            <summary>
            ProcessRecord for AccessConfig parameter set.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.ProcessDisk">
            <summary>
            ProcessRecord for Disk parameter set.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.ProcessAutoDeleteDisk">
            <summary>
            ProcessRecord for AutoDeleteDisk parameter set.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.SetAutoDeleteDisk(System.Boolean,System.String[])">
            <summary>
            Given an array of disks, turn on or off autodelete for them.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.ProcessMetadata">
            <summary>
            ProcessRecord for Metadata parameter set.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.SetGceInstanceCmdlet.ProcessTag">
            <summary>
            ProcessRecord for Tag parameter set.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceDiskCmdlet">
            <summary>
            <para type="synopsis">
            Gets the Google Compute Engine disks associated with a project.
            </para>
            <para type="description">
            Returns the project's Google Compute Engine disk objects.
            </para>
            <para type="description">
            If a Project is specified, will instead return all disks owned by that project. Filters,
            such as Zone or Name, can be provided to restrict the objects returned.
            </para>
            <example>
              <code>PS C:\> Get-GceDisk -Project "ppiper-prod" "ppiper-frontend"</code>
              <para>Get the disk named "ppiper-frontend".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/disks#resource)">
            [Disk resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceDiskCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for Compute Engine disks.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceDiskCmdlet.Zone">
            <summary>
            <para type="description">
            Specific zone to lookup disks in, e.g. "us-central1-a". Partial names
            like "us-" or "us-central1" will also work.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceDiskCmdlet.DiskName">
            <summary>
            <para type="description">
            Name of the disk you want to have returned.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GetGceDiskCmdlet.WriteDiskObjects(System.Collections.Generic.IEnumerable{Google.Apis.Compute.v1.Data.Disk})">
            <summary>
            Writes the collection of disks to the cmdlet's output pipeline, but filtering results
            based on the cmdlets parameters.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new Google Compute Engine disk object.
            </para>
            <para type="description">
            Creates a new Google Compute Engine disk object.
            </para>
            <example>
              <code>PS C:\> New-GceDisk "disk-name" -SizeGb 10 -DiskType pd-ssd</code>
              <para>
                Creates a new empty 10GB persistant solid state disk named "disk-name" in the default project and
                zone.
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GceImage -Family "windows-2012-r2" | New-GceDisk "disk-from-image"</code>
              <para>Creates a new persistant disk from the latest windows-2012-r2 image.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceSnapshot "snapshot-name" | New-GceDisk "disk-from-snapshot" </code>
              <para>Creates a new persistant disk from the snapshot named "snapshot-name".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/disks#resource)">
            [Disk resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.Project">
            <summary>
            <para type="description">
            The project to associate the new Compute Engine disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.Zone">
            <summary>
            <para type="description">
            Specific zone to create the disk in, e.g. "us-central1-a".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.DiskName">
            <summary>
            <para type="description">
            Name of the disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.Description">
            <summary>
            <para type="description">
            Optional description of the disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.SizeGb">
            <summary>
            <para type="description">
            Specify the size of the disk in GiB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.DiskType">
            <summary>
            <para type="description">
            Type of disk, e.g. pd-ssd or pd-standard.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.Label">
            <summary>
            <para type="description">
            The map of labels (key/value pairs) to be applied to the disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.Image">
            <summary>
            <para type="description">
            Source image to apply to the disk.
            </para>
            <para type="description">
            Use Get-GceImage to get the image to apply. For instance, to get the latest windows instance, use
            <code>Get-GceImage -Family "windows-2012-r2" -Project "windows-cloud"</code>.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceDiskCmdlet.Snapshot">
            <summary>
            <para type="description">
            Source snapshot to apply to the disk.
            </para>
            <para type="description">
            Use Get-GceSnapshot to get a previously made backup snapshot to apply to this disk.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.ResizeGceDiskCmdlet">
            <summary>
            <para type="synopsis">
            Resize a Compute Engine disk object.
            </para>
            <para type="description">
            Resize a Compute Engine disk object.
            </para>
            <example>
              <code>PS C:\> Resize-GceDisk "my-disk" 15</code>
              <para>Changes the size of the persistant disk "my-disk" to 15GB.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceDisk "my-disk" | Resize-GceDisk 15</code>
              <para>Changes the size of the persistant disk "my-disk" to 15GB.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/disks#resource)">
            [Disk resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.ResizeGceDiskCmdlet.Project">
            <summary>
            <para type="description">
            The project to associate the new Compute Engine disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.ResizeGceDiskCmdlet.Zone">
            <summary>
            <para type="description">
            Specific zone to create the disk in, e.g. "us-central1-a".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.ResizeGceDiskCmdlet.DiskName">
            <summary>
            <para type="description">
            Name of the disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.ResizeGceDiskCmdlet.InputObject">
            <summary>
            <para type="description">
            The Disk object that describes the disk to resize.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.ResizeGceDiskCmdlet.NewSizeGb">
            <summary>
            <para type="description">
            Specify the new size of the disk in GiB. Must be larger than the current disk size.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RemoveGceDiskCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a Compute Engine disk.
            </para>
            <example>
              <code> PS C:\> Remove-GceDisk "my-disk"</code>
              <para>Removes the disk in the default project and zone named "my-disk".</para>
            </example>
            <example>
              <code>PS C:\> Get-GceDisk "my-disk" | Remove-GceDisk</code>
              <para>Removes the disk in the default project and zone named "my-disk".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/disks#resource)">
            [Disk resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceDiskCmdlet.Project">
            <summary>
            <para type="description">
            The project to associate the new Compute Engine disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceDiskCmdlet.Zone">
            <summary>
            <para type="description">
            Specific zone to create the disk in, e.g. "us-central1-a".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceDiskCmdlet.DiskName">
            <summary>
            <para type="description">
            Name of the disk.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceDiskCmdlet.Object">
            <summary>
            <para type="description">
            The Disk object that describes the disk to remove
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet">
            <summary>
            <para type="synopsis">
            Makes a new Google Compute Engine VM instance description.
            </para>
            <para type="description"> 
            Makes a new Google Compute Engine VM instance description.
            Use Add-GceInstance to instantiate the instance.
            </para>
            <example>
              <code> PS C:\> $config = New-GceInstanceConfig -Name "new-instance" -BootDiskImage $image</code>
              <para>
                Creates a new instance description and saves it to $config. The new instance will create a new
                boot disk from $image.
              </para>
            </example>
            <example>
              <code>
              PS C:\> $config = New-GceInstanceConfig -Name "new-instance" -BootDiskImage $image -Subnetwork "my-subnetwork"
              </code>
              <para>
                Creates a new instance description and saves it to $config. The new instance will create a new
                boot disk from $image and uses subnetwork "my-subnetwork".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance. The name must be 1-63 characters long and
            match [a-z]([-a-z0-9]*[a-z0-9])?
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.MachineType">
            <summary>
            <para type="description">
            The machine type of this instance. Can be a name, a URL or a MachineType object from
            Get-GceMachineType. Defaults to "n1-standard-1".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.CustomCpu">
            <summary>
            <para type="description">
            Number of vCPUs used for a custom machine type.
            This has to be used together with CustomMemory.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.CustomMemory">
            <summary>
            <para type="description">
            Total amount of memory used for a custom machine type.
            This has to be used together with CustomCpu.
            The amount of memory is in MB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.CanIpForward">
            <summary>
            <para type="description">
            Enables instances to send and receive packets for IP addresses other than their own. Switch on if
            these instances will be used as an IP gateway or it will be set as the next-hop in a Route
            resource.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Description">
            <summary>
            <para type="description">
            Human readable description of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.BootDisk">
            <summary>
            <para type="description">
            The persistant disk to use as a boot disk. Use Get-GceDisk to get one of these.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.BootDiskImage">
            <summary>
            <para type="description">
            The the image used to create the boot disk. Use Get-GceImage to get one of these.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.ExtraDisk">
            <summary>
            <para type="description">
            An existing disk to attach in read only mode.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Disk">
            <summary>
            <para type="description">
            An AttachedDisk object specifying a disk to attach. Do not specify -BootDiskImage or
            -BootDiskSnapshot if this is a boot disk. You can build one using New-GceAttachedDiskConfig.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Metadata">
            <summary>
            <para type="description">
            The keys and values of the Metadata of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Network">
            <summary>
            <para type="description">
            The name of the network to use. If not specified, is default. This can be a Network object you get
            from Get-GceNetwork.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Region">
            <summary>
            <para type="description">
            The region in which the subnet of the instance will reside. Defaults to the region in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Subnetwork">
            <summary>
            <para type="description">
            The name of the subnetwork to use.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.NoExternalIp">
            <summary>
            <para type="description">
            If set, the instances will not have an external ip address.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Preemptible">
            <summary>
            <para type="description">
            If set, the instances will be preemptible. If set, AutomaticRestart will be false.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.AutomaticRestart">
            <summary>
            <para type="description">
            If set, the instances will not restart when shut down by Google Compute Engine.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.TerminateOnMaintenance">
            <summary>
            <para type="description">
            If set, the instances will terminate rather than migrate when the host undergoes maintenance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            The ServiceAccount used to specify access tokens.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Tag">
            <summary>
            <para type="description">
            A tag of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Label">
            <summary>
            <para type="description">
            The map of labels (key/value pairs) to be applied to the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceInstanceConfigCmdlet.Address">
            <summary>
            <para type="description">
            The static ip address this instance will have. Can be a string, or and Address object from
            Get-GceAddress.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet">
            <summary>
            This abstract class describes all of the information needed to create an instance template description.
            It is extended by AddGceInstanceTemplateCmdlet, which sends an instance template description to the
            server, and by GceInstanceDescriptionCmdlet to provide a unifed set of parameters for instances and
            instance templates.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Name">
            <summary>
            The name of the instance or instance template.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.MachineType">
            <summary>
            The name of the machine type for the instances.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.CustomCpu">
            <summary>
            Number of vCPUs used for a custom machine type.
            This has to be used together with CustomMemory.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.CustomMemory">
            <summary>
            Total amount of memory used for a custom machine type.
            This has to be used together with CustomCpu.
            The amount of memory is in MB.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.CanIpForward">
            <summary>
            Enables instances to send and receive packets for IP addresses other than their own. Switch on if
            this instance will be used as an IP gateway or it will be set as the next-hop in a Route
            resource.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Description">
            <summary>
            Human readable description.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.BootDiskImage">
            <summary>
            The the image used to create the boot disk. Use Get-GceImage to get one of these.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.ExtraDisk">
            <summary>
            An existing disk to attach. It will be attached in read-only mode.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Disk">
            <summary>
            An AttachedDisk object specifying a disk to attach. Do not specify `-BootDiskImage` or
            `-BootDiskSnapshot` if this is a boot disk. You can build one using New-GceAttachedDiskConfig.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Metadata">
            <summary>
            <para type="description">
            The keys and values of the Metadata of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Network">
            <summary>
            The name of the network to use. If not specified, it is global/networks/default.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Region">
            <summary>
            The region of the subnetwork.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Subnetwork">
            <summary>
            (Optional) The name of the subnetwork to use.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.NoExternalIp">
            <summary>
            If set, the instance will not have an external ip address.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Preemptible">
            <summary>
            If set, the instance will be preemptible, and AutomaticRestart will be false.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.AutomaticRestart">
            <summary>
            If set, the instance will not restart when shut down by Google Compute Engine.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.TerminateOnMaintenance">
            <summary>
            If set, the instance will terminate rather than migrate when the host undergoes maintenance.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.ServiceAccount">
            <summary>
            The ServiceAccount used to specify access tokens. Use New-GceServiceAccountConfig to build one.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Tag">
            <summary>
            A tag of this instance.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.Label">
            <summary>
            <para type="description">
            The map of labels (key/value pairs) to be applied to the instance.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.BuildNetworkInterfaces">
            <summary>
            Builds a network interface given the Network and NoExternalIp parameters.
            </summary>
            <returns>
            The NetworkInsterface object to use in the instance template description.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.BuildAttachedDisks">
            <summary>
            Creates a list of AttachedDisk objects form Disk, BootDiskImage, and ExtraDis.
            </summary>
            <returns>
            A list of AttachedDisk objects to be used in the instance template description.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.BuildMachineType">
            <summary>
            Creates a machine type string. Most of the logic is for the
            custom machine case where -CustomMemory or -CustomCpu is used.
            If nothing is supplied, use "n1-standard-1" as default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceTemplateDescriptionCmdlet.BuildInstanceTemplate">
            <summary>
            Builds an InstanceTemplate from parameter values.
            </summary>
            <returns>
            An InstanceTemplate to be sent to Google Compute Engine as part of a insert instance template
            request.
            </returns>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GceInstanceDescriptionCmdlet">
            <summary>
            Base cmdlet class indicating what parameters are needed to describe an instance. Used by
            NewGceInstanceConfigCmdlet and AdGceInstanceCmdlet to provide a unified way to build an instance
            description.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceInstanceDescriptionCmdlet.BootDisk">
            <summary>
            The persistant disk to use as a boot disk. Use Get-GceDisk to get one of these.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceInstanceDescriptionCmdlet.Address">
            <summary>
            <para type="description">
            The static ip address this instance will have.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceInstanceDescriptionCmdlet.BuildAttachedDisks">
            <summary>
            Extend the parent BuildAttachedDisks by optionally appending a disk from the BootDisk attribute.
            </summary>
            <returns>
            A list of AttachedDisk objects to be used in the instance description.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceInstanceDescriptionCmdlet.BuildNetworkInterfaces">
            <summary>
            Extends the parent BuildnetworkInterfaces by adding the static address to the network interface.
            </summary>
            <returns>
            The NetworkInsterface object to use in the instance description.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GceInstanceDescriptionCmdlet.BuildInstance">
            <summary>
            Builds the instance description based on the cmdlet parameters.
            </summary>
            <returns>
            An Instance object to be sent to Google Compute Engine as part of an insert instance request.
            </returns>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceInstanceTemplateCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Compute Engine instance templates.
            </para>
            <para type="description"> 
            Gets Google Compute Engine instance templates.
            </para>
            <example>
              <code>PS C:\> Get-GceInstanceTemplate</code>
              <para>Lists all instance templates in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceInstanceTemplate "my-template"</code>
              <para>Gets the instance template naemd "my-template" in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceTemplates#resource)">
            [Instance Template resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceTemplateCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the template.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceTemplateCmdlet.Name">
            <summary>
            <para type="description">
            The name of the tempate to get.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceInstanceTemplateCmdlet.Object">
            <summary>
            <para type="description">
            A template object. It must have valid SelfLink and Name attributes.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GetGceInstanceTemplateCmdlet.GetTemplateByObject">
            <summary>
            Pulls information from an InstanceTemplate object to get a new version
            </summary>
            <returns>
            The version of the object on the Google Cloud service.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GetGceInstanceTemplateCmdlet.GetTemplateByName">
            <summary>
            Gets an InstanceTemplate by project and name.
            </summary>
            <returns>
            A single InstanceTemplate.
            </returns>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GetGceInstanceTemplateCmdlet.GetProjectTemplates">
            <summary>
            Gets a list of InstanceTemplates for a project.
            </summary>
            <returns>
            The InstanceTemplates of a project.
            </returns>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet">
            <summary>
            <para type="synopsis">
            Adds an instance template to Google Compute Engine.
            </para>
            <para type="description"> 
            Adds an instance template to Google Compute Engine. These templates can be used to create managed
            instance groups.
            </para>
            <example>
              <code>
              PS C:\> $image = Get-GceImage -Family "window-2012-r2"
              PS C:\> Add-GceInstanceTemplate "my-template" -BootDiskImage $image
              </code>
              <para>Creates a new windows 2012 instance template with default settings.</para>
            </example>
            <example>
              <code>
              PS C:\> $image = Get-GceImage -Family "window-2012-r2"
              PS C:\> Add-GceInstanceTemplate "my-template" -BootDiskImage $image -Subnetwork "my-subnet"
              </code>
              <para>
              Creates a new windows 2012 instance template with default settings and uses subnetwork "my-subnet".
              </para>
            </example>
            <example>
              <code>
              PS C:\> $image = Get-GceImage -Family "window-2012-r2"
              PS C:\> $serviceAccount = New-GceServiceAccountConfig default -BigQuery
              PS C:\> Add-GceInstanceTemplate $name "n1-standard-4" -BootDiskImage $image `
                        -ServiceAccount $serviceAccount
              </code>
              <para>Creates a new instance template for a 4 core machine that has access to BigQuery.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceTemplates#resource)">
            [Instance Template resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Project">
            <summary>
            <para type="description">
            The project that will own the instance template.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Object">
            <summary>
            <para type="description">
            An instance template object to add to Google Compute Engine.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Name">
            <summary>
            <para type="description">
            The name of the new instance template.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.MachineType">
            <summary>
            <para type="description">
            The name of the machine type for this template. Defaults to n1-standard-1.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.CustomCpu">
            <summary>
            <para type="description">
            Number of vCPUs used for a custom machine type.
            This has to be used together with CustomMemory.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.CustomMemory">
            <summary>
            <para type="description">
            Total amount of memory used for a custom machine type.
            This has to be used together with CustomCpu.
            The amount of memory is in MB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.CanIpForward">
            <summary>
            <para type="description">
            Enables instances to send and receive packets for IP addresses other than their own. Switch on if
            these instances will be used as an IP gateway or it will be set as the next-hop in a Route
            resource.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Description">
            <summary>
            <para type="description">
            Human readable description of this instance template.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.BootDiskImage">
            <summary>
            <para type="description">
            The the image used to create the boot disk. Use Get-GceImage to get one of these.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.ExtraDisk">
            <summary>
            <para type="description">
            An existing disk to attach. All instances of this template will be able to
            read this disk. Will attach in read only mode.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Disk">
            <summary>
            <para type="description">
            An AttachedDisk object specifying a disk to attach. Do not specify `-BootDiskImage` or
            `-BootDiskSnapshot` if this is a boot disk. You can build one using New-GceAttachedDiskConfig.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Metadata">
            <summary>
            <para type="description">
            The keys and values of the Metadata of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Network">
            <summary>
            <para type="description">
            The name of the network to use. If not specified, it is global/networks/default. This can be a
            string, or Network object you get from Get-GceNetwork.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Region">
            <summary>
            <para type="description">
            The region in which the subnet of the instance will reside. Defaults to the region in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Subnetwork">
            <summary>
            <para type="description">
            The name of the subnetwork to use.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.NoExternalIp">
            <summary>
            <para type="description">
            If set, the instances will not have an external ip address.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Preemptible">
            <summary>
            <para type="description">
            If set, the instances will be preemptible, and AutomaticRestart will be false.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.AutomaticRestart">
            <summary>
            <para type="description">
            If set, the instances will not restart when shut down by Google Compute Engine.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.TerminateOnMaintenance">
            <summary>
            <para type="description">
            If set, the instances will terminate rather than migrate when the host undergoes maintenance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            The ServiceAccount used to specify access tokens. Use New-GceServiceAccountConfig to build one.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Tag">
            <summary>
            <para type="description">
            A tag of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.AddGceInstanceTemplateCmdlet.Label">
            <summary>
            <para type="description">
            The map of labels (key/value pairs) to be applied to the instance.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.RemoveGceInstanceTemplateCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a Google Compute Engine instance templates.
            </para>
            <para type="description"> 
            Deletes a Google Compute Engine instance templates. Templates referenced by managed instance groups can
            not be deleted.
            </para>
            <example>
              <code>PS C:\> Remove-GceInstanceTemplate "my-template"</code>
              <para>Removes the instance template named "my-template" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceInstanceTemplate | Remove-GceInstanceTemplate</code>
              <para>Removes all instance templates in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceTemplates#resource)">
            [Instance Template resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceInstanceTemplateCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the template.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceInstanceTemplateCmdlet.Name">
            <summary>
            <para type="description">
            The name of the template to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.RemoveGceInstanceTemplateCmdlet.Object">
            <summary>
            <para type="description">
            The instance tempate object to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet">
            <summary>
            <para type="synopsis">
            Gets the current metadata from the metadata server.
            </para>
            <para type="description">
            Gets the current metadata from the metadata server. Get-GceMetadata can only be called from a Google
            Compute Engine VM instance. Calls from any other machine will fail.
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/storing-retrieving-metadata)">
            [Metadata Documentation]
            </para>
            <example>
              <code>PS C:\> $allMetadata = Get-GceMetadata -Recurse | ConvertFrom-Json</code>
              <para>
              Gets all of the metadata and converts it from the given JSON to a
              PSCustomObject.
              </para>
            </example>
            <example>
              <code>PS C:\> $hostName = Get-GceMetadata -Path "instance/hostname"</code>
              <para>Gets the hostname of the instance.</para>
            </example>
            <example>
              <code>PS C:\> $customProjectMetadata = Get-GceMetadata -Path "project/attributes/customKey"</code>
              <para>Gets the value of the custom metadata with key "customKey" placed in the project .</para>
            </example>
            <example>
              <code>PS C:\> $metadata, $etag = Get-GceMetadata -AppendETag -Recurse</code>
              <para>Gets the entire metadata tree, and the ETag of the version retrieved.</para>
            </example>
            <example>
              <code>
              PS C:\> $newTags, $newEtag = Get-GceMetadata -Path "instance/tags" -AppendETag -WaitUpdate `
                                                -LastETag $oldETag
              </code>
              <para>Waits for the metadata "instance/tags" to be updated by the server.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/storing-retrieving-metadata)">
            [Metadata server documentation]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.Path">
            <summary>
            <para type="description">
            The path to the specific metadata you wish to get e.g. "instance/tags", "instance/attributes",
            "project/attributes/sshKeys".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.Recurse">
            <summary>
            <para type="description">
            If set, will get the metadata subtree as a JSON string. If -Path is not set, will get the entire
            metadata tree as a JSON string.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.AppendETag">
            <summary>
            <para type="description">
            When set, the value of the respone ETag will be appended to the output pipeline after the content.
            </para>
            <para type="description">
            "$metadata, $etag = Get-GceMetadata -AppendETag -Recurse" gets the entire metadata tree, and the
            ETag of the version retrieved.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.WaitUpdate">
            <summary>
            <para type="description">
            If true, the query will wait for the metadata to update.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.LastETag">
            <summary>
            <para type="description">
            The last ETag known. Used in conjunction with -WaitUpdate. If the last ETag does not match the
            current ETag of the metadata server, it will return the updated value immediatly.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.Timeout">
            <summary>
            <para type="description">
            Used in conjunction with -WaitUpdate. The amout of time to wait. If the timeout expires, the 
            current metadata will be returned.
            </para>
            <para type="description">
            Check the ETag using AppendEtag to see if the data was updated within the timeout period.
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.Client">
            <summary>
            Make this a field, so it can be aborted if cmdlet stops e.g. the user hits Ctrl-C.
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.GetGceMetadataCmdlet.MetadataFlavorHeader">
            <summary>
            Name of the header for Metadata-Flavor.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new ServiceAccount object.
            </para>
            <para type="description">
            Creates a new ServiceAccount object. These objects are used by New-GceInstanceConfig and 
            Add-GceInstanceTemplate cmdlets to link to service accounts and define scopes. These scopes in turn let
            your instances access Google Cloud Platform resources.
            If no service account email is specified, the cmdlet will use the default service account email.
            </para>
            <example>
              <code>
              PS C:\> New-GceServiceAccountConfig serviceaccount@gserviceaccount.com -BigQuery -BigtableData Read
              </code>
              <para>
              Creates a scope on the serviceaccount@gserviceaccount.com service account that can make BigQuery queries
              and read bigtable data.
              </para>
            </example>
            <example>
              <code>PS C:\> New-GceServiceAccountConfig -BigQuery -BigtableData Read</code>
              <para>
              Creates a scope on the default service account that can make BigQuery queries and read bigtable data.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instances#resource)">
            [Instance resource definition]
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/access/service-accounts#compute_engine_default_service_account)">
            [Default Service Account email]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.BigTableAdminEnum">
            <summary>
            Enum used by BigtableAdmin parameter.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.ReadWrite">
            <summary>
            Various possible Read and Write scopes. Not values are legal for all parameters.
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.Project">
            <summary>
            <para type="description">
            The cmdlet will use the default service account from this project if no email is given.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.Email">
            <summary>
            <para type="description">
            The email of the service account to link to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.ScopeUri">
            <summary>
            <para type="description">
            A uri of a scope to add to this service account. When added from the pipeline, all pipeline scopes
            will be added to a single ServiceAccount.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.BigQuery">
            <summary>
            <para type="description">
            If set, adds the BigQuery scope.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.BigtableAdmin">
            <summary>
            <para type="description">
            The type of Bigtable Admin scope. Defaults to None. Also accepts Tables and Full
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.BigtableData">
            <summary>
            <para type="description">
            The type of Bigtable Data scope. Defaults to None. Also accepts Read and ReadWrite.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.CloudDatastore">
            <summary>
            <para type="description">
            If set, adds the Cloud Datastore scope.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.CloudLogging">
            <summary>
            <para type="description">
            The type of Cloud Logging API scope to add. Defaults to Write. Also accepts None, Read and Full.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.CloudMonitoring">
            <summary>
            <para type="description">
            The type of Cloud Monitoring scope to add. Defaults to Write. Also accepts None, Read and Full.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.CloudPubSub">
            <summary>
            <para type="description">
            If set, adds the Cloud Pub/Sub scope.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.CloudSQL">
            <summary>
            <para type="description">
            If set, adds the Cloud SQL scope.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.Compute">
            <summary>
            <para type="description">
            The value of the Compute scope to add. Defaults to None. Also accepts Read and ReadWrite.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.ServiceControl">
            <summary>
            <para type="description">
            If true, adds the Service Control scope. Defaults to true.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.ServiceManagement">
            <summary>
            <para type="description">
            If true, adds the Service Management scope. Defaults to true.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.Storage">
            <summary>
            <para type="description">
            The type of Storage scope to add. Defaults to Read. Also accepts None, Write, ReadWrite and Full.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.TaskQueue">
            <summary>
            <para type="description">
            If set, adds the Task queue scope.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.UserInfo">
            <summary>
            <para type="description">
            If set, adds the User info scope.
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet._scopeUrisList">
            <summary>
            Used to collect scopes from the pipeline to be used in EndProcessing.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.EndProcessing">
            <summary>
            If there are collected scopes, create a new service account from them.
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.s_defaultParameterValues">
            <summary>
            Mapping of parameters to their default values.
            Because this cmdlet uses MyInvocation.BoundParameters to get the parameter values, we can't just
            set the respective porperties to their default values, as they would not be bound.
            </summary>
        </member>
        <member name="F:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.s_nameValueScopeMap">
            <summary>
            Maps parameter names to a sub dictionary. each sub dictionary maps parameter values to their scope
            strings.
            </summary>
            <example>
            If BigtableAdmin is a bound parameter, and is bound to the value BigTableAdminEnum.Tables, you can
            get the related sope with 
            <code>string scope = NamevalueScopeMap["BigtableAdmin"][BigTableAdminEnum.Tables]</code>
            </example>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.BuildFromFlags">
            <summary>
            Creates a ServiceAccount object from the email and uses the given flags to add scopes.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.NewGceServiceAccountConfigCmdlet.AddScope(System.Collections.Generic.List{System.String},System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the scope uri of the parameter, if it has one.
            </summary>
            <param name="scopes">List of scope uri strings to append to.</param>
            <param name="parameter">A KeyValuePair containing the name of the parameter as the key and the 
            value of the parameter as the value</param>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceTargetPoolCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Compute Engine target pools.
            </para>
            <para type="description">
            This command lists target pools of a project, or gets a specific one.
            </para>
            <example>
              <code>PS C:\> Get-GceTargetPool</code>
              <para>This command lists all target pools for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceTargetPool -Region us-central1</code>
              <para>This command lists all target pools in region "us-central1" for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceTargetPool "my-target-pool"</code>
              <para>This command gets the target pool named "my-target-pool" in the default project and zone</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/targetPools#resource)">
            [Target Pool resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceTargetPoolCmdlet.Project">
            <summary>
            <para type="description">
            The project the target pools belong to. Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceTargetPoolCmdlet.Region">
            <summary>
            <para type="description">
            The region of the forwaring rule to get. Defaults to the region in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceTargetPoolCmdlet.Name">
            <summary>
            <para type="description">
            The name of the target pool to get.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.SetGceTargetPoolCmdlet">
            <summary>
            <para type="synopsis">
            Sets data about Google Compute Engine target pools.
            </para>
            <para type="description">
            Set-GceTargetPool adds and removes instance to and from target pools
            </para>
            <example>
              <code>
              PS C:\> $instance = Get-GceInstance "my-instance"
              PS C:\> Get-GceTargetPool "my-pool" | Set-GceTargetPool -AddInstance $instance
              </code>
              <para>This command adds instance "my-instance" to the target pool "my-pool"</para>
            </example>
            <example>
              <code>
              PS C:\> Set-GceTargetPool "my-pool" -RemoveInstance $instanceUrl
              </code>
              <para>This command removes the instance pointed to by $instanceUrl from target pool "my-pool".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/targetPools#resource)">
            [Target Pool resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceTargetPoolCmdlet.Project">
            <summary>
            <para type="description">
            The project the target pool belongs to. Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceTargetPoolCmdlet.Region">
            <summary>
            <para type="description">
            The region of the target pool. Defaults to the region in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceTargetPoolCmdlet.Name">
            <summary>
            <para type="description">
            The name of the target pool to change.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceTargetPoolCmdlet.InputObject">
            <summary>
            <para type="description">
            The target pool object to change.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceTargetPoolCmdlet.AddInstance">
            <summary>
            <para type="description">
            A list of instance to add to the target pool. Can take either string urls or
            Google.Apis.Compute.v1.Data.Instance objects.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.SetGceTargetPoolCmdlet.RemoveInstance">
            <summary>
            <para type="description">
            A list of instance to remove from the target pool. Can take either string urls or
            Google.Apis.Compute.v1.Data.Instance objects.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GetGceTargetProxyCmdlet">
            <para type="synopsis">
            Gets Google Compute Engine target proxies.
            </para>
            <para type="description">
            Lists target proxies of a project, or gets a specific one.
            </para>
            <example>
              <code>PS C:\> Get-GceTargetProxy</code>
              <para>This command lists all target proxies for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceTargetProxy -Region us-central1</code>
              <para>This command lists all target proxies in region "us-central1" for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceTargetProxy "my-target-proxy"</code>
              <para>This command gets the target proxy named "my-target-proxy" in the default project and zone</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/targetHttpProxies#resource)">
            [Target Proxy resource definition]
            </para>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceTargetProxyCmdlet.Project">
            <summary>
            <para type="description">
            The project the target proxies belong to. Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceTargetProxyCmdlet.Name">
            <summary>
            <para type="description">
            The name of the target proxy to get.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceTargetProxyCmdlet.Http">
            <summary>
            <para type="description">
            If set, will get target http proxies. If neither this nor Https is set, will get both http and
            https proxies.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GetGceTargetProxyCmdlet.Https">
            <summary>
            <para type="description">
            If set, will get target https proxies. If neither this nor Https is set, will get both http and
            https proxies.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GceGceUrlMapCmdlet">
            <para type="synopsis">
            Gets Google Compute Engine url maps.
            </para>
            <para type="description">
            Lists url maps of a project, or gets a specific one.
            </para>
            <example>
              <code>PS C:\> Get-GceUrlMap</code>
              <para>This command lists all url maps for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceUrlMap "my-url-map"</code>
              <para>This command gets the url map named "my-url-map"</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/urlMaps#resource)">
            [Url Map resource definition]
            </para>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceGceUrlMapCmdlet.Project">
            <summary>
            <para type="description">
            The project the url maps belong to. Defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.GceGceUrlMapCmdlet.Name">
            <summary>
            <para type="description">
            The name of the url map to get.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.GoogleComputeOperationException">
            <summary>
            Container exception for Operation.ErrorData.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.GoogleComputeOperationException.GetErrorMessage(Google.Apis.Compute.v1.Data.Operation.ErrorData)">
            <summary>
            Gets the first error message, or "Unknown error" if there is none.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.NewFirewallProtocolCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new object that tells a firewall to allow a protocol.
            </para>
            <para type="description">
            Creates a new AllowedData object which can be passed through the pipeline too the Allowed parameter of
            the Add-GceFirewall cmdlet.
            </para>
            <example>
            <code>
            New-GceFirewallProtocol tcp -Port 80, 443 |
                New-GceFirewallProtocol esp |
                Add-GceFirewall -Project "your-project" -Name "firewall-name"
            </code>
            <para>Creates two GceFirewallProtocol objects, and sends them to the Add-GceFirewall cmdlet.</para>
            </example>
            <example>
            <code>
            New-GceFirewallProtocol tcp -Port 80..443 |
                Add-GceFirewall -Project "your-project" -Name "firewall-name"
            </code>
            <para>
            Creates a GceFirewallProtocol object with port range 80 to 443, and sends them to
            the Add-GceFirewall cmdlet.
            </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/firewalls#resource)">
            [Firewall resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewFirewallProtocolCmdlet.IPProtocol">
            <summary>
            <para type="description">
            The IP protocol that is allowed for this rule. This value can either be one of the following
            well known protocol strings (tcp, udp, icmp, esp, ah, sctp), or the IP protocol number.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewFirewallProtocolCmdlet.Port">
            <summary>
            <para type="description">
            The ports which are allowed. This parameter is only applicable for UDP or TCP protocol.
            Each entry must be either an integer or a range. If not specified, connections through any port are
            allowed. Example inputs include: "22", "80","443", "12345-12349" and "80..443".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.ComputeEngine.NewFirewallProtocolCmdlet.Pipeline">
            <summary>
            <para type="description">
            The Pipeline to append the new AllowedData to.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.NewFirewallProtocolCmdlet.EndProcessing">
            <summary>
            Actually create the new object and append it to either the pipeline or the given IList.
            </summary>
        </member>
        <member name="M:Google.PowerShell.ComputeEngine.NewFirewallProtocolCmdlet.ProcessRecord">
            <summary>
            If appending to a pipeline, pass pipeline objects along.
            </summary>
        </member>
        <member name="T:Google.PowerShell.ComputeEngine.InstanceMetadataPSConverter">
            <summary>
            Library class for transforming IDictionary objects into Compute Engine Metadata objects.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.GetGceMachineTypeCmdlet">
            <summary>
            <para type="synopsis">
            Get Google Compute Engine machine types.
            </para>
            <para type="description">
            Gets all machine types of a project, or all machine types of a project in a zone, or a single machine
            type of a project in a zone with a name.
            </para>
            <example>
              <code>PS C:\> Get-GceMachineType</code>
              <para>Lists all machine types for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceMachineType -Zone "us-central1-a"</code>
              <para>Lists all machine types in zone us-central1-a for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceMachineType "f1-micro"</code>
              <para>Gets the machine type named f1-micro in the default project and zone.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/machineTypes#resource)">
            [Machine Type resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceMachineTypeCmdlet.Project">
            <summary>
            <para type="description">
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceMachineTypeCmdlet.Zone">
            <summary>
            <para type="description">
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceMachineTypeCmdlet.Name">
            <summary>
            <para type="description">
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Compute Engine instance group managers.
            </para>
            <para type="description"> 
            Gets Google Compute Engine instance group managers.
            </para>
            <example>
              <code>PS C:\> Get-GceManagedInstanceGroup</code>
              <para>Lists all managed instance groups for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceManagedInstanceGroup -Zone "us-central1-a"</code>
              <para>Lists all managed instance groups for the default project in the given zone.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceManagedInstanceGroup "my-instance-group" -InstanceStatus</code>
              <para>
              Lists the status of all members of the instance group named "my-instance-group" in the default
              project and zone.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers#resource)">
            [Managed Instance Group resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.Zone">
            <summary>
            <para type="description">
            The zone the instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.Region">
            <summary>
            <para type="description">
            The zone the instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance group to get.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.Uri">
            <summary>
            <para type="description">
            The full uri of the managed instance group
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.Object">
            <summary>
            <para type="description">
            The InstanceGroupManager object to get.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.InstanceStatus">
            <summary>
            <para type="description">
            If set, will return ManagedInstance objects describing the state of the instances of this group,
            including whether they exist yet or not.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.GetInstances(System.Collections.Generic.IEnumerable{Google.Apis.Compute.v1.Data.InstanceGroupManager})">
            <summary>
            Gets the status objects for the managed instances.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Compute.GetManagedInstanceGroupCmdlet.GetGroupByName">
            <summary>
            If -Region and -Zone are specified together, returns an error.
            If -Region is specified, finds a regional managed instance group
            with name Name.
            If -Zone is specified, finds a zonal managed instance group with
            name Name.
            If neither -Region or -Zone is specified, tries to find a zonal
            managed instance group with name Name in the default zone.
            If that fails, tries to find a regional managed instance group
            with name Name in the default region.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new Google Compute Engine instance group manager.
            </para>
            <para type="description"> 
            Creates a new Google Compute Engine instance group manager.
            </para>
            <example>
              <code>
              PS C:\> $template = Get-GceInstanceTemplate "my-template"
              PS C:\> Add-GceManagedInstanceGroup "my-instance-group" $template 4
              </code>
              <para>
              Creates a new managed instance group named "my-instance-group". The instance of the group will
              be created from template "my-template" and the group will create four instances.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers#resource)">
            [Managed Instance Group resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.Project">
            <summary>
            <para type="description">
            The project that will own the instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.Zone">
            <summary>
            <para type="description">
            The zone where the instance gorup will live.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.Region">
            <summary>
            <para type="description">
            The region where the instance gorup will live.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.Name">
            <summary>
            <para type="description">
            The name of the instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.InstanceTemplate">
            <summary>
            <para type="description">
            The instance template to use when creating instances. Can be a string URL to a template, or an
            InstanceTemplate object from Get-GceInstanceTemplate.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.TargetSize">
            <summary>
            <para type="description">
            The target number of instances for this instance group to have.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.BaseInstanceName">
            <summary>
            <para type="description">
            The base instance name for this group. Instances will take this name and append a hypen and a
            random four character string. Defaults to the group name.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.Description">
            <summary>
            <para type="description">
            The human readable description of this instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.TargetPool">
            <summary>
            <para type="description">
            The URLs for all TargetPool resources to which instances in the instanceGroup field are added.
            The target pools automatically apply to all of the instances in the managed instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.PortName">
            <summary>
            <para type="description">
            The name you want to give to a port. Must have the same number of elements as PortNumber.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.PortNumber">
            <summary>
            <para type="description">
            The number of the port you want to give a name. Must have the same number of elements as PortName.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.NamedPort">
            <summary>
            <para type="description">
            A NamedPort object you want to include in the list of named ports.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.Object">
            <summary>
            <para type="description">
            An InstanceGroupManager object used to create a new managed instance group.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Compute.AddManagedInstanceGroupCmdlet.ProcessPipedObjectArguments">
            <summary>
            Processes the arguments when the cmdlet receives a piped ManagedInstanceGroup.
            This function will return true if we need to create a zone instance
            and return false if we need to create a region.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.RemoveManagedInstanceGroupCmdlet">
            <summary>
            <para type="synopsis">
            Removes a Google Compute Engine instance group manager.
            </para>
            <para type="description"> 
            Removes a Google Compute Engine instance group manager.
            </para>
            <example>
              <code>PS C:\> Remove-GceManagedInstanceGroup "my-instance-group"</code>
              <para>Removes the instance group named "my-instance-group" in the default project and zone.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceManagedInstanceGroup -Zone "us-central1-a" | Remove-GceManagedInstanceGroup</code>
              <para>Removes all managed instance groups of the default project in zone "us-central1-a".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers#resource)">
            [Managed Instance Group resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveManagedInstanceGroupCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the managed instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveManagedInstanceGroupCmdlet.Zone">
            <summary>
            <para type="description">
            The zone the managed instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveManagedInstanceGroupCmdlet.Region">
            <summary>
            <para type="description">
            The region the regional managed instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveManagedInstanceGroupCmdlet.Name">
            <summary>
            <para type="description">
            The name of the managed instance group to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveManagedInstanceGroupCmdlet.Object">
            <summary>
            <para type="description">
            The managed instance group object to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt">
            <summary>
            <para type="synopsis">
            Changes the data of a Google Compute Engine instance group manager.
            </para>
            <para type="description"> 
            Changes the data of a Google Compute Engine instance group manager. As a whole, the group can be
            resized, have its template set, or have its target pools set. Member instances can be abandoned,
            deleted, or recreated.
            </para>
            <example>
              <code>PS C:\> Get-GceInstance "my-instance-1" | Set-ManagedInstanceGroup "my-group" -Abandon</code>
              <para>
              Abandons the instance named "my-instance-1". The instance will still exist, but will no longer 
              be a member of the instance group "my-group". The size of the instance group will decrease to match.
              </para>
            </example>
            <example>
              <code>
              PS C:\> $instanceUri = (Get-GceInstance "my-instance-2").SelfLink
              PS C:\> Set-ManagedInstanceGroup "my-group" -Delete -InstanceUri $instanceUri
              </code>
              <para>
              Deletes the instance "my-instance-2". The size of the instance group will decrease to match.
              </para>
            </example>
            <example>
              <code>PS C:\> Set-GceManagedInstanceGroup "my-group" -Size 5</code>
              <para>Changes the target size of managed instance group "my-group" to be 5.</para>
            </example>
            <example>
              <code>
              PS C:\> $template = Get-GceInstanceTemplate "new-template"
              PS C:\> Set-GceManagedInstanceGroup "my-group" -Template $template
              </code>
              <para>
              The tempalte "new-template" becomes the template for all new instances created by managed
              instance group "my-group"
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers#resource)">
            [Managed Instance Group resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Project">
            <summary>
            <para type="description">
            The project that owns the managed instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Zone">
            <summary>
            <para type="description">
            The zone the managed instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Region">
            <summary>
            <para type="description">
            The region the managed instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Name">
            <summary>
            <para type="description">
            The name of the managed instance group to change.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Abandon">
            <summary>
            <para type="description">
            If set, will abandon the instance specified by InstanceUri or InstanceObject.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Delete">
            <summary>
            <para type="description">
            If set, will delete the instance specified by InstanceUri or InstanceObject.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Recreate">
            <summary>
            <para type="description">
            If set, will recreate the instance specified by InstanceUri or InstanceObject.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.InstanceUri">
            <summary>
            <para type="description">
            The uri of the instance to Abandon, Delete or Recreate.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.InstanceObject">
            <summary>
            <para type="description">
            The Instance object to Abandon, Delete or Recreate.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Size">
            <summary>
            <para type="description">
            The new target size of the instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.Template">
            <summary>
            <para type="description">
            Uri to the new template of the instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.SetGceManagedInstanceGroupCmdelt.TargetPoolUri">
            <summary>
            <para type="description">
            The uris of the new set of target pools.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.WaitGceManagedInstanceGroupCmdlet">
            <summary>
            <para type="synopsis">
            Waits for a Google Compute Engine managed instance group to be stable.
            </para>
            <para type="description"> 
            Waits for all of the instances of a managed instance group to reach normal running state.
            </para>
            <example>
              <code>PS C:\> Wait-GceManagedInstanceGroup "my-group" -Timeout 30</code>
              <para>
              Waits for the managed instance group "my-group" to reach a noraml running state for up to 30
              seconds.
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GceManagedInstanceGroup -Zone "us-central1-a" | Wait-GceManagedInstanceGroup</code>
              <para>
              Waits for all maanged instance groups in zone us-central1-a to reach a normal running
              state.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers#resource)">
            [Managed Instance Group resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.WaitGceManagedInstanceGroupCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the managed instance group.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.WaitGceManagedInstanceGroupCmdlet.Zone">
            <summary>
            <para type="description">
            The zone the managed instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.WaitGceManagedInstanceGroupCmdlet.Region">
            <summary>
            <para type="description">
            The region the managed instance group is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.WaitGceManagedInstanceGroupCmdlet.Name">
            <summary>
            <para type="description">
            The name of the managed instance group to wait on.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.WaitGceManagedInstanceGroupCmdlet.Object">
            <summary>
            <para type="description">
            The mananged instance group object to wait on.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.WaitGceManagedInstanceGroupCmdlet.Timeout">
            <summary>
            <para type="description">
            The maximum number of seconds to wait for each managed instance group. -1, the default, waits until
            all instances have no current action, no matter how long it takes. If the timeout expires, the wait
            will end with a warning.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.NewGceNetworkCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new Google Compute Engine network.
            </para>
            <para type="description">
            Creates a new Google Compute Engine network. The cmdlet will create the network
            in the default project if -Project is not used. By default, the network is
            created in without any subnets. To create a network with subnets automatically
            created, use -AutoSubnet switch. To create a network in legacy mode,
            which has a range and cannot have subnets, use the -IPv4Range parameter. Please
            note that using legacy network is not recommended as many newer Google Cloud Platform
            features are not supported on legacy networks and legacy networks may not be
            supported in the future.
            </para>
            <example>
              <code>PS C:\> New-GceNetwork -Name "my-network"</code>
              <para>Creates network "my-network" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> New-GceNetwork -Name "my-network" -Project "my-project" -AutoSubnet</code>
              <para>
              Creates a network "my-network" with auto subnet created in the project "my-project".
              </para>
            </example>
            <example>
              <code>PS C:\> New-GceNetwork -Name "my-network" -IPv4Range 192.168.0.0/16</code>
              <para>Creates a network "my-network" IPv4 range of 192.168.0.0/16.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/vpc/)">
            [Networks]
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/vpc/legacy)">
            [Legacy Networks]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.NewGceNetworkCmdlet.Project">
            <summary>
            <para type = "description">
            The project to create the network in. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.NewGceNetworkCmdlet.Name">
            <summary>
            <para type = "description">
            The name of the network to be created.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.NewGceNetworkCmdlet.Description">
            <summary>
            <para type = "description">
            The description of the network to be created.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.NewGceNetworkCmdlet.IPv4Range">
            <summary>
            <para type = "description">
            The IPv4 range of the network. Please note that using this parameter
            will create a legacy network that has range and cannot have subnets.
            This is not recommended as many Google Cloud features are not available
            on legacy networks.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.NewGceNetworkCmdlet.AutoSubnet">
            <summary>
            <para type = "description">
            If set to true, the network created will its subnets created automatically.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.GetGceNetworkCmdlet">
            <summary>
            <para type="synopsis">
            Get data about the networks a project has.
            </para>
            <para type="description">
            Get data about the networks a project has. This includes its name, id, and subnetworks.
            </para>
            <example>
              <code>PS C:\> Get-GceNetwork</code>
              <para>Lists all networks in set up for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceNetwork "default"</code>
              <para>Gets the default network for the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/networks#resource)">
            [Network resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceNetworkCmdlet.Project">
            <summary>
            <para type = "description">
            The project to get the networks of. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceNetworkCmdlet.Name">
            <summary>
            <para type = "description">
            The names of the networks to get.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.RemoveGceNetwork">
            <summary>
            <para type="synopsis">
            Removes Google Compute Engine networks.
            </para>
            <para type="description">
            Removes one or more Google Compute Engine networks. Will raise errors if the networks do not exist.
            The cmdlet will delete the networks in the default project if -Project is not used.
            The cmdlet accept either the names of the networks or network objects. If network objects
            are used, network names and project names are extracted from the objects.
            </para>
            <example>
              <code>PS C:\> Remove-GceNetwork -Network "my-network"</code>
              <para>This command removes network "my-network" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GceNetwork -Network "my-network1", "my-network2" -Project "my-project"</code>
              <para>
              This command removes 2 networks ("my-network1" and "my-network2") in the project "my-project".
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GceNetwork "my-network1", "my-network2" | Remove-GceNetwork</code>
              <para>
              This command removes networks "my-network1" and "my-network2" in the default project by
              piping the network object to Remove-GceNetwork.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/vpc/)">
            [Networks]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceNetwork.Project">
            <summary>
            <para type="description">
            The project to remove the networks in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceNetwork.Name">
            <summary>
            <para type="description">
            The names of the networks to be removed.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceNetwork.InputObject">
            <summary>
            <para type="description">
            The network objects to be removed. Network's name and project
            will be extracted from the object.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Compute.RemoveGceNetwork.RemoveNetwork(System.String,System.String)">
            <summary>
            Helper function to remove network with name networkName in project project.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.AddGceRouteCmdlet">
            <summary>
            <para type="synopsis">
            Adds a new networking route.
            </para>
            <para type="description">
            Adds a new networking route.
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/routes#resource)">
            [Route resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.Project">
            <summary>
            <para type = "description">
            The project to add the route to. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.Object">
            <summary>
            <para type = "description">
            An object describing a route to add.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.Name">
            <summary>
            <para type = "description">
            The name of the route to add.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.DestinationIpRange">
            <summary>
            <para type = "description">
            The destination range of outgoing packets that this route applies to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.Network">
            <summary>
            <para type = "description">
            The network this route applies to. Can be either a URL, or a network object from Get-GceNetwork.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.Priority">
            <summary>
            <para type = "description">
            The priority of this route. Priority is used to break ties in cases where there
            is more than one matching route of equal prefix length. In the case of two routes
            with equal prefix length, the one with the lowest-numbered priority value wins.
            Default value is 1000. Valid range is 0 through 65535.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.Description">
            <summary>
            <para type = "description">
            Human readable description of this route.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.Tag">
            <summary>
            <para type = "description">
            Instance tag(s) this route applies to. May only contain lowercase letters, dashes and numbers.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.NextHopInstance">
            <summary>
            <para type = "description">
            The instance that should handle matching packets. Can be either a URL, or an instance from
            Get-GceInstance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.NextHopIp">
            <summary>
            <para type = "description">
            The IP Address of an instance that should handle matching packets.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.NextHopVpnTunnel">
            <summary>
            <para type = "description">
            The URL of a VPN Tunnel that should handle matching packets.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceRouteCmdlet.NextHopInternetGateway">
            <summary>
            <para type = "description">
            The URL to a gateway that should handle matching packets.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.GetGceRouteCmdlet">
            <summary>
            <para type="synopsis">
            Gets or lists networking routes.
            </para>
            <para type="description">
            Lists all the networking routes for a project, or gets a specific one by project and name.
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/routes#resource)">
            [Route resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceRouteCmdlet.Project">
            <summary>
            <para type = "description">
            The project of the route to get. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceRouteCmdlet.Name">
            <summary>
            <para type = "description">
            The name of the specific route to get.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.RemoveGceRouteCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a networking route.
            </para>
            <para type="description">
            Deletes a networking route.
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/routes#resource)">
            [Route resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceRouteCmdlet.Project">
            <summary>
            <para type = "description">
            The project of the route to delete. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceRouteCmdlet.Name">
            <summary>
            <para type = "description">
            The name of the route to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceRouteCmdlet.Object">
            <summary>
            <para type = "description">
            The route object that describes the route to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.AddGceSnapshotCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new disk snapshot.
            </para>
            <para type="description">
            Creates a new disk snapshot to backup the data of the disk.
            </para>
            <example>
              <code>PS C:\> Add-GceSnapshot "my-disk" -Name "my-snapshot" </code>
              <para>
              Creates a new disk snapshot from the disk named "my-disk" in the default project and zone.
              The name of the snapshot will be "my-snapshot".
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GceDisk "my-disk" | Add-GceSnapshot</code>
              <para>
              Creates a new disk snapshot from the disk named "my-disk". The name of the snapshot will start
              with "my-disk" and end with the utc date and time the snapshot was taken.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/snapshots#resource)">
            [Snapshot resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.Disk">
            <summary>
            <para type="description">
            The disk object to create the snapshot from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.Project">
            <summary>
            <para type="description">
            The project of the disk. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.Zone">
            <summary>
            <para type="description">
            The zone the disk is in. Defaults to the gloud config zone.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.Label">
            <summary>
            <para type="description">
            The map of labels (key/value pairs) to be applied to the snapshot.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.DiskName">
            <summary>
            <para type="description">
            The name of the disk to get a snapshot of.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.Name">
            <summary>
            <para type="description">
            The name of the snapshot. Defaults to &lt;DiskName&gt;-&lt;Timestamp&gt;
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.Description">
            <summary>
            <para type="description">
            Human readable description of the snapshot.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.AddGceSnapshotCmdlet.GuestFlush">
            <summary>
            <para type="description">
            If set, the snapshot created will be a Windows Volume Shadow Copy Service
            (VSS) snapshot. See:
            https://cloud.google.com/compute/docs/instances/windows/creating-windows-persistent-disk-snapshot?hl=en_US
            for more details.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.GetGceSnapshot">
            <summary>
            <para type="synopsis">
            Gets information about a Google Compute Engine disk snapshots.
            </para>
            <para type="description">
            Gets information about a Google Compute Engine disk snapshots.
            </para>
            <example>
              <code>PS C:\> Get-GceSnapshot</code>
              <para>Lists all snapshot in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceSnapshot "my-snapshot"</code>
              <para>Gets the snapshot in the default project named "my-snapshot".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/snapshots#resource)">
            [Snapshot resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceSnapshot.Project">
            <summary>
            <para type="description">
            The project that owns the snapshot. Defaults to the gcloud config project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.GetGceSnapshot.Name">
            <summary>
            <para type="description">
            The name of the snapshot to get.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Compute.RemoveGceSnapshotCmdlet">
            <summary>
            <para type="synopsis">
            Deletes Google Compute Engine disk snapshots.
            </para>
            <para type="description">
            Deletes Google Compute Engine disk snapshots.
            </para>
            <example>
              <code>PS C:\> Remove-GceSnapshot "my-snapshot"</code>
              <para>Deletes the snapshot named "my-snapshot" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GceSnapshot "my-snapshot" | Remove-GceSnapshot</code>
              <para>Deletes the snapshot named "my-snapshot" in the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/compute/docs/reference/latest/snapshots#resource)">
            [Snapshot resource definition]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceSnapshotCmdlet.Object">
            <summary>
            <para type="description">
            The object that describes the snapshot to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceSnapshotCmdlet.Project">
            <summary>
            <para type="description">
            The project that owns the snapshot to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Compute.RemoveGceSnapshotCmdlet.Name">
            <summary>
            <para type="description">
            The name of the snapshot to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.GkeCmdlet">
            <summary>
            Base class for Google Container Engine cmdlets.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Container.GkeCmdlet.s_imageTypesDictionary">
            <summary>
            Dictionary of image types with key as as tuple of project and zone
            and value as the image types available in the project's zone.
            This dictionary is used for caching the various image types available in a project's zone.
            TODO(quoct): Add timeout for these caches.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Container.GkeCmdlet.s_machineTypesDictionary">
            <summary>
            Dictionary of image types with key as as tuple of project and zone
            and value as the machine types available in the project's zone.
            This dictionary is used for caching the various machine types available in a project's zone.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Container.GkeCmdlet.s_validNodeVersions">
            <summary>
            Dictionary of valid node versions with key as as tuple of project and zone
            and value as the valid node versions in the project's zone.
            This dictionary is used for caching the valid cluster versions in a project's zone.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GkeCmdlet.WaitForClusterOperation(Google.Apis.Container.v1.Data.Operation,System.String,System.String,System.String,System.String)">
            <summary>
            Wait for the cluster creation operation to complete.
            Use write progress to display the progress (with activity and status string supplied).
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GkeCmdlet.GetValidNodeVersions(System.String,System.String)">
            <summary>
            Returns all the possible node versions in a given zone in a given project.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GkeCmdlet.GetImageTypes(System.String,System.String)">
            <summary>
            Returns all the possible image types in a given zone in a given project.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GkeCmdlet.GetMachineTypes(System.String,System.String)">
            <summary>
            Returns all the possible machine types in a given zone in a given project.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.ContainerOperationStatus">
            <summary>
            The status of the container operation.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.GetGkeClusterCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Container Clusters.
            </para>
            <para type="description">
            Gets Google Container Clusters. If -Project parameter is not specified, the default project will be used.
            If neither -Zone nor -ClusterName is used, the cmdlet will return every cluster in every zone in the project.
            If -Zone is used without -ClusterName, the cmdlet will return every cluster in the specified zone.
            If -ClusterName is used without -Zone, the cmdlet will return the specified clusters in the default zone
            (set in Cloud SDK Config). If -Clustername is used with -Zone, the cmdlet will return the specified
            clusters in the specified zone.
            </para>
            <example>
              <code>PS C:\> Get-GkeCluster</code>
              <para>Lists all container clusters in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GkeCluster -Zone "us-central1-a" -Project "my-project"</code>
              <para>Lists all container clusters in zone us-central1-a for the project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GkeCluster -ClusterName "my-cluster"</code>
              <para>Gets the cluster "my-cluster" in the default zone of the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GkeCluster -ClusterName "my-cluster", "my-cluster-2" -Zone "us-central1-a"</code>
              <para>
              Gets the clusters "my-cluster", "my-cluster-2" in the zone "us-central1-a" of the default project.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/clusters/)">
            [Container Clusters]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeClusterCmdlet.Project">
            <summary>
            <para type="description">
            The project that the container clusters belong to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeClusterCmdlet.Zone">
            <summary>
            <para type="description">
            The zone that the container clusters belong to.
            This parameter defaults to the zone in the Cloud SDK config if -ClusterName parameter is used.
            Otherwise, it defaults to all the zones.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeClusterCmdlet.ClusterName">
            <summary>
            <para type="description">
            The names of the clusters to search for.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GetGkeClusterCmdlet.GetClustersByName(System.String,System.String,System.String[])">
            <summary>
            Returns clusters that have the names in clusters array in zone 'zone' in project 'project'.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GetGkeClusterCmdlet.GetClustersByZone(System.String,System.String)">
            <summary>
            Returns all clusters in zone 'zone' in project 'project'.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.GkeNodeConfigCmdlet">
            <summary>
            Abstract class for cmdlets that deal with node configuration such as
            New-GkeNodeConfig and Add-GkeCluster.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.Project">
            <summary>
            <para type="description">
            The project that the node config belongs to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.Zone">
            <summary>
            <para type="description">
            The zone that the node config belongs to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.DiskSizeGb">
            <summary>
            <para type="description">
            Size of the disk attached to each node, specified in GB.
            The smallest allowed disk size is 10GB.
            The default disk size is 100GB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.InstanceMetadata">
            <summary>
            <para type="description">
            Metadata key/value pairs assigned to instances in the cluster.
            Keys must conform to the regexp [a-zA-Z0-9-_]+ and not conflict with any other
            metadata keys for the project or be one of the four reserved keys: "instance-template",
            "kube-env", "startup-script" and "user-data".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.Label">
            <summary>
            <para type="description">
            The map of Kubernetes labels (key/value pairs) to be applied to each node.
            This is in addition to any default label(s) that Kubernetes may apply to the node.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.LocalSsdCount">
            <summary>
            <para type="description">
            The number of local SSD disks attached to each node.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.Tags">
            <para type="description">
            The list of instance tags applied to each node.
            Tags are used to identify valid sources or targets for network firewalls.
            </para>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            The Google Cloud Platform Service Account to be used by the node VMs.
            Use New-GceServiceAccountConfig to create the service account and appropriate scopes.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.Preemptible">
            <summary>
            <para type="description">
            If set, every node created will be a preemptible VM instance.
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.Container.GkeNodeConfigCmdlet._dynamicParameters">
            <summary>
            This dynamic parameter dictionary is used by PowerShell to generate parameters dynamically.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GkeNodeConfigCmdlet.GetDynamicParameters">
            <summary>
            Generate dynamic parameter -MachineType and -ImageType based on the value of -Project
            and -Zone. This will provide tab-completion for -MachineType and -ImageType parameters.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GkeNodeConfigCmdlet.PopulateDynamicParameter(System.String,System.String,System.Management.Automation.RuntimeDefinedParameterDictionary)">
            <summary>
            Using project and zone, create dynamic parameters (project and zone are used to make API call
            to get valid set of values for the parameters) and populate the dynamic parameter dictionary.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.SelectedMachineType">
            <summary>
            Returns the machine type that the user selected.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodeConfigCmdlet.SelectedImageType">
            <summary>
            Returns the image type that the user selected.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.NewGkeNodeConfigCmdlet">
            <summary>
            <para type="synopsis">
            Creates a Google Container Engine Node Config.
            </para>
            <para type="description">
            Creates a Google Container Engine Node Config. The node config is used to configure various properties
            of a node in a container cluster so you can use the object returned by the cmdlet in Add-GkeCluster
            to create a container cluster. If -Project is not used, the cmdlet will use the default project.
            If -Zone is not used, the cmdlet will use the default zone. -Project and -Zone parameters are only
            used to provide tab-completion for the possible list of image and machine types applicable to the nodes.
            </para>
            <example>
              <code>PS C:\> New-GkeNodeConfig -ImageType CONTAINER_VM</code>
              <para>Creates a node config with image type CONTAINER_VM for each node.</para>
            </example>
            <example>
              <code>PS C:\> New-GkeNodeConfig -ImageType CONTAINER_VM -MachineType n1-standard-1</code>
              <para>
              Creates a node config with image type CONTAINER_VM for each node and machine type n1-standard-1
              for each Google Compute Engine used to create the cluster.</para>
            </example>
            <example>
              <code>PS C:\> New-GkeNodeConfig -DiskSizeGb 20 -SsdCount 2</code>
              <para>
              Creates a node config with 20 Gb disk size and 2 SSDs for each node.</para>
            </example>
            <example>
              <code>PS C:\> New-GkeNodeConfig -Metadata @{"key" = "value"} -Label @{"release" = "stable"}</code>
              <para>
              Creates a node config with metadata pair "key" = "value" and Kubernetes label "release" = "stable".
              </para>
            </example>
            <example>
              <code>
              PS C:\> $serviceAccount = New-GceServiceAccountConfig -BigTableAdmin Full `
                                                                    -CloudLogging None `
                                                                    -CloudMonitoring None `
                                                                    -ServiceControl $false `
                                                                    -ServiceManagement $false `
                                                                    -Storage None
              PS C:\> New-GkeNodeConfig -ServiceAccount $serviceAccount
              </code>
              <para>
              Creates a node config that uses the default service account with scopes "bigtable.admin".
              </para>
            </example>
            <example>
              <code>PS C:\> New-GkeNodeConfig -Preemptible</code>
              <para>
              Creates a node config where each node is created as preemptible VM instances.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/reference/rest/v1/NodeConfig)">
            [Node Configs]
            </para>
            <para type="link" uri="(https://kubernetes.io/docs/user-guide/labels/)">
            [Kubernetes Labels]
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/instances/preemptible)">
            [Preemptible VM instances]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.AddGkeClusterCmdlet">
            <summary>
            <para type="synopsis">
            Creates a Google Container Cluster.
            </para>
            <para type="description">
            Creates a Google Container Cluster. If -Project and/or -Zone are not used, the cmdlet will use
            the default project and/or default zone. There are 3 ways to create a cluster.
            You can pass in a NodeConfig object (created using New-GkeNodeConfig) and the cmdlet will create
            a cluster whose node pools will have their configurations set from the NodeConfig object.
            Instead of passing in a NodeConfig object, you can also use the parameters provided in this cmdlet
            and a NodeConfig object will be automatically created and used in the cluster creation (same as above).
            In both cases above, you can specify how many node pools the cluster will have with -NumberOfNodePools.
            Lastly, you can also create a cluster by passing in an array of NodePool objects and a cluster with
            node pools similar to that array will be created.
            </para>
            <example>
              <code>
              PS C:\> Add-GkeCluster -NodeConfig $nodeConfig `
                                     -ClusterName "my-cluster" `
                                     -Network "my-network"
              </code>
              <para>
              Creates a cluster named "my-cluster" in the default zone of the default project using config
              $nodeConfig and network "my-network".
              </para>
            </example>
            <example>
              <code>
              PS C:\> Add-GkeCluster -MachineType "n1-standard-4" `
                                     -ClusterName "my-cluster" `
                                     -Description "My new cluster" `
                                     -Subnetwork "my-subnetwork" `
                                     -EnableAutoUpgrade `
                                     -MaximumNodesToScaleTo 2
              </code>
              <para>
              Creates a cluster named "my-cluster" with description "my new cluster" in the default zone of
              the default project using machine type "n1-standard-4" for each Google Compute Engine VMs
              in the cluster. The cluster will use the subnetwork "my-subnetwork".
              The cluster's nodes will have autoupgrade enabled.
              The cluster will also autoscale its node pool to a maximum of 2 nodes.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Add-GkeCluster -ImageType "GCI" `
                                     -ClusterName "my-cluster" `
                                     -Zone "us-central1-a" `
                                     -MasterCredential (Get-Credential) `
                                     -DisableMonitoringService `
                                     -AdditionalZone "us-central1-f" `
                                     -NumberOfNodePools 2 `
                                     -DisableHttpLoadBalancing
              </code>
              <para>
              Creates a cluster named "my-cluster" in zone "us-central1-a" of the default project.
              Asides from "us-central1-a", the cluster's nodes will also be found at zone "us-central1-f".
              The cluster will not have Google Monitoring Service enabled to write metrics.
              The master node of the cluster will have credential supplied by (Get-Credential).
              Each node of the cluster will be of type GCI. The cluster will not have HTTP load balancing.
              The cluster created will have 2 node pools with the same node config.
              </para>
            </example>
            <example>
              <code>
              PS C:\> $nodePools = Get-GkeNodePool -Cluster "my-cluster"
              PS C:\> Add-GkeCluster -ClusterName "my-cluster-2" `
                                     -NodePool $nodePools `
                                     -DisableHorizontalPodAutoscaling
              </code>
              <para>
              Creates cluster "my-cluster-2" using the node pools from "my-cluster".
              The cluster will have horizontal pod autoscaling disabled.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/reference/rest/v1/NodeConfig)">
            [Node Configs]
            </para>
            <para type="link" uri="(https://kubernetes.io/docs/user-guide/labels/)">
            [Kubernetes Labels]
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/instances/preemptible)">
            [Preemptible VM instances]
            </para>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/node-pools)">
            [Node Pools]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.DiskSizeGb">
            <summary>
            <para type="description">
            Size of the disk attached to each node in the cluster, specified in GB.
            The smallest allowed disk size is 10GB.
            The default disk size is 100GB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.InstanceMetadata">
            <summary>
            <para type="description">
            Metadata key/value pairs assigned to instances in the cluster.
            Keys must conform to the regexp [a-zA-Z0-9-_]+ and not conflict with any other
            metadata keys for the project or be one of the four reserved keys: "instance-template",
            "kube-env", "startup-script" and "user-data".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.Label">
            <summary>
            <para type="description">
            The map of Kubernetes labels (key/value pairs) to be applied to each node in the cluster.
            This is in addition to any default label(s) that Kubernetes may apply to the node.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.LocalSsdCount">
            <summary>
            <para type="description">
            The number of local SSD disks attached to each node in the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.Tags">
            <summary>
            <para type="description">
            The list of instance tags applied to each node in the cluster.
            Tags are used to identify valid sources or targets for network firewalls.
            Each tag must complied with RFC1035.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            The Google Cloud Platform Service Account to be used by each node's VMs.
            Use New-GceServiceAccountConfig to create the service account and appropriate scopes.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.Preemptible">
            <summary>
            <para type="description">
            If set, every node created in the cluster will be a preemptible VM instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.ClusterName">
            <summary>
            <para type="description">
            The name of the cluster.
            Name has to start with a letter, end with a number or letter
            and consists only of letters, numbers and hyphens.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.Description">
            <summary>
            <para type="description">
            The description of the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.MasterCredential">
            <summary>
            <para type="description">
            The credential to access the master endpoint.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.DisableLoggingService">
            <summary>
            <para type="description">
            Stop the cluster from using Google Cloud Logging Service to write logs.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.DisableMonitoringService">
            <summary>
            <para type="description">
            Stop the cluster from using Google Cloud Monitoring service to write metrics.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.DisableHttpLoadBalancing">
            <summary>
            <para type="description">
            Removes HTTP load balancing controller addon.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.DisableHorizontalPodAutoscaling">
            <summary>
            <para type="description">
            Removes horizontal pod autoscaling feature, which increases or decreases the number of replica
            pods a replication controller has based on the resource usage of the existing pods.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.EnableKubernetesAlpha">
            <summary>
            <para type="description">
            Enables Kubernetes alpha features on the cluster. This includes alpha API groups
            and features that may not be production ready in the kubernetes version of the master and nodes.
            The cluster has no SLA for uptime and master/node upgrades are disabled.
            Alpha enabled clusters are AUTOMATICALLY DELETED thirty days after creation.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.EnableAutoUpgrade">
            <summary>
            <para type="description">
            If set, nodes in the cluster will be automatically upgraded.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.MaximumNodesToScaleTo">
            <summary>
            <para type="description">
            If set, the cluster will have autoscaling enabled and this number will represent
            the maximum number of nodes in the node pool that the cluster can scale to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.MininumNodesToScaleTo">
            <summary>
            <para type="description">
            If set, the cluster will have autoscaling enabled and this number will represent
            the minimum number of nodes in the node pool that the cluster can scale to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.Network">
            <summary>
            <para type="description">
            Name of the Google Compute Engine network to which the cluster is connected.
            If left unspecified, the default network will be used.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.Subnetwork">
            <summary>
            <para type="description">
            The name of the Google Compute Engine subnetwork to which the cluster is connected.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.ClusterIpv4AddressRange">
            <summary>
            <para type="description">
            The IP address range of the container pods in this cluster, in CIDR notation.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.AdditionalZone">
            <summary>
            <para type="description">
            The zones (in addition to the zone specified by -Zone parameter) in which
            the cluster's nodes should be located.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.NodeConfig">
            <summary>
            <para type="description">
            Passed in a NodeConfig object containing configuration for the nodes in this cluster.
            This object can be created with New-GkeNodeConfig cmdlet.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.NumberOfNodePools">
            <summary>
            <para type="description">
            The number of node pools that the cluster will have. All the node pools will have the same config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeClusterCmdlet.NodePool">
            <summary>
            <para type="description">
            The node pools associated with this cluster.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeClusterCmdlet.PopulateDynamicParameter(System.String,System.String,System.Management.Automation.RuntimeDefinedParameterDictionary)">
            <summary>
            Add -MachineType and -ImageType parameter (they belong to "ByNodeConfigValues" parameter set).
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeClusterCmdlet.WaitForClusterCreation(Google.Apis.Container.v1.Data.Operation)">
            <summary>
            Wait for the cluster creation operation to complete.
            Use write progress to display the progress in the meantime.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeClusterCmdlet.BuildCluster">
            <summary>
            Build a cluster object based on the parameter given.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeClusterCmdlet.SetAddonsConfig(Google.Apis.Container.v1.Data.Cluster,System.Boolean,System.Boolean)">
            <summary>
            Set AddonsConfig of cluster if user wants to disable horizontal pod autoscaling or HTTP load balancing.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeClusterCmdlet.BuildNodePools(Google.Apis.Container.v1.Data.NodeConfig)">
            <summary>
            Create a node pool based on either the NodeConfig object passed in or ByNodeConfigValues parameters.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeClusterCmdlet.PopulateClusterMasterCredential(Google.Apis.Container.v1.Data.Cluster)">
            <summary>
            Fill out username and password for master node based on MasterCredential.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeClusterCmdlet.PopulateClusterNetwork(Google.Apis.Container.v1.Data.Cluster)">
            <summary>
            Fill out network, subnetwork and IPv4 address range for the cluster.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.SetGkeClusterCmdlet">
            <summary>
            <para type="synopsis">
            Updates a Google Container Cluster.
            </para>
            <para type="description">
            Updates a Google Container Cluster. Only one property can be updated at a time.
            The properties are:
              1. AddonsConfig for a cluster (-LoadBalancing and -HorizontalPodAutoscaling).
              2. Additional zones for the cluster (-AdditionalZone).
              3. Version of the master, which can only be changed to the latest (-UpdateMaster).
              4. Monitoring service for a cluster (-MonitoringService).
              5. Autoscaling for a node pool in the cluster (-Min/MaximumNodesToScaleTo).
              6. Kubernetes version for nodes in a node pool in the cluster (-NodeVersion).
              7. Image type for nodes in a node pool in the cluster (-ImageType).
            </para>
            <para type="description">
            To specify a cluster, you can supply its name to -ClusterName. If -Project and/or -Zone
            are not used in this case, the cmdlet will use the default project and/or default zone.
            The cmdlet also accepts a Cluster object (from Get-GkeCluster cmdlet) with -ClusterObject.
            In this case, the Project and Zone will come from the cluster object itself.
            </para>
            <example>
              <code>
              PS C:\> Set-GkeCluster -ClusterName "my-cluster" `
                                     -LoadBalancing $true
              </code>
              <para>
              Turns on load balancing for cluster "my-cluster" in the default zone and project.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GkeCluster -ClusterName "my-cluster" `
                                     -Zone "asia-east1-a" `
                                     -AdditionalZone "asia-east1-b", "asia-east1-c"
              </code>
              <para>
              Sets additional zones of cluster "my-cluster" in zone "asia-east1-a" to zones
              "asia-east1-b" and "asia-east1-c". This means the clusters will have nodes
              created in these zones. The primary zone ("asia-east1-a" in this case)
              will be added to the AdditionalZone array by the cmdlet.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GkeCluster -ClusterObject $clusterObject `
                                     -NodePoolName "default-pool" `
                                     -MaximumNodesToScaleTo 3
              </code>
              <para>
              Sets the node pool "default-pool" in the Cluster object $clusterObject
              to have autoscaling with a max nodes count of 3.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GkeCluster -ClusterName "my-cluster" `
                                     -NodePoolName "default-pool" `
                                     -NodeVersion "1.4.9"
              </code>
              <para>
              Sets the Kubernetes version of nodes in node pool "default-pool" in cluster
              "my-cluster" to 1.4.9. Note that the version of the nodes has to be
              less than that of the master. Otherwise, the cmdlet will throw an error.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/clusters/)">
            [Container Clusters]
            </para>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/node-pools)">
            [Node Pools]
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.Container.SetGkeClusterCmdlet._dynamicParameters">
            <summary>
            This dynamic parameter dictionary is used by PowerShell to generate parameters dynamically.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.Project">
            <summary>
            <para type="description">
            The project that the cluster belongs to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.Zone">
            <summary>
            <para type="description">
            The zone that the cluster belongs to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.NodePoolName">
            <summary>
            <para type="description">
            The name of node pool in the cluster to be updated.
            This parameter is mandatory if you want to update NodeVersion, Autoscaling or ImageType of a cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.ClusterName">
            <summary>
            <para type="description">
            The name of the cluster to be updated.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.ClusterObject">
            <summary>
            <para type="description">
            The name of the cluster that the node pool belongs to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.AdditionalZone">
            <summary>
            <para type="description">
            The desired list of Google Compute Engine locations in which the cluster's nodes should be located.
            Changing the locations a cluster is in will result in nodes being either created or removed from
            the cluster, depending on whether locations are being added or removed. This list must always include
            the cluster's primary zone.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.UpdateMaster">
            <summary>
            <para type="description">
            If set, the cluster's master will be updated to the latest Kubernetes version.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.LoadBalancing">
            <summary>
            <para type="description">
            This parameter is used to enable or disable HTTP load balancing in the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.HorizontalPodAutoscaling">
            <summary>
            <para type="description">
            This parameter is used to enable or disable HorizontalPodAutoscaling in the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.MonitoringService">
            <summary>
            <para type="description">
            This parameter is used to set the monitoring service of the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.MaximumNodesToScaleTo">
            <summary>
            <para type="description">
            If set, a node pool in the cluster will have autoscaling enabled and this number will represent
            the maximum number of nodes that the node pool can scale to.
            If the cluster has more than 1 node pool, -NodePoolName is needed to determine
            which node pool the autoscaling will be applied to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.SetGkeClusterCmdlet.MininumNodesToScaleTo">
            <summary>
            <para type="description">
            If set, a node pool in the cluster will have autoscaling enabled and this number will represent
            the minimum number of nodes that the node pool can scale to.
            If the cluster has more than 1 node pool, -NodePoolName is needed to determine
            which node pool the autoscaling will be applied to.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.GetDynamicParameters">
            <summary>
            Generate dynamic parameter -MachineType and -ImageType based on the value of -Project
            and -Zone. This will provide tab-completion for -MachineType and -ImageType parameters.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.PopulateDynamicParameters(System.String,System.String)">
            <summary>
            Populate -NodeVersion and -ImageType parameters.
            PowerShell doesn't seem to like it if we make these dynamic parameters the
            unique and mandatory parameter in a parameter set so I have to make them
            non-mandatory and have logic to separate the parameter set in
            UpdateNodePool.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.WaitForClusterUpdate(Google.Apis.Container.v1.Data.Operation)">
            <summary>
            Wait for the cluster update operation to complete.
            Use write progress to display the progress in the meantime.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.BuildUpdateClusterRequest">
            <summary>
            Constructs an UpdateClusterRequest based on selected ParameterSet.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.UpdateNodePool(Google.Apis.Container.v1.Data.ClusterUpdate)">
            <summary>
            Helper function to update a NodePool's property in the cluster.
            Only 1 property (Autoscaling, NodeVersion or ImageType) can be updated
            per cmdlet invocation.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.UpdateNodeVersion(Google.Apis.Container.v1.Data.ClusterUpdate,System.String)">
            <summary>
            Helper function to set the DesiredNodeVersion in clusterUpdate
            based on the string nodeVersion. This function also performs check
            to make sure that the node version is less than the master version.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.UpdateAdditionalZones(Google.Apis.Container.v1.Data.ClusterUpdate)">
            <summary>
            Set DesiredLocations of the clusterUpdate.
            Since the primary zone also has to be included in the additional zones,
            we add that to the additional zones list if it is not already there.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.UpdateAutoScaling(Google.Apis.Container.v1.Data.ClusterUpdate)">
            <summary>
            Set DesiredNodePoolAutoscaling of the clusterUpdate based on MaximumNodesToScaleTo and MinimumNodesToScaleTo.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.SetGkeClusterCmdlet.UpdateAddonsConfig(Google.Apis.Container.v1.Data.ClusterUpdate)">
            <summary>
            Set DesiredAddonsConfig of the clusterUpdate based on LoadBalancing and HorizontalPodAutoscaling.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.RemoveGkeClusterCmdlet">
            <summary>
            <para type="synopsis">
            Removes a Google Container Cluster.
            </para>
            <para type="description">
            Removes a Google Container Cluster. You can either pass in a cluster object (from Get-GkeCluster cmdlet)
            or use -Cluster, -Project and -Zone parameters (if -Project and/or -Zone parameters are not used,
            the cmdlet will use the default project and/or default zone).
            </para>
            <example>
              <code>
              PS C:\> Remove-GkeCluster -ClusterName "my-cluster" `
                                        -Zone "us-west1-b"
              </code>
              <para>Removes the cluster "my-cluster" in the zone "us-west1-b" of the default project.</para>
            </example>
            <example>
              <code>
              PS C:\> $cluster = Get-GkeCluster -ClusterName "my-cluster"
              PS C:\> Remove-GkeCluster -InputObject $cluster
              </code>
              <para>
              Removes the cluster "my-cluster" by using the cluster object returned from Get-GkeCluster.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Get-GkeCluster -Zone "us-west1-b" | Remove-GkeCluster
              </code>
              <para>
              Removes all clusters in zone "us-west1-b" of the default project by pipelining.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/clusters/)">
            [Container Clusters]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeClusterCmdlet.Project">
            <summary>
            <para type="description">
            The project that the container clusters belong to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeClusterCmdlet.Zone">
            <summary>
            <para type="description">
            The zone that the container clusters belong to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeClusterCmdlet.ClusterName">
            <summary>
            <para type="description">
            The name of the container cluster to be removed.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeClusterCmdlet.InputObject">
            <summary>
            <para type="description">
            The cluster object to be removed.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.RemoveGkeClusterCmdlet.WaitForClusterDeletion(Google.Apis.Container.v1.Data.Operation)">
            <summary>
            Wait for the cluster deletion operation to complete.
            Use write progress to display the progress in the meantime.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.GetGkeNodePoolCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Container Engine Node Pools from a Cluster.
            </para>
            <para type="description">
            Gets Google Container Engine Node Pools from a Cluster. If -Project and/or -Zone parameter is not specified,
            the default project and/or the default zone will be used. If -NodePoolName parameter is not used,
            the cmdlet will return every node pools in the cluster.
            You can either supply cluster name with -ClusterName or a Cluster object from
            Get-GkeCluster with -ClusterObject. If a Cluster object is used, the cmdlet will use the
            Project and Zone from the object.
            </para>
            <example>
              <code>PS C:\> Get-GkeNodePool -ClusterName "my-cluster"</code>
              <para>Lists all node pools in cluster "my-cluster" in the default project.</para>
            </example>
            <example>
              <code>
              PS C:\> Get-GkeNodePool -Zone "us-central1-a" -Project "my-project" -ClusterName "my-cluster"
              </code>
              <para>
              Lists all node pools in cluster "my-cluster" in zone us-central1-a of the project "my-project".
              </para>
            </example>
            <example>
              <code>
              PS C:\> Get-GkeNodePool -ClusterName "my-cluster" -NodePoolName "default-1", "default-2"
              </code>
              <para>
              Gets node pools "default-1" and "default-2" in cluster "my-cluster" in the default project.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/node-pools)">
            [Node Pools]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeNodePoolCmdlet.Project">
            <summary>
            <para type="description">
            The project that the node pool's cluster is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeNodePoolCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the node pool's cluster is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeNodePoolCmdlet.ClusterName">
            <summary>
            <para type="description">
            The name of the cluster that the node pool belongs to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeNodePoolCmdlet.NodePoolName">
            <summary>
            <para type="description">
            The name(s) of the node pool(s) that will be retrieved.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GetGkeNodePoolCmdlet.ClusterObject">
            <summary>
            <para type="description">
            The name of the cluster that the node pool belongs to.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GetGkeNodePoolCmdlet.GetNodePoolsByName(System.String,System.String,System.String,System.String[])">
            <summary>
            Returns node pools that have the names in nodePoolNames array in cluster 'clusterName'
            of zone 'zone' in project 'project'.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GetGkeNodePoolCmdlet.GetAllNodepools(System.String,System.String,System.String)">
            <summary>
            Given a cluster in a zone of a project, returns all the node pools of that cluster.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.GkeNodePoolConfigCmdlet">
            <summary>
            Abstract class for cmdlets that needs to create node pool objects.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodePoolConfigCmdlet.NodePoolName">
            <summary>
            <para type="description">
            Name of the node pool.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodePoolConfigCmdlet.NodeConfig">
            <summary>
            <para type="description">
            Passed in a NodeConfig object containing configuration for the nodes in this node pool.
            This object can be created with New-GkeNodeConfig cmdlet.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodePoolConfigCmdlet.EnableAutoUpgrade">
            <summary>
            <para type="description">
            If set, nodes in the node pool will be automatically upgraded.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodePoolConfigCmdlet.MaximumNodesToScaleTo">
            <summary>
            <para type="description">
            If set, the node pool will have autoscaling enabled and this number will represent
            the minimum number of nodes in the node pool that the cluster can scale to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodePoolConfigCmdlet.MininumNodesToScaleTo">
            <summary>
            <para type="description">
            If set, the node pool will have autoscaling enabled and this number will represent
            the maximum number of nodes in the node pool that the cluster can scale to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.GkeNodePoolConfigCmdlet.InitialNodeCount">
            <summary>
            <para type="description">
            The number of nodes to create in a nodepool.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.GkeNodePoolConfigCmdlet.BuildNodePool(System.String,Google.Apis.Container.v1.Data.NodeConfig,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Helper function to build a NodePool object.
            InitialNodeCount will default to 1.
            MaximumNodesToScaleTo have to be greater than MinimumNodesToScaleTo, which defaults to 1.
            </summary>
            <param name="name">The name of the node pool.</param>
            <param name="config">The config of the node pool.</param>
            <param name="initialNodeCount">The number of nodes created in the pool initially.</param>
            <param name="autoUpgrade">If true, nodes will have auto-upgrade enabled.</param>
            <param name="minimumNodesToScaleTo">The maximum number of nodes to scale to.</param>
            <param name="maximumNodesToScaleTo">
            The minimum number of nodes to scale to. Defaults to 1.
            </param>
            <returns></returns>
        </member>
        <member name="T:Google.PowerShell.Container.NewGkeNodePoolCmdlet">
            <summary>
            <para type="synopsis">
            Creates a Google Container Engine Node Pool
            </para>
            <para type="description">
            Creates a Google Container Engine Node Pool. The node pool can be used to create a cluster with
            Add-GkeCluster or added to an existing cluster with Add-GkeNodePool. If -Project is not used,
            the cmdlet will use the default project. If -Zone is not used, the cmdlet will use the default zone.
            -Project and -Zone parameters are only used to provide tab-completion for the possible list of
            image and machine types applicable to the nodes.
            </para>
            <example>
              <code>PS C:\> New-GkeNodePool -NodePoolName "my-nodepool" -ImageType CONTAINER_VM</code>
              <para>Creates a node pool "my-nodepool" with image type CONTAINER_VM for each node.</para>
            </example>
            <example>
              <code>
              PS C:\> New-GkeNodePool -NodePoolName "my-nodepool" `
                                      -ImageType CONTAINER_VM `
                                      -MachineType n1-standard-1 `
                                      -InitialNodeCount 3
              </code>
              <para>
              Creates a node pool with image type CONTAINER_VM for each node and machine type n1-standard-1
              for each Google Compute Engine used to create the cluster. The node pool will have an initial
              node count of 3.
              </para>
            </example>
            <example>
              <code>PS C:\> New-GkeNodePool "my-nodepool" -DiskSizeGb 20 -SsdCount 2 -EnableAutoUpgrade</code>
              <para>
              Creates a node pool with 20 Gb disk size and 2 SSDs for each node. Each node in the node pool
              will have autoupgrade enabled.
              </para>
            </example>
            <example>
              <code>
              PS C:\> New-GkeNodePool "my-nodepool" -Metadata @{"key" = "value"} `
                                                    -Label @{"release" = "stable"} `
                                                    -MaximumNodesToScaleTo 3
              </code>
              <para>
              Creates a node pool with metadata pair "key" = "value" and Kubernetes label "release" = "stable".
              The node pool will scale to 3 nodes maximum.
              </para>
            </example>
            <example>
              <code>
              PS C:\> $serviceAccount = New-GceServiceAccountConfig -BigTableAdmin Full `
                                                                    -CloudLogging None `
                                                                    -CloudMonitoring None `
                                                                    -ServiceControl $false `
                                                                    -ServiceManagement $false `
                                                                    -Storage None
              PS C:\> New-GkeNodePool "my-nodepool" -ServiceAccount $serviceAccount
              </code>
              <para>
              Creates a node pool that uses the default service account with scopes "bigtable.admin".
              </para>
            </example>
            <example>
              <code>PS C:\> New-GkeNodePool "my-nodepool" -Preemptible</code>
              <para>
              Creates a node pool where each node is created as preemptible VM instances.
              </para>
            </example>
            <example>
              <code>PS C:\> New-GkeNodePool "my-nodepool" -NodeConfig $nodeConfig</code>
              <para>
              Creates a node pool using NodeConfig $nodeconfig.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/reference/rest/v1/NodeConfig)">
            [Node Configs]
            </para>
            <para type="link" uri="(https://kubernetes.io/docs/user-guide/labels/)">
            [Kubernetes Labels]
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/instances/preemptible)">
            [Preemptible VM instances]
            </para>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/node-pools)">
            [Node Pools]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.NodePoolName">
            <summary>
            <para type="description">
            Name of the node pool.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.NodeConfig">
            <summary>
            <para type="description">
            Passed in a NodeConfig object containing configuration for the nodes in this node pool.
            This object can be created with New-GkeNodeConfig cmdlet.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.DiskSizeGb">
            <summary>
            <para type="description">
            Size of the disk attached to each node in this node pool, specified in GB.
            The smallest allowed disk size is 10GB.
            The default disk size is 100GB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.InstanceMetadata">
            <summary>
            <para type="description">
            Metadata key/value pairs assigned to instances in this node pool.
            Keys must conform to the regexp [a-zA-Z0-9-_]+ and not conflict with any other
            metadata keys for the project or be one of the four reserved keys: "instance-template",
            "kube-env", "startup-script" and "user-data".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.Label">
            <summary>
            <para type="description">
            The map of Kubernetes labels (key/value pairs) to be applied to each node in this node pool.
            This is in addition to any default label(s) that Kubernetes may apply to the node.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.LocalSsdCount">
            <summary>
            <para type="description">
            The number of local SSD disks attached to each node in this node pool.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.Tags">
            <summary>
            <para type="description">
            The list of instance tags applied to each node in this node pool.
            Tags are used to identify valid sources or targets for network firewalls.
            Each tag must complied with RFC1035.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            The Google Cloud Platform Service Account to be used by each node's VMs.
            Use New-GceServiceAccountConfig to create the service account and appropriate scopes.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.NewGkeNodePoolCmdlet.Preemptible">
            <summary>
            <para type="description">
            If set, every node created in this node pool will be a preemptible VM instance.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.NewGkeNodePoolCmdlet.PopulateDynamicParameter(System.String,System.String,System.Management.Automation.RuntimeDefinedParameterDictionary)">
            <summary>
            Add -MachineType and -ImageType parameter (they belong to "ByNodeConfigValues" parameter set).
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.AddGkeNodePoolCmdlet">
            <summary>
            <para type="synopsis">
            Adds a Google Container Engine Node Pool to a Cluster.
            </para>
            <para type="description">
            Adds a Google Container Engine Node Pool to a Cluster. If -Project is not used,
            the cmdlet will use the default project. If -Zone is not used, the cmdlet will use the default zone.
            -Project and -Zone parameters are only used to provide tab-completion for the possible list of
            image and machine types applicable to the nodes. You can either create a NodePool
            object separately with New-GkeNodePool and use it with -NodePool parameter or simply use
            the available parameters on this cmdlet to create a new NodePool.
            Instead of using -ClusterName to provide the name of the cluster, you can also use
            -ClusterObject, which takes in a Cluster object from Get-GkeCluster. When you use
            -ClusterObject, the Project and Zone will automatically be taken from the Cluster object.
            </para>
            <example>
              <code>
              PS C:\> $nodePool = New-GkeNodePool -NodePoolName "my-nodepool" -ImageType CONTAINER_VM
              PS C:\> Add-GkeNodePool -NodePool $nodePool -Cluster "my-cluster"
              </code>
              <para>
              Creates a node pool "my-nodepool" with image type CONTAINER_VM for each node.
              Adds that pool to cluster "my-cluter".
              </para>
            </example>
            <example>
              <code>
              PS C:\> Add-GkeNodePool -NodePoolName "my-nodepool" `
                                      -ImageType CONTAINER_VM `
                                      -MachineType n1-standard-1 `
                                      -InitialNodeCount 3 `
                                      -Cluster $cluster
              </code>
              <para>
              Creates a node pool with image type CONTAINER_VM for each node and machine type n1-standard-1
              for each Google Compute Engine used to create the node pool. The node pool will be added
              to cluster $cluster where $cluster is a Cluster object returned from Get-GkeCluster.
              </para>
            </example>
            <example>
              <code>PS C:\> Add-GkeNodePool "my-nodepool" -DiskSizeGb 20 `
                                                          -SsdCount 2 `
                                                          -EnableAutoUpgrade `
                                                          -Cluster "my-cluster" `
                                                          -Zone "europe-west1-c"
              </code>
              <para>
              Creates a node pool with 20 Gb disk size and 2 SSDs for each node. Each node in the node pool
              will have autoupgrade enabled. The node pool will be added to cluster "my-cluster" in zone
              "europe-west1-c".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/reference/rest/v1/NodeConfig)">
            [Node Configs]
            </para>
            <para type="link" uri="(https://kubernetes.io/docs/user-guide/labels/)">
            [Kubernetes Labels]
            </para>
            <para type="link" uri="(https://cloud.google.com/compute/docs/instances/preemptible)">
            [Preemptible VM instances]
            </para>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/node-pools)">
            [Node Pools]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.Project">
            <summary>
            <para type="description">
            The project that the node pool's cluster is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.Zone">
            <summary>
            <para type="description">
            The zone in which the node pool's cluster is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.NodePool">
            <summary>
            <para type="description">
            The node pool to be added to the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.NodePoolName">
            <summary>
            <para type="description">
            Name of the node pool to be added.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.ClusterName">
            <summary>
            <para type="description">
            The name of the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.ClusterObject">
            <summary>
            <para type="description">
            The cluster object that the node pool will be added to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.NodeConfig">
            <summary>
            <para type="description">
            Passed in a NodeConfig object containing configuration for the nodes in this node pool.
            This object can be created with New-GkeNodeConfig cmdlet.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.DiskSizeGb">
            <summary>
            <para type="description">
            Size of the disk attached to each node in this node pool, specified in GB.
            The smallest allowed disk size is 10GB.
            The default disk size is 100GB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.InstanceMetadata">
            <summary>
            <para type="description">
            Metadata key/value pairs assigned to instances in this node pool.
            Keys must conform to the regexp [a-zA-Z0-9-_]+ and not conflict with any other
            metadata keys for the project or be one of the four reserved keys: "instance-template",
            "kube-env", "startup-script" and "user-data".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.Label">
            <summary>
            <para type="description">
            The map of Kubernetes labels (key/value pairs) to be applied to each node in this node pool.
            This is in addition to any default label(s) that Kubernetes may apply to the node.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.LocalSsdCount">
            <summary>
            <para type="description">
            The number of local SSD disks attached to each node in this node pool.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.Tags">
            <summary>
            <para type="description">
            The list of instance tags applied to each node in this node pool.
            Tags are used to identify valid sources or targets for network firewalls.
            Each tag must complied with RFC1035.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.ServiceAccount">
            <summary>
            <para type="description">
            The Google Cloud Platform Service Account to be used by each node's VMs.
            Use New-GceServiceAccountConfig to create the service account and appropriate scopes.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.AddGkeNodePoolCmdlet.Preemptible">
            <summary>
            <para type="description">
            If set, every node created in this node pool will be a preemptible VM instance.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeNodePoolCmdlet.PopulateDynamicParameter(System.String,System.String,System.Management.Automation.RuntimeDefinedParameterDictionary)">
            <summary>
            Add -MachineType and -ImageType parameter (they belong to "ByNodeConfigValues" parameter set).
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.AddGkeNodePoolCmdlet.WaitForNodePoolCreation(Google.Apis.Container.v1.Data.Operation)">
            <summary>
            Wait for the NodePool creation operation to complete.
            Use write progress to display the progress in the meantime.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet">
            <summary>
            <para type="synopsis">
            Removes a Google Container NodePool from a Cluster.
            </para>
            <para type="description">
            Removes a Google Container NodePool from a Cluster.
            If -Project and -Zone are not specified, the cmdlets will default
            to the default project and zone.
            If -ClusterObject is used instead of -ClusterName, the Project and
            Zone will come from the cluster object.
            If a node pool object is given to -ClusterName, the cmdlet will
            get Project, Zone and Cluster information from the object.
            </para>
            <example>
              <code>
              PS C:\> Remove-GkeCluster -ClusterName "my-cluster" `
                                        -Zone "us-west1-b" `
                                        -NodePoolName "my-nodepool"
              </code>
              <para>
              Removes the node pool "my-nodepool" in cluster "my-cluster" in the zone
              "us-west1-b" of the default project.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/node-pools)">
            [Node Pools]
            </para>
            <para type="link" uri="(https://cloud.google.com/container-engine/docs/clusters/)">
            [Container Clusters]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.Project">
            <summary>
            <para type="description">
            The project that the node pool's cluster belongs to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.Zone">
            <summary>
            <para type="description">
            The zone that the node pool's cluster belongs to.
            This parameter defaults to the project in the Cloud SDK config.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.NodePoolName">
            <summary>
            <para type="description">
            The name of the node pool to be removed.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.NodePoolObject">
            <summary>
            <para type="description">
            The NodePool object to be removed. Cluster, Zone and Project will be inferred
            from the object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.ClusterName">
            <summary>
            <para type="description">
            The name of the container cluster that the node pool is in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.ClusterObject">
            <summary>
            <para type="description">
            The container cluster object that the node pool is in.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.ProcessParams">
            <summary>
            Process parameters and fill out Project, Zone and ClusterName.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Container.RemoveGkeNodePoolCmdlet.WaitForNodePoolDeletion(Google.Apis.Container.v1.Data.Operation)">
            <summary>
            Wait for the node pool deletion operation to complete.
            Use write progress to display the progress in the meantime.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.GcdCmdlet">
            <summary>
            Base class for Google DNS-based cmdlets. 
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.GetGcdChangeCmdlet">
            <summary>
            <para type="synopsis">
            Gets the Change resources within a ManagedZone of a Project.
            </para>
            <para type="description">
            Lists the ManagedZone's Change resources.
            </para>
            <para type="description">
            If a Project is specified, will instead return the Changes in the specified ManagedZone governed by that 
            project. The filter ChangeId can be provided to return that specific Change.
            </para>
            <example>
              <code>
              PS C:\> Get-GcdChange -Project "testing" -Zone "test1"
              </code>
              <para>Get the Change resources in the ManagedZone "test1" in the Project "testing."</para>
            </example>
            <example>
              <code>PS C:\> Get-GcdChange -Project "testing" -Zone "test1" -ChangeId "0"</code>
              <para>
                Get the Change resource with id "0" in the ManagedZone "test1" in the Project "testing."
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/monitoring)">[Monitoring Changes]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdChangeCmdlet.Project">
            <summary>
            <para type="description">
            Get the Project to check.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdChangeCmdlet.Zone">
            <summary>
            <para type="description">
            Get the ManagedZone (name or id permitted) to check for changes.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdChangeCmdlet.ChangeId">
            <summary>
            <para type="description">
            Get the id of the specific change to return.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Dns.GetGcdChangeCmdlet.GetGcdChange(System.String,System.String)">
            <summary>
            Returns all GCD changes within a zone of a project.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.AddGcdChangeCmdlet">
            <summary>
            <para type="synopsis">
            Add a new Change to a ManagedZone of a Project.
            </para>
            <para type="description">
            Create, execute, and return a new Change request within a specified ManagedZone of a Project.
            </para>
            <para type="description">
            If a Project is specified, will instead create the Change in the specified ManagedZone governed by that 
            project. Either a Change request or ResourceRecordSet[] to add/remove can be given as input.
            </para>
            <example>   
              <code>
                $newARecord = New-GcdResourceRecordSet -Name "gcloudexample1.com." `
                    -Rrdata "104.1.34.167"
                $oldCNAMERecord = (Get-GcdResourceRecordSet -Zone "test1" -Filter "CNAME")[0]
                Add-GcdChange -Project "proj" -Zone "test1" `
                    -Add $newARecord -Remove $oldCNAMERecord
              </code>
              <para> 
              Add a new Change that adds a new A-type ResourceRecordSet, $newARecord, and removes an existing CNAME-type 
              record, $oldCNAMERecord, from the ManagedZone "test1" (governing "gcloudexample1.com.") in the Project 
              "testing."
              </para>
            </example>
            <example>
              <code>
              PS C:\> $change2 = Get-GcdChange -Project "testing" -Zone "test1" -ChangeId 2
              PS C:\> Add-GcdChange -Project "proj" -Zone "test1" -ChangeRequest $change2
              </code>
              <para>
              Add the Change request $change2 to the ManagedZone "test1" in the Project "testing," where $change2 is a 
              previously executed Change request in ManagedZone "test1" that we want to apply again.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/monitoring)">[Monitoring Changes]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdChangeCmdlet.Project">
            <summary>
            <para type="description">
            Get the Project to change.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdChangeCmdlet.Zone">
            <summary>
            <para type="description">
            Get the ManagedZone (name or id permitted) to change.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdChangeCmdlet.ChangeRequest">
            <summary>
            <para type="description">
            Get the Change request to execute.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdChangeCmdlet.Add">
            <summary>
            <para type="description">
            Get the ResourceRecordSet(s) to add for this Change.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdChangeCmdlet.Remove">
            <summary>
            <para type="description">
            Get the ResourceRecordSet(s) to remove (must exactly match existing ones) for this Change.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.GetGcdManagedZoneCmdlet">
            <summary>
            <para type="synopsis">
            Gets the Google DNS ManagedZones within a Project.
            </para>
            <para type="description">
            Lists the Project's ManagedZones.
            </para>
            <para type="description">
            If a Project is specified, will instead return all ManagedZones governed by that project. 
            The filter ManagedZone can be provided to return that specific zone.
            </para>
            <example>
              <code>PS C:\> Get-GcdManagedZone -Project "testing" </code>
              <para>Get the ManagedZones for the Project "testing."</para>
            </example>
            <example>
              <code>PS C:\> Get-GcdManagedZone -Project "testing" -Zone "test1" </code>
              <para>Get the ManagedZone "test1" for the Project "testing."</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/zones/)">[Managing Zones]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdManagedZoneCmdlet.Project">
            <summary>
            <para type="description">
            Get the project to check for ManagedZones.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdManagedZoneCmdlet.Zone">
            <summary>
            <para type="description">
            Get the specific ManagedZone to return (name or id permitted).
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.AddGcdManagedZoneCmdlet">
            <summary>
            <para type="synopsis">
            Add a new Google DNS ManagedZone to the Project.
            </para>
            <para type="description">
            Creates a new ManagedZone.
            </para>
            <para type="description">
            If a Project is specified, it will instead add the new ManagedZone to that project.
            </para>
            <example>   
              <code>
                PS C:\> Add-GcdManagedZone -Project "testing" -Name "testzone1" `
                    -DnsName "gcloudexample.com." -Description "test description"     
              </code>
              <para>
              Create a new ManagedZone in the DNSProject "testing" with the name "test1," DNS name "gcloudexample.com.,"
              and description "test description."
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/zones/)">[Managing Zones]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdManagedZoneCmdlet.Project">
            <summary>
            <para type="description">
            Get the Project to create a new ManagedZone in.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdManagedZoneCmdlet.Name">
            <summary>
            <para type="description">
            The name of the new ManagedZone to create.
            </para>
            <para type="description">
            The name must be 1-32 characters long, begin with a letter, end with a letter or digit, and only contain 
            lowercase letters, digits, and dashes.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdManagedZoneCmdlet.DnsName">
            <summary>
            <para type="description">
            The DNS name of the new ManagedZone.
            </para>
            <para type="description">
            The DnsName must be a valid absolute zone and end in a period. If it does not, the cmdlet will 
            automatically add a period before attempting zone creation.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.AddGcdManagedZoneCmdlet.Description">
            <summary>
            <para type="description">
            Get the description of the new ManagedZone.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.RemoveGcdManagedZoneCmdlet">
            <summary>
            <para type="synopsis">
            Removes an existing Google DNS ManagedZone within a Project.
            </para>
            <para type="description">
            Deletes the specified ManagedZone (and returns nothing).
            </para>
            <para type="description">
            If a Project is specified, it will instead remove the specified ManagedZone from that project. The optional 
            switch -Force will force removal of even non-empty ManagedZones (e.g., zones with non-NS/SOA type records).
            </para>
            <example>
              <code>PS C:\> Remove-GcdManagedZone -Project "testing" -Zone "test1" -Force</code>
              <para>Delete the (non-empty) ManagedZone "test1" from the Project "testing."</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/zones/)">[Managing Zones]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.RemoveGcdManagedZoneCmdlet.Project">
            <summary>
            <para type="description">
            Get the Project to check.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.RemoveGcdManagedZoneCmdlet.Zone">
            <summary>
            <para type="description">
            Get the specific ManagedZone to delete (name or id permitted).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.RemoveGcdManagedZoneCmdlet.Force">
            <summary>
            <para type="description">
            Force removal of even non-empty ManagedZones (e.g., zones with non-NS/SOA type records).
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.GetGcdQuotaCmdlet">
            <summary>
            <para type="synopsis">
            Fetch the DNS quota of an existing Project.
            </para>
            <para type="description">
            Returns the DNS quota from the Project resource object.
            </para>
            <para type="description">
            If a Project is specified, will instead return the DNS quota for that project. 
            </para>
            <example>
              <code>PS C:\> Get-GcdQuota -Project "testing" </code>
              <para>Get the DNS quota of the Project "testing"</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/quota)">[Quotas]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdQuotaCmdlet.Project">
            <summary>
            <para type="description">
            Get the Project to return the DNS quota of.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.GetGcdResourceRecordSetCmdlet">
            <summary>
            <para type="synopsis">
            Gets the ResourceRecordSet resources within a ManagedZone of a Project.
            </para>
            <para type="description">
            Lists the ManagedZone's ResourceRecordSets.
            </para>
            <para type="description">
            If a Project is specified, the cmdlet will instead return the ResourceRecordSets in the specified 
            ManagedZone governed by that project. The optional -Filter can be provided to restrict the ResourceRecordSet 
            types returned.
            </para>
            <example>
              <code>PS C:\> Get-GcdResourceRecordSet -Project "testing" -Zone "test1"</code>
              <para>Get the ResourceRecordSet resources in the ManagedZone "test1" in the Project "testing."</para>
            </example>
            <example>
              <code>PS C:\> Get-GcdResourceRecordSet -Project "testing" -Zone "testZone2" -Filter "NS","AAAA"</code>
              <para>
              Get the ResourceRecordSets of type "NS" or "AAAA" in the ManagedZone "testZone2" in the Project "testing."
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/records/json-record)">
            [Supported Resource Record Formats]
            </para>
            <para type="link" uri="(https://cloud.google.com/dns/records/)">[Managing Records]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdResourceRecordSetCmdlet.Project">
            <summary>
            <para type="description">
            Get the Project to check.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdResourceRecordSetCmdlet.Zone">
            <summary>
            <para type="description">
            Get the ManagedZone (name or id permitted) to check for ResourceRecordSets.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.GetGcdResourceRecordSetCmdlet.Filter">
            <summary>
            <para type="description">
            Filter the type(s) of ResourceRecordSets to return (e.g., -Filter "CNAME","NS")
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Dns.GetGcdResourceRecordSetCmdlet.GetResourceRecordSet(System.String,System.String,System.String[])">
            <summary>
            Returns all resource record sets in zone 'zone' in project 'project'.
            Apply filters if neccessary.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Dns.NewGcdResourceRecordSetCmdlet">
            <summary>
            <para type="synopsis">
            Create an independent new ResourceRecordSet resource.
            </para>
            <para type="description">
            Creates and returns a new ResourceRecordSet resource.
            </para>
            <para type="description">
            The newly created ResourceRecordSet will be created and returned independently, not within any Project or 
            ManagedZone. 
            </para>
            <example>
              <code>PS C:\> New-GcdResourceRecordSet -Name "gcloudexample.com." -Rrdata "7.5.7.8" -Type "A" -Ttl 300</code>
              <para>
              Create a new ResourceRecordSet resource with name "gcloudexample.com.", Rrdata ["7.5.7.8"], type "A," and 
              ttl 300.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/dns/records/json-record)">
            [Supported Resource Record Formats]
            </para>
            <para type="link" uri="(https://cloud.google.com/dns/records/)">[Managing Records]</para>
            <para type="link" uri="(https://cloud.google.com/dns/troubleshooting)">[Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.NewGcdResourceRecordSetCmdlet.Name">
            <summary>
            <para type="description">
            Get the name of the new ResourceRecordSet (e.g., "gcloudexample.com.").
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.NewGcdResourceRecordSetCmdlet.Rrdata">
            <summary>
            <para type="description">
            Get the resource record data for the ResourceRecordSet.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Dns.NewGcdResourceRecordSetCmdlet.Type">
            <summary>
            <para type="description">
            Get the type of the ResourceRecordSet.
            </para>
            <para type="description">
            The supported types are A, AAAA, CNAME, MX, NAPTR, NS, PTR, SOA, SPF, SRV, and TXT.
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.Dns.NewGcdResourceRecordSetCmdlet.Ttl">
            <summary>
            <para type="description">
            Get the ttl, which is the number of seconds the ResourceRecordSet can be cached by resolvers.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.GcLogCmdlet">
            <summary>
            Base class for Stackdriver Logging cmdlets.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity">
            <summary>
            Enum of severity levels for a log entry.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Default">
            <summary>
            The log entry has no assigned severity level.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Debug">
            <summary>
            Debug or trace information.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Info">
            <summary>
            Routine information, such as ongoing status or performance.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Notice">
            <summary>
            Normal but significant events, such as start up, shut down, or a configuration change.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Warning">
            <summary>
            Warning events might cause problems.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Error">
            <summary>
            Error events are likely to cause problems.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Critical">
            <summary>
            Critical events cause more severe problems or outages.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Alert">
            <summary>
            A person must take an action immediately.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.LogSeverity.Emergency">
            <summary>
            One or more systems are unusable.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogCmdlet.PrefixProjectToLogName(System.String,System.String)">
            <summary>
            Prefix projects/{project id}/logs to logName if not present.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogCmdlet.PrefixProjectToSinkName(System.String,System.String)">
            <summary>
            Prefix projects/{project id}/sinks to sinkName if not present.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogCmdlet.PrefixProjectToMetricName(System.String,System.String)">
            <summary>
            Prefix projects/{project id}/metrics to metricName if not present.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogCmdlet.s_monitoredResourceDescriptors">
            <summary>
            A cache of the list of valid monitored resource descriptors.
            This is used for auto-completion to display possible types of monitored resource.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogCmdlet.GetResourceDescriptors">
            <summary>
            Gets all possible monitored resource descriptors.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogCmdlet.GetResourceDescriptor(System.String)">
            <summary>
            Returns a monitored resource descriptor based on a given type.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GcLogCmdlet.AllResourceTypes">
            <summary>
            Returns all valid resource types.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogCmdlet.GenerateResourceTypeParameter(System.Boolean)">
            <summary>
            Generate -ResourceType dynamic parameter. Cmdlets can use this parameter to filter log entries based on resource types
            such as "gce_instance". For a full list of resource types, see https://cloud.google.com/logging/docs/api/v2/resource-list
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogCmdlet.ConstructLogFilterString(System.String,System.Nullable{Google.PowerShell.Logging.GcLogCmdlet.LogSeverity},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Constructs a filter string based on log name, severity, type of log, before and after timestamps
            and other advanced filter.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter">
            <summary>
            Base class for GcLog cmdlet that uses log filter.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter.LogName">
            <summary>
            <para type="description">
            If specified, the cmdlet will filter out log entries that are in the log LogName.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter.Severity">
            <summary>
            <para type="description">
            If specified, the cmdlet will filter out log entries with the specified severity.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter.Before">
            <summary>
            <para type="description">
            If specified, the cmdlet will filter out log entries that occur before this datetime.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter.After">
            <summary>
            <para type="description">
            If specified, the cmdlet will filter out log entries that occur after this datetime.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter.Filter">
            <summary>
            <para type="description">
            If specified, the cmdlet will filter out log entries that satisfy the filter.
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter._dynamicParameters">
            <summary>
            This dynamic parameter dictionary is used by PowerShell to generate parameters dynamically.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter.GetDynamicParameters">
            <summary>
            This function is part of the IDynamicParameters interface.
            PowerShell uses it to generate parameters dynamically.
            We have to generate -ResourceType parameter dynamically because the array
            of resources that we used to validate against are not generated before compile time,
            i.e. [ValidateSet(ArrayGeneratedAtRunTime)] will throw an error for parameters
            that are not generated dynamically.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GcLogEntryCmdletWithLogFilter.SelectedResourceType">
            <summary>
            The value of the dynamic parameter -ResourceType. For example, if user types -ResourceType gce_instance,
            then this will be gce_instance.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.GetGcLogEntryCmdlet">
            <summary>
            <para type="synopsis">
            Gets log entries.
            </para>
            <para type="description">
            Gets all log entries from a project or gets the entries from a specific log.
            Log entries can be filtered using -LogName, -Severity, -After or -Before parameter.
            For advanced filtering, please use -Filter parameter.
            </para>
            <example>
              <code>PS C:\> Get-GcLogEntry</code>
              <para>This command gets all the log entries for the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogEntry -Project "my-project"</code>
              <para>This command gets all the log entries from the project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogEntry -LogName "my-log"</code>
              <para>This command gets all the log entries from the log named "my-backendservice".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogEntry -LogName "my-log"</code>
              <para>This command gets all the log entries from the log named "my-backendservice".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogEntry -LogName "my-log" -Severity Error</code>
              <para>This command gets all the log entries with severity ERROR from the log named "my-backendservice".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogEntry -LogName "my-log" -Before [DateTime]::Now.AddMinutes(30)</code>
              <para>
              This command gets all the log entries from the log named "my-backendservice" created before 30 minutes ago.
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogEntry -LogName "my-log" -After [DateTime]::Now.AddMinutes(30)</code>
              <para>
              This command gets all the log entries from the log named "my-backendservice" created after 30 minutes ago.
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogEntry -Filter 'resource.type="gce_instance" AND severity >= ERROR'</code>
              <para>This command gets all the log entries that satisfy filter.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/logs_index)">
            [Log Entries and Logs]
            </para>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/advanced_filters)">
            [Logs Filters]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GetGcLogEntryCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for log entries. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.NewGcLogMonitoredResource">
            <summary>
            <para type="synopsis">
            Creates new monitored resources.
            </para>
            <para type="description">
            Creates new monitored resources. These resources are used in the Logging cmdlets such as New-GcLogEntry
            </para>
            <example>
              <code>
              PS C:\> New-GcLogMonitoredResource -ResourceType "gce_instance" `
                                                 -Labels @{"project_id" = "my-project"; "instance_id" = "my-instance"}.
              </code>
              <para>This command creates a new monitored resource of type "gce_instance" with specified labels.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/api/v2/resource-list)">
            [Monitored Resources and Labels]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogMonitoredResource.Labels">
            <summary>
            <para type="description">
            The label that applies to resource type.
            For a complete list, see https://cloud.google.com/logging/docs/api/v2/resource-list.
            </para>
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.NewGcLogMonitoredResource._dynamicParameters">
            <summary>
            This dynamic parameter dictionary is used by PowerShell to generate parameters dynamically.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.NewGcLogMonitoredResource.GetDynamicParameters">
            <summary>
            This function is part of the IDynamicParameters interface.
            PowerShell uses it to generate parameters dynamically.
            We have to generate -ResourceType parameter dynamically because the array
            of resources that we used to validate against are not generated before compile time,
            i.e. [ValidateSet(ArrayGeneratedAtRunTime)] will throw an error for parameters
            that are not generated dynamically.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.NewGcLogEntryCmdlet">
            <summary>
            <para type="synopsis">
            Creates new log entries.
            </para>
            <para type="description">
            Creates new log entries in a log. The cmdlet will create the log if it doesn't exist.
            By default, the log is associated with the "global" resource type ("custom.googleapis.com" in v1 service).
            </para>
            <example>
              <code>PS C:\> New-GcLogEntry -TextPayload "This is a log entry." -LogName "test-log"</code>
              <para>This command creates a log entry with the specified text payload in the log "test-log".</para>
            </example>
            <example>
              <code>PS C:\> New-GcLogEntry -TextPayload "Entry 1", "Entry 2" -LogName "test-log"</code>
              <para>
              This command creates 2 log entries with text payload "Entry 1" and "Entry 2" respectively in the log "test-log".
              </para>
            </example>
            <example>
              <code>PS C:\> New-GcLogEntry -JsonPayload @{"a" = "b"} -LogName "test-log" -Severity Error</code>
              <para>This command creates a log entry with a json payload and severity level Error in the log "test-log".</para>
            </example>
            <example>
              <code>
              PS C:\> New-GcLogEntry -MonitoredResource (New-GcLogMonitoredResource -ResourceType global -Labels @{"project_id" = "my-project"}) `
                                     -TextPayload "This is a log entry."
              </code>
              <para>
              This command creates a log entry directly from the LogEntry object.
              The command also associates it with a resource type created from New-GcLogMonitoredResource
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/logs_index)">
            [Log Entries and Logs]
            </para>
            <para type="link" uri="(https://cloud.google.com/logging/docs/api/v2/resource-list)">
            [Monitored Resources]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogEntryCmdlet.Project">
            <summary>
            <para type="description">
            The project to where the log entry will be written to. If not set via PowerShell parameter processing,
            will default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogEntryCmdlet.LogName">
            <summary>
            <para type="description">
            The name of the log that this entry will be written to.
            If the log does not exist, it will be created.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogEntryCmdlet.TextPayload">
            <summary>
            <para type="description">
            The text payload of the log entry. Each value in the array will be written to a single entry in the log.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogEntryCmdlet.JsonPayload">
            <summary>
            <para type="description">
            The JSON payload of the log entry. Each value in the array will be written to a single entry in the log.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogEntryCmdlet.ProtoPayload">
            <summary>
            <para type="description">
            The proto payload of the log entry. Each value in the array will be written to a single entry in the log.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogEntryCmdlet.Severity">
            <summary>
            <para type="description">
            The severity of the log entry. Default value is Default.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.NewGcLogEntryCmdlet.MonitoredResource">
            <summary>
            <para type="description">
            Monitored Resource associated with the log. If not provided, we will default to "global" resource type
            ("custom.googleapis.com" in v1 service). This is what gcloud beta logging write uses.
            This indicates that the log is not associated with any specific resource.
            More information can be found at https://cloud.google.com/logging/docs/api/v2/resource-list
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.GetGcLogCmdlet">
            <summary>
            <para type="synopsis">
            Lists Stackdriver logs' names from a project.
            </para>
            <para type="description">
            Lists Stackdriver logs' names from a project. Will display logs' names from the default project if -Project is not used.
            A log is a named collection of log entries within the project (any log mus thave at least 1 log entry).
            To get log entries from a particular log, use Get-GcLogEntry cmdlet instead.
            </para>
            <example>
              <code>PS C:\> Get-GcLog</code>
              <para>This command gets logs from the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLog -Project "my-project"</code>
              <para>This command gets logs from project "my-project".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/basic-concepts#logs)">
            [Logs]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GetGcLogCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for logs in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.RemoveGcLogCmdlet">
            <summary>
            <para type="synopsis">
            Removes one or more Stackdriver logs from a project.
            </para>
            <para type="description">
            Removes one or more StackDrive logs from a project based on the names of the logs.
            All the entries in the logs will be deleted (a log have multiple log entries).
            </para>
            <example>
              <code>PS C:\> Remove-GcLog -LogName "test-log"</code>
              <para>This command removes "test-log" from the default project.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcLog -LogName "test-log" -Project "my-project"</code>
              <para>This command removes "test-log" from project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcLog -LogName "log1", "log2"</code>
              <para>This command removes "log1" and "log2" from the default project.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/logs_index)">
            [Log Entries and Logs]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.RemoveGcLogCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for log entries. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.RemoveGcLogCmdlet.LogName">
            <summary>
            <para type="description">
            The names of the logs to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.GetGcLogMetricCmdlet">
            <summary>
            <para type="synopsis">
            Retrieves StackDriver Log Metrics.
            </para>
            <para type="description">
            Retrieves one or more StackDriver Log Metrics.
            If -MetricName is not used, the cmdlet will return all the log metrics under the specified project
            (default project if -Project is not used). Otherwise, the cmdlet will return a list of metrics
            matching the names specified in -MetricName and will raise an error for any metrics that cannot be found.
            </para>
            <example>
              <code>PS C:\> Get-GcLogMetric</code>
              <para>This command retrieves all metrics in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogMetric -MetricName "metric1", "metric2" -Project "my-project"</code>
              <para>
              This command retrieves 2 metrics ("metric1" and "metric2") in the project "my-project".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/logs_based_metrics)">
            [Log Metrics]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GetGcLogMetricCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for log metrics in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GetGcLogMetricCmdlet.MetricName">
            <summary>
            <para type="description">
            The names of the log metrics to be retrieved.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.CreateOrUpdateGcLogMetricCmdlet">
            <summary>
            Base class for cmdlet that create or update log metrics (both API have the same parameters).
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrUpdateGcLogMetricCmdlet.Project">
            <summary>
            <para type="description">
            The project to create the metrics in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrUpdateGcLogMetricCmdlet.MetricName">
            <summary>
            <para type="description">
            The name of the metric. This name must be unique within the project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrUpdateGcLogMetricCmdlet.Description">
            <summary>
            <para type="description">
            The description of the metric.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.CreateOrUpdateGcLogMetricCmdlet.GetRequest(Google.Apis.Logging.v2.Data.LogMetric)">
            <summary>
            Given a log metric body, returns request that returns a LogMetric when executed.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.NewGcLogMetricCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new log metric.
            </para>
            <para type="description">
            Creates a new log metric. The metric will be created in the default project if -Project is not used.
            Will raise an error if the metric already exists.
            </para>
            <example>
              <code>PS C:\> New-GcLogMetric -MetricName "my-metric" -LogName "my-log"</code>
              <para>This command creates a metric to count the number of log entries in log "my-log".</para>
            </example>
            <example>
              <code>
              PS C:\> New-GcLogMetric -MetricName "my-metric" `
                                      -ResourceType "gce_instance"
                                      -After [DateTime]::Now().AddDays(1)
                                      -Project "my-project"
              </code>
              <para>
              This command creates a metric name "my-metric" in project "my-project" that counts every log entry
              of the resource type "gce_instance" that is created from tomorrow.
              </para>
            </example>
            <example>
              <code>
              PS C:\> New-GcLogMetric -MetricName "my-metric" -Filter 'textPayload = "textPayload"'
              </code>
              <para>
              This command creates a metric name "my-metric" that counts every log entry that matches the provided filter.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/logs_based_metrics)">
            [Log Metrics]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.SetGcLogMetricCmdlet">
            <summary>
            <para type="synopsis">
            Updates a log metric.
            </para>
            <para type="description">
            Updates a log metric. The cmdlet will create the metric if it does not exist.
            The default project will be used to search for the metric if -Project is not used.
            </para>
            <example>
              <code>PS C:\> Set-GcLogMetric -MetricName "my-metric" -LogName "my-log"</code>
              <para>This command updates the metric "my-metric" to count the number of log entries in log "my-log".</para>
            </example>
            <example>
              <code>
              PS C:\> Set-GcLogMetric -MetricName "my-metric" `
                                      -ResourceType "gce_instance"
                                      -After [DateTime]::Now().AddDays(1)
                                      -Project "my-project"
              </code>
              <para>
              This command updates the metric name "my-metric" in project "my-project" to count every log entry
              of the resource type "gce_instance" that is created from tomorrow.
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GcLogMetric -MetricName "my-metric" -Filter 'textPayload = "textPayload"'
              </code>
              <para>
              This command updates the metric name "my-metric" to count every log entry that matches the provided filter.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/logs_based_metrics)">
            [Log Metrics]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.RemoveGcLogMetricCmdlet">
            <summary>
            <para type="synopsis">
            Removes one or more log metrics from a project.
            </para>
            <para type="description">
            Removes one or more log metrics from a project based on the name of the metrics.
            If -Project is not specified, the default project will be used.
            </para>
            <example>
              <code>PS C:\> Remove-GcLogMetric -MetricName "my-metric"</code>
              <para>This command removes "my-metric" from the default project.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcLogMetric -MetricName "my-metric", "my-metric2" -Project "my-project"</code>
              <para>This command removes "my-metric" and "my-metric2" from project "my-project".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/view/logs_based_metrics)">
            [Log Metrics]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.RemoveGcLogMetricCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for log metrics in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.RemoveGcLogMetricCmdlet.MetricName">
            <summary>
            <para type="description">
            The names of the metrics to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.GetGcLogSinkCmdlet">
            <summary>
            <para type="synopsis">
            Retrieves Stackdriver Log Sinks.
            </para>
            <para type="description">
            Retrieves one or more Stackdriver Log Sinks.
            If -Sink is not used, the cmdlet will return all the sinks under the specified project
            (default project if -Project is not used). Otherwise, the cmdlet will return a list of sinks
            matching the sink names specified in -Sink and will raise an error for any sinks that cannot be found.
            </para>
            <example>
              <code>PS C:\> Get-GcLogSink</code>
              <para>This command retrieves all sinks in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcLogSink -Sink "sink1", "sink2" -Project "my-project"</code>
              <para>
              This command retrieves 2 sinks ("sink1" and "sink2") in the project "my-project".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/api/tasks/exporting-logs#about_sinks)">
            [Log Sinks]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GetGcLogSinkCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for sinks in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.GetGcLogSinkCmdlet.Sink">
            <summary>
            <para type="description">
            The names of the sinks to be retrieved.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet">
            <summary>
            Abstract class for cmdlet that create or update a log sink (both APIs have the same parameters).
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.LogEntryVersionFormat">
            <summary>
            Enum of version format for log entry.
            See https://cloud.google.com/logging/docs/api/reference/rest/v2/organizations.sinks#versionformat.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.LogEntryVersionFormat.V2">
            <summary>
            LogEntry version 2 format.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.LogEntryVersionFormat.V1">
            <summary>
            LogEntry version 1 format.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.Project">
            <summary>
            <para type="description">
            The project to create the sink in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.SinkName">
            <summary>
            <para type="description">
            The name of the sink to be created. This name must be unique within the project.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.GcsBucketDestination">
            <summary>
            <para type="description">
            The name of the Google Cloud Storage bucket that the sink will export the log entries to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.BigQueryDataSetDestination">
            <summary>
            <para type="description">
            The name of the Google BigQuery dataset that the the sink will export the log entries to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.PubSubTopicDestination">
            <summary>
            <para type="description">
            The name of the Google PubSub topic that the the sink will export the log entries to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.UniqueWriterIdentity">
            <summary>
            <para type="description">
            Determines the kind of IAM identity returned as writerIdentity in the new sink.
            If this value is not provided, then the value returned as writerIdentity is cloud-logs@google.com.
            Otherwise, it will be a unique service account.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Logging.CreateOrSetGcLogSinkCmdlet.GetRequest(Google.Apis.Logging.v2.Data.LogSink)">
            <summary>
            Given a log sink, returns either a create or update request that will be used by the cmdlet.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.NewGcLogSinkCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new log sink.
            </para>
            <para type="description">
            Creates a new log sink to export log entries. The sink will be created in the default project if -Project is not used.
            Will raise an error if the sink already exists.
            There are 3 possible destinations for the sink: Google Cloud Storage bucket, Google BigQuery dataset
            and Google Cloud PubSub topic. The destinations must be created and given appropriate permissions for
            log exporting (see https://cloud.google.com/logging/docs/export/configure_export_v2#destination_authorization)
            The cmdlet will not create the destinations.
            The identity of the writer of the logs will be cloud-logs@system.gserviceaccount.com by default
            if -UniqueWriterIdentity is not used.
            </para>
            <example>
              <code>PS C:\> New-GcLogSink -SinkName "my-sink" -GcsBucketDestination "my-bucket"</code>
              <para>
              This command creates a sink name "my-sink" that exports every log entry in the default project to the
              Google Cloud Storage bucket "my-bucket". The identity of the writer of the logs will be cloud-logs@system.gserviceaccount.com.
              </para>
            </example>
            <example>
              <code>
              PS C:\> New-GcLogSink -SinkName "my-sink" -BigQueryDataSetDestination "my_dataset" -LogName "my-log" -Project "my-project"
              </code>
              <para>
              This command creates a sink name "my-sink" that exports every log entry in the log "my-log" in the
              project "my-project" to the Google Cloud BigQuery dataset "my_dataset" (also in the project "my-project").
              The identity of the writer of the logs will be cloud-logs@system.gserviceaccount.com.
              </para>
            </example>
            <example>
              <code>
              PS C:\> New-GcLogSink -SinkName "my-sink" -PubSubTopicDestination "my_dataset" -Filter 'textPayload = "textPayload"' -UniqueWriterIdentity
              </code>
              <para>
              This command creates a sink name "my-sink" that exports every log entry that matches the provided filter to
              the Google Cloud PubSub topic "my-topic". The identity of the writer of the logs will be a unique service account.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/basic-concepts#sinks)">
            [Log Sinks]
            </para>
            <para type="link" uri="(https://cloud.google.com/logging/docs/export/using_exported_logs)">
            [Exporting Logs]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.SetGcLogSinkCmdlet">
            <summary>
            <para type="synopsis">
            Updates properties of a log sink. If the sink does not exist, the cmdlet will create the sink.
            </para>
            <para type="description">
            Updates properties of a log sink. If the sink does not exist, the cmdlet will create the sink. The cmdlet
            will use the default project if -Project is not used.
            </para>
            <para type="description">
            There are 3 possible destinations for the sink: Google Cloud Storage bucket, Google BigQuery dataset
            and Google Cloud PubSub topic. The destinations must be created and given appropriate permissions for
            log exporting (see https://cloud.google.com/logging/docs/export/configure_export_v2#destination_authorization)
            The cmdlet will not create the destinations.
            </para>
            <example>
              <code>PS C:\> Set-GcLogSink -SinkName "my-sink" -GcsBucketDestination "my-bucket"</code>
              <para>
              This command changes the destination of the sink name "my-sink" in the default project to "my-bucket".
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GcLogSink -SinkName "my-sink" -BigQueryDataSetDestination "my_dataset" -LogName "my-log" -Project "my-project"
              </code>
              <para>
              This command changes the destination of the sink name "my-sink" in the project "my-project" to the big query dataset "my_dataset".
              The sink will now only export log from "my-log".
              </para>
            </example>
            <example>
              <code>
              PS C:\> Set-GcLogSink -SinkName "my-sink" -Filter 'textPayload = "textPayload"' -UniqueWriterIdentity
              </code>
              <para>
              This command updates the filter of the log sink "my-sink" to 'textPayload = "textPayload"' and updates the
              writer identity of the log sink to a unique service account.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/basic-concepts#sinks)">
            [Log Sinks]
            </para>
            <para type="link" uri="(https://cloud.google.com/logging/docs/export/using_exported_logs)">
            [Exporting Logs]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.SetGcLogSinkCmdlet.GcsBucketDestination">
            <summary>
            <para type="description">
            The name of the Google Cloud Storage bucket that the sink will export the log entries to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.SetGcLogSinkCmdlet.BigQueryDataSetDestination">
            <summary>
            <para type="description">
            The name of the Google BigQuery dataset that the the sink will export the log entries to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.SetGcLogSinkCmdlet.PubSubTopicDestination">
            <summary>
            <para type="description">
            The name of the Google PubSub topic that the the sink will export the log entries to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.SetGcLogSinkCmdlet.UniqueWriterIdentity">
            <summary>
            <para type="description">
            Determines the kind of IAM identity returned as writerIdentity in the sink.
            If previously, the sink's writer identity is cloud-logs service account, then the writer identity of the sink will now
            be changed to a unique service account. If the sink already has a unique writer identity, then this has no effect.
            Note that if the old sink has a unique writer identity, it will be an error to set this to false.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Logging.RemoveGcLogSinkCmdlet">
            <summary>
            <para type="synopsis">
            Removes one or more log sinks from a project.
            </para>
            <para type="description">
            Removes one or more log sinks from a project based on the name of the log.
            If -Project is not specified, the default project will be used.
            </para>
            <example>
              <code>PS C:\> Remove-GcLogSink -SinkName "my-sink"</code>
              <para>This command removes "my-sink" from the default project.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcLogSink -SinkName "my-sink", "my-sink2" -Project "my-project"</code>
              <para>This command removes "my-sink" and "my-sink2" from project "my-project".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/logging/docs/export/using_exported_logs#sink-service-destination)">
            [Log Sinks]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.RemoveGcLogSinkCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for log sinks in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Logging.RemoveGcLogSinkCmdlet.SinkName">
            <summary>
            <para type="description">
            The names of the sinks to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Provider.CacheItem`1">
            <summary>
            A CacheItem will get an object from the given update function and continue to return that object for
            the duration of cacheLifetime. It will then make another call to the update function to get a new 
            version of the object. The default cache lifetime is one minute.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.CacheItem`1.Value">
            <summary>
            Get the value after applying the default update function
            if the value is out of date.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.CacheItem`1.#ctor(System.Func{`0},System.Nullable{System.TimeSpan})">
            <summary>
            Initialize a CacheItem with a cache reset time set to cacheLifetime
            and update function set to update.
            </summary>
            <param name="update">
            Update function that is used to update the value if cache is out of date.
            Default to null, which means GetValueWithUpdateFunction, GetLastValueWithoutUpdate
            and Value will return default value for type T.
            </param>
            <param name="cacheLifetime">Time span that the cache is valid for. Default to 1 minute.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.CacheItem`1.CacheOutOfDate">
            <summary>
            Returns true if the cache is out of date.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.CacheItem`1.GetValueWithUpdateFunction(System.Func{`0})">
            <summary>
            Get the value after applying an update function to the value
            if the value is out of date.
            </summary>
            <param name="updateFunc">The update function that is used to update _value.</param>
            <returns>Returns the updated value.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.CacheItem`1.GetLastValueWithoutUpdate">
            <summary>
            Get the last stored value without calling the update function.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.CacheItem`1.Reset">
            <summary>
            Resets the Cache to update at the next opportunity.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Provider.GoogleCloudStorageProvider">
            <summary>
            A powershell provider that connects to Google Cloud Storage.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Provider.GoogleCloudStorageProvider.GcsGetContentWriterDynamicParameters">
            <summary>
            Dynamic parameters for "Set-Content".
            </summary>
        </member>
        <member name="T:Google.PowerShell.Provider.GoogleCloudStorageProvider.GcsCopyItemDynamicParameters">
            <summary>
            Dynamic paramters for Copy-Item.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsObjectDynamicParameters">
            <summary>
            Dynamic paramters for New-Item with an object path.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsObjectDynamicParameters.File">
            <summary>
            <para type="description">
            Local path to the file to upload.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsObjectDynamicParameters.ContentType">
            <summary>
            <para type="description">
            Content type of the Cloud Storage object. e.g. "image/png" or "text/plain".
            </para>
            <para type="description">
            For file uploads, the type will be inferred based on the file extension, defaulting to
            "application/octet-stream" if no match is found. When passing object content via the
            -Contents parameter, the type will default to "text/plain; charset=utf-8".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsObjectDynamicParameters.PredefinedAcl">
            <summary>
            <para type="description">
            Provide a predefined ACL to the object. e.g. "publicRead" where the project owner gets
            OWNER access, and allUsers get READER access.
            </para>
            <para type="description">
            See: https://cloud.google.com/storage/docs/json_api/v1/objects/insert
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsBucketDynamicParameters">
            <summary>
            Dynamic paramters for New-Item with a bucket path.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsBucketDynamicParameters.Project">
            <summary>
            <para type="description">
            The name of the project associated with the command. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsBucketDynamicParameters.StorageClass">
            <summary>
            <para type="description">
            Storage class for the bucket. COLDLINE, DURABLE_REDUCED_AVAILABILITY, MULTI_REGIONAL, NEARLINE,
            REGIONAL or STANDARD. See https://cloud.google.com/storage/docs/storage-classes for more information.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsBucketDynamicParameters.Location">
            <summary>
            <para type="description">
            Location for the bucket. e.g. ASIA, EU, US.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsBucketDynamicParameters.DefaultBucketAcl">
            <summary>
            <para type="description">
            Default ACL for the bucket.
            "Private__" gives the bucket owner "OWNER" permission. All other permissions are removed.
            "ProjectPrivate" gives permission to the project team based on their roles. Anyone who is part of the team has "READER" permission.
            Project owners and project editors have "OWNER" permission. All other permissions are removed.
            "AuthenticatedRead" gives the bucket owner "OWNER" permission and gives all authenticated Google account holders "READER" permission.
            All other permissions are removed.
            "PublicRead" gives the bucket owner "OWNER" permission and gives all users "READER" permission. All other permissions are removed.
            "PublicReadWrite" gives the bucket owner "OWNER" permission and gives all user "READER" and "WRITER" permission.
            All other permissions are removed.
            </para>
            <para type="description">
            To set fine-grained (e.g. individual users or domains) ACLs using PowerShell, use Add-GcsBucketAcl cmdlets.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewGcsBucketDynamicParameters.DefaultObjectAcl">
            <summary>
            <para type="description">
            Default ACL for objects added to the bucket.
            "Private__" gives the object owner "OWNER" permission. All other permissions are removed.
            "ProjectPrivate" gives permission to the project team based on their roles. Anyone who is part of the team has "READER" permission.
            Project owners and project editors have "OWNER" permission. All other permissions are removed.
            "AuthenticatedRead" gives the object owner "OWNER" permission and gives all authenticated Google account holders "READER" permission.
            All other permissions are removed.
            "PublicRead" gives the object owner "OWNER" permission and gives all users "READER" permission. All other permissions are removed.
            "BucketOwnerRead" gives the object owner "OWNER" permission and the bucket owner "READER" permission. All other permissions are removed.
            "BucketOwnerFullControl" gives the object and bucket owners "OWNER" permission. All other permissions are removed.
            </para>
            <para type="description">
            To set fine-grained (e.g. individual users or domains) ACLs using PowerShell, use Add-GcsObjectAcl cmdlets.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Provider.GoogleCloudStorageProvider.GcsPath">
            <summary>
            The parsed structure of a path.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.Service">
            <summary>
            The Google Cloud Storage service.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.ResourceService">
            <summary>
            This service is used to get all the accessible projects.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.BucketModels">
            <summary>
            Maps the name of a bucket to a cache of data about the objects in that bucket.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.BucketCache">
            <summary>
            Maps the name of a bucket to a cached object describing that bucket.
            </summary>
        </member>
        <member name="F:Google.PowerShell.Provider.GoogleCloudStorageProvider.s_telemetryReporter">
            <summary>
            Reports on the usage of the provider.
            </summary>
        </member>
        <member name="P:Google.PowerShell.Provider.GoogleCloudStorageProvider.ActivityIdGenerator">
            <summary>
            A random number generator for progress bar ids.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetNewService">
            <summary>
            This methods returns a new storage service.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.InitializeDefaultDrives">
            <summary>
            Creates a default Google Cloud Storage drive named gs.
            </summary>
            <returns>A single drive named gs.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.Stop">
            <summary>
            Dispose the resources used by the provider. Specifically the services.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.IsValidPath(System.String)">
            <summary>
            Checks if a path is a legal string of characters. Shoudl pretty much always return null.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if GcsPath.Parse() can parse it.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.ItemExists(System.String)">
            <summary>
            PowerShell uses this to check if items exist.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.IsItemContainer(System.String)">
            <summary>
            PowerShell uses this to check if an item is a container. All drives, all buckets, objects that end
            with "/", and prefixes to objects are containers.
            </summary>
            <param name="path">The path of the item to check.</param>
            <returns>True if the item at the path is a container.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.HasChildItems(System.String)">
            <summary>
            Checks if a container actually contains items.
            </summary>
            <param name="path">The path to the container.</param>
            <returns>True if the container contains items.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetItem(System.String)">
            <summary>
            Writes the object describing the item to the output. Used by Get-Item.
            </summary>
            <param name="path">The path of the item to get.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetChildNames(System.String,System.Management.Automation.ReturnContainers)">
            <summary>
            Writes the names of the children of the container to the output. Used for tab-completion.
            </summary>
            <param name="path">The path to the container to get the children of.</param>
            <param name="returnContainers">The names of the children of the container.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetChildItemBucketHelper(Google.Apis.Storage.v1.Data.Bucket,System.Boolean)">
            <summary>
            Write out a bucket to the command line.
            If recurse is set to true, call GetChildItems on the bucket to process its children.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetChildItems(System.String,System.Boolean)">
            <summary>
            Writes the object descriptions of the items in the container to the output. Used by Get-ChildItem.
            </summary>
            <param name="path">The path of the container.</param>
            <param name="recurse">If true, get all descendents of the container, not just immediate children.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.NewItem(System.String,System.String,System.Object)">
            <summary>
            Creates a new item at the given path.
            </summary>
            <param name="path">The path of the item ot create.</param>
            <param name="itemTypeName">The type of item to create. "Directory" is the only special one.
            That will create an object with a name ending in "/".</param>
            <param name="newItemValue">The value of the item to create. We assume it is a string.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.CopyItem(System.String,System.String,System.Boolean)">
            <summary>
            Copies a Google Cloud Storage object or folder to another object or folder. Used by Copy-Item.
            </summary>
            <param name="path">The path to copy from.</param>
            <param name="copyPath">The path to copy to.</param>
            <param name="recurse">If true, will copy all decendent objects as well.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetContentReader(System.String)">
            <summary>
            Gets a content reader to read the contents of a downloaded Google Cloud Storage object.
            Used by Get-Contents.
            </summary>
            <param name="path">The path to the object to read.</param>
            <returns>A content reader of the contents of a given object.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetContentReaderDynamicParameters(System.String)">
            <summary>
            Required by IContentCmdletProvider, along with GetContentReader(string). Returns null because we
            have no need for dynamic parameters on Get-Content.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.GetContentWriter(System.String)">
            <summary>
            Gets a writer used to upload data to a Google Cloud Storage object. Used by Set-Content.
            </summary>
            <param name="path">The path of the object to upload to.</param>
            <returns>The writer.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.ClearContent(System.String)">
            <summary>
            Clears the content of an object. Used by Clear-Content.
            </summary>
            <param name="path">The path of the object to clear.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.RemoveItem(System.String,System.Boolean)">
            <summary>
            Deletes a Google Cloud Storage object or bucket. Used by Remove-Item.
            </summary>
            <param name="path">The path to the object or bucket to remove.</param>
            <param name="recurse">If true, will remove the desendants of the item as well. Required for a
            non-empty bucket.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.WaitDeleteTasks(System.Collections.Generic.List{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Waits on the list of delete tasks to compelete, updating progress as it does so.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.ListBucketsAsync(Google.Apis.CloudResourceManager.v1.Data.Project,System.Collections.Concurrent.BlockingCollection{Google.Apis.Storage.v1.Data.Bucket})">
            <summary>
            Retrieves all buckets from the specified project and adding them to the blocking collection.
            </summary>
            <param name="project">Project to retrieve buckets from.</param>
            <param name="collections">Blocking collection to add buckets to.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.PerformActionOnBucketAndOptionallyUpdateCache(System.Action{Google.Apis.Storage.v1.Data.Bucket})">
            <summary>
            If the BucketCache is not out of date, simply perform the action on each bucket.
            Otherwise, we update the cache and perform the action while doing that (for example,
            we can write the bucket to the command line as they become available instead of writing
            all at once).
            </summary>
            <param name="actionOnBucket">Action to be performed on each bucket if cache is out of date.</param>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.UpdateBucketCacheAndPerformActionOnBucket(System.Action{Google.Apis.Storage.v1.Data.Bucket})">
            <summary>
            Update BucketCache and perform action on each of the bucket while doing so.
            </summary>
            <param name="action">Action to be performed on each bucket.</param>
            <returns>Returns a dictionary where key is bucket name and value is the bucket.</returns>
        </member>
        <member name="M:Google.PowerShell.Provider.GoogleCloudStorageProvider.ClearCache">
            <summary>
            Clears the cache. Used in unit tests.
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.GetGcpsMessage">
            <summary>
            <para type="synopsis">
            Gets a Google Cloud PubSub message from a pull config subscription.
            </para>
            <para type="description">
            Gets a Google Cloud PubSub message from a pull config subscription.
            Will raise errors if the subscription does not exist. The default project will be used to search
            for the subscription if -Project is not used. If -AutoAck switch is supplied, each message
            received will be acknowledged automatically.
            If there is more than one message for the subscription, the cmdlet may not get all of them in one call.
            By default, the cmdlet will block until at least one message is returned.
            If -ReturnImmediately is used, the cmdlet will not block.
            </para>
            <example>
              <code>PS C:\> Get-GcpsMessage -Subscription "my-subscription"</code>
              <para>This command pulls down one or more messages from the subscription "my-subscription" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsMessage -Subscription "my-subscription" -ReturnImmediately</code>
              <para>
              This command pulls down one or more messages from the subscription "my-subscription" in the default project
              and it will not block even if no messages are returned.
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsMessage -Subscription "my-subscription" -Project "my-project" -MaxMessage 10</code>
              <para>
              This command pulls down a maximum of 10 messages from the subscription "my-subscription" in the project "my-project".
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsMessage -Subscription "my-subscription" -AutoAck</code>
              <para>
              This command pulls down one or more messages from the subscription "my-subscription" in the default project
              and sends an acknowledgement for each message.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/reference/rest/v1/PubsubMessage)">
            [PubSub Message]
            </para>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#receiving-pull-messages)">
            [Receiving Pull Messages]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsMessage.Project">
            <summary>
            <para type="description">
            The project to check for the subscription. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsMessage.Name">
            <summary>
            <para type="description">
            The name of the subscription to pull the messages from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsMessage.MaxMessages">
            <summary>
            <para type="description">
            The maximum number of messages that can be returned.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsMessage.AutoAck">
            <summary>
            <para type="description">
            If set, automatically send acknowledgement for each message received.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsMessage.ReturnImmediately">
            <summary>
            <para type="description">
            If set, the cmdlet will not block when there are no messages.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.PubSubMessageWithAckIdAndSubscription">
            <summary>
            Class that extends PubSub Message by adding AckId and Subscription fields.
            We added these fields to the PubSub Message to allow pipelining the results
            from Get-GcpsMessage to other cmdlets.
            </summary>
        </member>
        <member name="M:Google.PowerShell.PubSub.PubSubMessageWithAckIdAndSubscription.#ctor(Google.Apis.Pubsub.v1.Data.ReceivedMessage,System.String)">
            <summary>
            Given a received message (returned from a pull request from a subscription)
            and a subscription, construct a PubSub message with AckId and subscription.
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.PubSubMessageWithAckIdAndSubscription.AckId">
            <summary>
            The AckId of the message.
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.PubSubMessageWithAckIdAndSubscription.Subscription">
            <summary>
            The Subscription that this message belongs to.
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.NewGcpsMessage">
            <summary>
            <para type="synopsis">
            Creates a Google Cloud PubSub message.
            </para>
            <para type="description">
            Creates a Google Cloud PubSub message. The message created is intended to be used with
            Publish-GcpsMessage cmdlet to publish it to a topic. The message payload must not be empty;
            it must contain either a non-empty data field or at least one attribute.
            The cmdlet will base64-encode the message data.
            </para>
            <example>
              <code>PS C:\> New-GcpsMessage -Data "my-data"</code>
              <para>This command creates a new message with data "my-data".</para>
            </example>
            <example>
              <code>PS C:\> New-GcpsMessage -Data "my-data" -Attributes @{"key"="value"}</code>
              <para>
              This command creates a new message with data "my-data" and an attribute pair "key", "value".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/reference/rest/v1/PubsubMessage)">
            [PubSub Message]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsMessage.Data">
            <summary>
            <para type="description">
            The message payload. This will be base64-encoded by the cmdlet.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsMessage.Attributes">
            <summary>
            <para type="description">
            Optional attributes for this message.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.PublishGcpsMessage">
            <summary>
            <para type="synopsis">
            Publishes one or more PubSub messages to a topic.
            </para>
            <para type="description">
            Publishes one or more PubSub messages to a topic. Will raise errors if the topic does not exist.
            The cmdlet will search for the topic in the default project if -Project is not used.
            To publish more than one message, use -Message parameter with an array of messages constructed from New-GcpsMessage.
            Otherwise, use -Data and -Attribute parameters to publish a single message.
            </para>
            <example>
              <code>PS C:\> Publish-GcpsTopic -Topic "my-topic" -Data "This is a test." -Attributes @{"key"="value"}</code>
              <para>
              This command publishes a message with the specified data and attribute to topic "my-topic" in the default project.
              </para>
            </example>
            <example>
              <code>
              PS C:\> $message1 = New-GcpsMessage -Data "my-data"
              PS C:\> $message2 = New-GcpsMessage -Data "my-data2" -Attributes @{"key"="test"}
              PS C:\> Publish-GcpsTopic -Topic "my-topic" -Message $message1, $message2 -Project "my-project"
              </code>
              <para>
              This command publishes 2 messages to topic "my-topic" in the project "my-project".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/publisher#publish-messages-to-a-topic)">
            [Publishing Messages to a Topic]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.PublishGcpsMessage.Project">
            <summary>
            <para type="description">
            The project to check for topic. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.PublishGcpsMessage.Topic">
            <summary>
            <para type="description">
            The topic to which the messages will be published.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.PublishGcpsMessage.Data">
            <summary>
            <para type="description">
            The data message that will be published.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.PublishGcpsMessage.Attributes">
            <summary>
            <para type="description">
            Attributes of the message that will be published.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.PublishGcpsMessage.Message">
            <summary>
            <para type="description">
            Messages to be published. Use this parameter to publish one or more messages.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.ProcessGcpsAck.Project">
            <summary>
            <para type="description">
            The project that the subscription belongs to. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.ProcessGcpsAck.Subscription">
            <summary>
            <para type="description">
            The name of the subscription that the messages are pulled from.
            This parameter is used with -AckId parameter.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.ProcessGcpsAck.AckId">
            <summary>
            <para type="description">
            The list of AckIds of the pulled messages from the provided subscription.
            This parameter is used with -Name parameter.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.ProcessGcpsAck.InputObject">
            <summary>
            <para type="description">
            The list of PubSub messages that the cmdlet will send acknowledgement for.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.SendGcpsAck">
            <summary>
            <para type="synopsis">
            Sends acknowledgement for one or more PubSub messages.
            </para>
            <para type="description">
            Sends acknowledgement for one or more PubSub messages. Will raise errors if the subscription that the messages are pulled from
            does not exist. The cmdlet will search for the subscription and the messages in the default project if -Project is not used.
            To send acknowledgement for messages from a single subscription, use -Subscription to provide the name of the subscription
            and -AckId to provide a list of Ack Ids for that subscription. To send acknowledgement for messages objects returned by
            Get-GcpsMessage cmdlet, use the -InputObject parameter.
            </para>
            <example>
              <code>PS C:\> Send-GcpsAck -Subscription "my-subscription" -AckId "ackId"</code>
              <para>
              This command sends acknowledgement for message with Ack Id "ackId" from subscription "my-subscription" in the default project.
              </para>
            </example>
            <example>
              <code>PS C:\> Send-GcpsAck -Subscription "my-subscription" -AckId "ackId1", "ackId2" -Project "my-project"</code>
              <para>
              This command sends acknowledgement for messages with Ack Ids "ackId1" and "ackId2" from subscription"my-subscription"
              in the project "my-project".
              </para>
            </example>
            <example>
              <code>
              PS C:\> $messages = Get-GcpsMessage -Subscription "my-subscription"
              PS C:\> Send-GcpsAck -InputObject $messages
              </code>
              <para>
              This command sends acknowledgement for messages pulled from subscription "my-subscription"
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#receiving-pull-messages)">
            [Receiving and Sending Acknowledge for Pull Messages]
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.SetGcpsAckDeadline">
            <summary>
            <para type="synopsis">
            Setting acknowledgement deadline in seconds for one or more PubSub messages.
            </para>
            <para type="description">
            Setting acknowledgement deadline in seconds for one or more PubSub messages.
            Will raise errors if the subscription that the messages are pulled from does not exist.
            The cmdlet will search for the subscription and the messages in the default project if -Project is not used.
            To set the acknowledgement deadline for messages from a single subscription, use -Subscription to provide the name of the subscription
            and -AckId to provide a list of Ack Ids for that subscription. To send acknowledgement for messages objects returned by
            Get-GcpsMessage cmdlet, use the -InputObject parameter.
            </para>
            <example>
              <code>PS C:\> Set-GcpsAckDeadline -Subscription "my-subscription" -AckId "ackId" -AckDeadline 10</code>
              <para>
              This command sets the acknowledgement deadline for message with Ack Id "ackId" from subscription "my-subscription"
              in the default project to 10s.
              </para>
            </example>
            <example>
              <code>
                PS C:\> Set-GcpsAckDeadline -Subscription "my-subscription" `
                            -AckId "ackId1", "ackId2" -Project "my-project" -AckDeadline 10
              </code>
              <para>
              This command sets the acknowledgement deadline for messages with Ack Ids "ackId1" and "ackId2" from subscription
              "my-subscription" in the project "my-project" to 10s.
              </para>
            </example>
            <example>
              <code>
              PS C:\> $messages = Get-GcpsMessage -Subscription "my-subscription"
              PS C:\> Set-GcpsAckDeadline -InputObject $messages -AckDeadline 10
              </code>
              <para>
              This command sets the acknowledgement deadline for messages pulled from subscription "my-subscription" to 10s.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#ack_deadline)">
            [Pull Messages Acknowledgement Deadline]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.SetGcpsAckDeadline.AckDeadline">
            <summary>
            <para type="description">
            The ack deadline to be set (in seconds).
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.NewGcpsSubscription">
            <summary>
            <para type="synopsis">
            Creates a new Google Cloud PubSub subscription.
            </para>
            <para type="description">
            Creates a new Google Cloud PubSub subscription. Will raise errors if the subscription already exist.
            The cmdlet will create the subscription in the default project if -Project is not used.
            Subscription created will default to pull mode if -PushEndPoint is not used.
            </para>
            <example>
              <code>PS C:\> New-GcpsSubscription -Topic "my-topic" -Subscription "my-subscription"</code>
              <para>
              This command creates a new subscription called "my-subscription" that subscribes
              to "my-topic" in the default project.
              </para>
            </example>
            <example>
              <code>PS C:\> New-GcpsTopic -Topic "my-topic" -Subscription "my-subscription" -Project "my-project" -AckDeadline 30</code>
              <para>
              This command creates a new subscription called "my-subscription" that subscribes to "my-topic"
              in the "my-project" project with an acknowledgement deadline of 30s.
              </para>
            </example>
            <example>
              <code>
              PS C:\> New-GcpsTopic -Topic "my-topic" `
                                    -Subscription "my-subscription" `
                                    -PushEndpoint https://www.example.com/push `
              </code>
              <para>
              This command creates a new subscription called "my-subscription" that subscribes to "my-topic"
              in the "my-project" project with a push endpoint at https://www.example.com/push and the attribute
              "x-goog-version" of the endpoint set to "v1beta".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#overview-of-subscriptions)">
            [Subscription]
            </para>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions#PushConfig)">
            [Push Config]
            </para>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#ack_deadline)">
            [Ack Deadline]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsSubscription.Project">
            <summary>
            <para type="description">
            The project to create the subscription in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsSubscription.Subscription">
            <summary>
            <para type="description">
            The name of the subscription to be created. Subscription must not exist.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsSubscription.Topic">
            <summary>
            <para type="description">
            The name of the topic that the subscription belongs to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsSubscription.AckDeadline">
            <summary>
            <para type="description">
            The number of seconds after delivery, during which the subscriber must acknowledge the
            receipt of a pull or push message. By default, the deadline is 10 seconds.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsSubscription.PushEndpoint">
            <summary>
            <para type="description">
            A URL locating the endpoint to which messages should be pushed.
            For example, a Webhook endpoint might use "https://example.com/push".
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.GetGcpsSubscription">
            <summary>
            <para type="synopsis">
            Retrieves one or more Google Cloud PubSub subscriptions.
            </para>
            <para type="description">
            Retrieves one or more Google Cloud PubSub subscriptions. The cmdlet will search for subscriptions
            in the default project if -Project is not used. If -Topic is used, the cmdlet will only return
            subscriptions belonging to the specified topic. If -Subscription is used, the cmdlet will only return
            subscriptions whose names match the subscriptions' names provided.
            </para>
            <example>
              <code>PS C:\> Get-GcpsSubscription</code>
              <para> This command retrieves all subscriptions in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsSubscription -Topic "my-topic" -Project "my-project"</code>
              <para> This command retrieves all subscriptions that belong to topic "my-topic" in the project "my-project".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsSubscription -Subscription "subscription1", "subscription2"</code>
              <para> This command retrieves subscriptions "subscription1" and "subscription2" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsSubscription -Subscription "subscription1", "subscription2" -Topic "my-topic"</code>
              <para> This command retrieves subscriptions "subscription1" and "subscription2" in the topic "my-topic".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#overview-of-subscriptions)">
            [Subscription]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsSubscription.Project">
            <summary>
            <para type="description">
            The project to check for subscriptions. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsSubscription.Subscription">
            <summary>
            <para type="description">
            The names of the subscriptions to be retrieved.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsSubscription.Topic">
            <summary>
            <para type="description">
            The topic to check for subscriptions.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.PubSub.GetGcpsSubscription.GetSubscriptions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a list of subscription names, writes the corresponding subscriptions.
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.SetGcpsSubscriptionConfig">
            <summary>
            <para type="synopsis">
            Changes the config of a subscription.
            </para>
            <para type="description">
            Changes the config of a subscription from push to pull and vice versa. The cmdlet can also be used to
            change the endpoint of a push subscription. Will raise error if the subscription cannot be found.
            No errors will be raised if a subscription with a pull config is set to pull config again or if a subscription
            with push config is set to the same endpoint.
            </para>
            <example>
              <code>PS C:\> Set-GcpsSubscriptionConfig -Subscription "my-subscription" -PullConfig</code>
              <para> This command sets the config of subscription "my-subscription" in the default project to pull config.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsSubscription -Topic "my-topic" | Set-GcpsSubscriptionConfig -PullConfig</code>
              <para> This command sets the config of all subscriptions of topic "my-topic" to pull config by pipelining.</para>
            </example>
            <example>
              <code>
              PS C:\> Set-GcpsSubscriptionConfig -Subscription "my-subscription" -PushEndpoint https://www.example.com -Project "my-project"
              </code>
              <para>
              This command sets the config of subscription "my-subscription" in the project "my-project" to
              a push config with endpoint https://www.example.com.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#overview-of-subscriptions)">
            [Subscription]
            </para>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions#PushConfig)">
            [Push Config]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.SetGcpsSubscriptionConfig.Project">
            <summary>
            <para type="description">
            The project that the config's subscription belongs to. If not set via PowerShell parameter processing,
            will default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.SetGcpsSubscriptionConfig.Subscription">
            <summary>
            <para type="description">
            The name of the subscription that the config belongs to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.SetGcpsSubscriptionConfig.PushEndpoint">
            <summary>
            <para type="description">
            A URL locating the endpoint to which messages should be pushed.
            For example, a Webhook endpoint might use "https://example.com/push".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.SetGcpsSubscriptionConfig.PullConfig">
            <summary>
            <para type="description">
            If set, the cmdlet will change config of the subscription to a pull config.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.RemoveGcpsSubscription">
            <summary>
            Removes Google Cloud PubSub subscriptions.
            <para type="description">
            Removes one or more Gooogle Cloud PubSub subscriptions. Will raise errors if the subscriptions do not exist.
            The cmdlet will delete the subscriptions in the default project if -Project is not used.
            </para>
            <example>
              <code>PS C:\> Remove-GcpsSubscription -Subscription "my-subscription"</code>
              <para>This command removes subscription "my-subscription" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcpsTopic -Subscription "subscription1", "subscription2" -Project "my-project"</code>
              <para>
              This command removes 2 topics ("subscription1" and "subscription1") in the project "my-project".
              </para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsSubscription -Topic "my-topic" | Remove-GcpsSubscription</code>
              <para>
              This command removes all subscriptions to topic "my-topic" by pipelining from Get-GcpsSubscription.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/subscriber#delete)">
            [Deleting a Subscription]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.RemoveGcpsSubscription.Project">
            <summary>
            <para type="description">
            The project to check for subscriptions. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.RemoveGcpsSubscription.Subscription">
            <summary>
            <para type="description">
            The names of the subscriptions to be removed. Subscriptions must exist.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.GcpsCmdlet">
            <summary>
            Base class for Google Cloud PubSub cmdlets.
            </summary>
        </member>
        <member name="M:Google.PowerShell.PubSub.GcpsCmdlet.GetProjectPrefixForTopic(System.String,System.String)">
            <summary>
            Prefix projects/{project name}/topics/{topic} to topicName if not present.
            </summary>
        </member>
        <member name="M:Google.PowerShell.PubSub.GcpsCmdlet.GetProjectPrefixForSubscription(System.String,System.String)">
            <summary>
            Prefix projects/{project name}/subscriptions/{subscriptions} to subscriptionName if not present.
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.NewGcpsTopic">
            <summary>
            <para type="synopsis">
            Creates new Google Cloud PubSub topics.
            </para>
            <para type="description">
            Creates one or more Gooogle Cloud PubSub topics. Will raise errors if the topics already exist.
            The cmdlet will create the topics in the default project if -Project is not used.
            </para>
            <example>
              <code>PS C:\> New-GcpsTopic -Topic "my-topic"</code>
              <para>This command creates a new topic called "my-topic" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> New-GcpsTopic -Topic "topic1", "topic2" -Project "my-project"</code>
              <para>
              This command creates 2 topics ("topic1" and "topic2") in the project "my-project".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/publisher#create-a-topic)">
            [Creating a Topic]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsTopic.Project">
            <summary>
            <para type="description">
            The project to create the topics in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.NewGcpsTopic.Topic">
            <summary>
            <para type="description">
            The names of the topics to be created. Topics must not exist.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.GetGcpsTopic">
            <summary>
            <para type="synopsis">
            Retrieves Google Cloud PubSub topics.
            </para>
            <para type="description">
            Retrieves one or more Gooogle Cloud PubSub topics.
            If -Topic is not used, the cmdlet will return all the topics under the specified project
            (default project if -Project is not used). Otherwise, the cmdlet will return a list of topics
            matching the topic names specified in -Topic and will raise an error for any topic that cannot be found.
            </para>
            <example>
              <code>PS C:\> Get-GcpsTopic</code>
              <para>This command retrieves all topics in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcpsTopic -Topic "topic1", "topic2" -Project "my-project"</code>
              <para>
              This command retrieves 2 topics ("topic1" and "topic2") in the project "my-project".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/publisher#list-topics-in-your-project)">
            [Listing a Topic]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsTopic.Project">
            <summary>
            <para type="description">
            The project to check for topics. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.GetGcpsTopic.Topic">
            <summary>
            <para type="description">
            The names of the topics to be retrieved.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.PubSub.RemoveGcpsTopic">
            <summary>
            <para type="synopsis">
            Removes Google Cloud PubSub topics.
            </para>
            <para type="description">
            Removes one or more Gooogle Cloud PubSub topics. Will raise errors if the topics do not exist.
            The cmdlet will delete the topics in the default project if -Project is not used.
            </para>
            <example>
              <code>PS C:\> Remove-GcpsTopic -Topic "my-topic"</code>
              <para>This command removes topic "my-topic" in the default project.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcpsTopic -Topic "topic1", "topic2" -Project "my-project"</code>
              <para>
              This command removes 2 topics ("topic1" and "topic2") in the project "my-project".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/pubsub/docs/publisher#delete)">
            [Deleting a Topic]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.RemoveGcpsTopic.Project">
            <summary>
            <para type="description">
            The project to remove the topics in. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.PubSub.RemoveGcpsTopic.Topic">
            <summary>
            <para type="description">
            The names of the topics to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.GetGcSqlBackupRunCmdlet">
            <summary>
            <para type="synopsis">
            Retrieves a resource containing information about a backup run, or lists all backup runs for an instance.
            </para>
            <para type="description">
            Retrieves a resource containing information about a backup run, or lists all backup runs for an instance.
            This is decided by if the "Id" parameter is filled or not.
            </para>
            <example>
              <code>PS C:\> Get-GcSqlBackupRun "myInstance"</code>
              <para>Gets a list of backup runs for the instance "myInstance".</para>
              <para>If successful, the command returns a list of backupruns the instance has.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcSqlBackupRun "myInstance" "1234"</code>
              <para>Gets the resource for the backup run with ID "1234" from instance "myInstance".</para>
              <para>If successful, the command returns the relevant backup run.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/sql/docs/backup-recovery/backups)">[Overview of Backups]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlBackupRunCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlBackupRunCmdlet.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name. 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlBackupRunCmdlet.Id">
            <summary>
            <para type="description">
            The ID of the Backup Run we want to get 
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.RemoveGcSqlBackupRunCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a specified backup from a Cloud SQL instance.
            </para>
            <para type="description">
            Deletes a specified backup from a Cloud SQL instance.
            </para>
            <example>
              <code>PS C:\> Remove-GcSqlBackupRun "myInstance" "1234"</code>
              <para>Removes the backup with ID "1234" from the instance "myInstance".</para>
              <para>If successful, the command doesn't return anything.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcSqlBackupRun $myBackup</code>
              <para>Removes the backup identified by the resource $myBackup.</para>
              <para>If successful, the command doesn't return anything.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/backup)">
              [Managing Backups]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/backup-recovery/backups)">
              [Overview of Backups]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlBackupRunCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlBackupRunCmdlet.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name. 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlBackupRunCmdlet.Id">
            <summary>
            <para type="description">
            The ID of the Backup Run we want to delete
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlBackupRunCmdlet.Backup">
            <summary>
            <para type="description">
            The BackupRun that describes the backup we want to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.GcSqlCmdlet">
            <summary>
            Base class for Google Cloud SQL-based cmdlets. 
            </summary>
        </member>
        <member name="M:Google.PowerShell.Sql.GcSqlCmdlet.WaitForSqlOperation(Google.Apis.SQLAdmin.v1beta4.Data.Operation)">
            <summary>
            Library method to wait for an SQL operation to finish.
            </summary>
            <param name="op">
            The SQL operation we want to wait for.
            </param>
            <returns>
            The finished operation resource.
            </returns>
        </member>
        <member name="T:Google.PowerShell.Sql.GetGcSqlFlagsCmdlet">
            <summary>
            <para type="synopsis">
            Lists all available database flags for Google Cloud SQL instances.
            </para>
            <para type="description">
            Lists all available database flags for instances.
            </para>
            <example>
              <code>PS C:\> Get-GcSqlFlags</code>
              <para>Gets a list of database flags available for instances.</para>
            </example>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.GetGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Retrieves a resource containing information about a Cloud SQL instance, or lists all instances in a project.
            </para>
            <para type="description">
            Retrieves a resource containing the information for the specified Cloud SQL instance, 
            or lists all instances in a project.
            This is determined by if Instance is specified or not.
            </para>
            <example>
              <code>PS C:\> Get-GcSqlInstance</code>
              <para>Gets a list of instances in the project set in gcloud config.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcSqlInstance "myInstance"</code>
              <para>Gets a resource for the instance named "myInstance" in our project.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlInstanceCmdlet.Name">
            <summary>
            <para type="description">
            Cloud SQL instance name. 
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.AddGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new Cloud SQL instance.
            </para>
            <para type="description">
            Creates the Cloud SQL instance resource in the specified project.
            </para>
            <example>
              <code>PS C:\> Add-GcSqlInstance $myInstance</code>
              <para>Adds the instance represented by $myInstance to our project set in gcloud config.</para>
              <para>If successful, the command returns a resource for the added instance.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcSqlInstance "gootoso" -Project "myproject"</code>
              <para>Adds a default instance named "gootoso" to the project "myproject"</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/setup)">
              [Setting up Instances]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlInstanceCmdlet.InstanceConfig">
            <summary>
            <para type="description">
            The instance resource, which can be created with New-GcSqlInstanceConfig.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlInstanceCmdlet.Name">
            <summary>
            <para type="description">
            The instance resource, which can be created with New-GcSqlInstanceConfig.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.Sql.AddGcSqlInstanceCmdlet.CreateDefaultInstance">
            <summary>
            Creates a default Google Cloud SQL Database instance.
            The defaults here are hard-coded, and might become out of date with
            the defaults provided by Pantheon the Cloud SDK, etc.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.RemoveGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a Cloud SQL instance.
            </para>
            <para type="description">
            Deletes the specified Cloud SQL instance. Warning: This deletes all data inside of it as
            well.
            </para>
            <example>
              <code>PS C:\> Remove-GcSqlInstance "myInstance"</code>
              <para>Removes the instance called "myInstance" from our project.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcSqlInstance $myInstance</code>
              <para>Removes the instance represented by the resource $myInstance from our project.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlInstanceCmdlet.Instance">
            <summary>
            <para type="description">
            The name of the instance to be deleted.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlInstanceCmdlet.InstanceObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the instance we want to remove.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Exports data from a Cloud SQL instance
            to a Google Cloud Storage bucket as a MySQL dump or CSV file. 
            </para>
            <para type="description">
            Exports data from the specified Cloud SQL instance
            to a Google Cloud Storage bucket as a MySQL dump or CSV file.
            Defaults to a SQL file, but if the CSV Parameter set is used it will export as
            a CSV file.
            </para>
            <example>
              <code>PS C:\> Export-GcSqlInstance "myInstance" "gs://bucket/file.gz"</code>
              <para>
              Exports the databases inside the instance "myInstance" to the Cloud Storage bucket file "gs://bucket/file.gz"
              as a MySQL dump file.
              </para>
            </example>
            <example>
              <code>
                PS C:\> Export-GcSqlInstance "myInstance" "gs://bucket/file.csv" "SELECT * FROM data.table"
              </code>
              <br></br>
              <para>
              Exports the databases inside the instance "myInstance" to the Cloud Storage bucket file "gs://bucket/file.csv"
              as a CSV file with the select query "SELECT * FROM data.table"
              </para>
            </example>
            <example>
              <code>PS C:\> Export-GcSqlInstance "myInstance" "gs://bucket/file.csv" -Database "myData","myData2"</code>
              <br></br>
              <para>
              Exports the databases "myData" and "myData2" inside the instance "myInstance"
              to the Cloud Storage bucket file "gs://bucket/file.gz" as a MySQL dump file.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/import-export)">
              [How-To: Importing and Exporting]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/import-export/)">
              [Overview of Importing and Exporting]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            /// </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet.Instance">
            <summary>
            <para type="description">
            The name of the instance to have data exported.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet.CloudStorageDestination">
            <summary>
            <para type="description">
             The path to the file in Google Cloud Storage where the export will be stored.
             The URI is in the form "gs://bucketName/fileName."
            </para><para type="description">
             If the file already exists, the operation will fail.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet.SchemaOnly">
            <summary>
            <para type="description">
            Export only schemas.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet.SelectQuery">
            <summary>
            <para type="description">
            The select query used to extract the data. 
            If this is used, a CSV file will be exported, rather than SQL.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet.Database">
            <summary>
            <para type="description">
            Databases (for example, "guestbook" or "orders") from which the export is made.
            If fileType is SQL and no database is specified, all databases are exported. 
            If fileType is CSV, you can optionally specify at most one database to export.
            If exporting as CSV and selectQuery also specifies the database, this field will be ignored.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ExportGcSqlInstanceCmdlet.Table">
            <summary>
            <para type="description">
            Tables to export, or that were exported, from the specified database.
            If you specify tables, specify one and only one database.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Imports data into a Cloud SQL instance from a MySQL dump 
            or CSV file stored either in a Google Cloud Storage bucket or on your local machine.
            </para>
            <para type="description">
            Imports data into a Cloud SQL instance from a MySQL dump 
            or CSV file stored either in a Google Cloud Storage bucket or on your local machine.
            
            Only one database may be imported from a MySQL file,
            and only one table may be imported from a CSV file.
            </para>
            <para type="description">
            WARNING: Standard charging rates apply if a file is imported from your local machine.
            A Google Cloud Storage bucket will be set up, uploaded to, and imported from during the import process.
            It is deleted after the upload and/or import process fails or is completed
            </para>
            <example>
              <code>
                PS C:\> Import-GcSqlInstance "myInstance" "gs://bucket/file" "myData"
              </code>
              <para>
              Imports the MySQL dump file at "gs://bucket/file" into the already
              existing database "myData" in the instance "myInstance".
              </para>
            </example>
            <example>
              <code>
                PS C:\> Import-GcSqlInstance "myInstance" "gs://bucket/file.csv" "myData" "myTable"
              </code>
              <para>
              Imports the CSV file at "gs://bucket/file.csv" into the table "myTable" in the already
              existing database "myData" in the instance "myInstance".
              </para>
            </example>
            <example>
              <code>
                PS C:\> Import-GcSqlInstance "myInstance" "C:\Users\Bob\file.csv" "myData" "myTable" 
              </code>
              <para>
              Imports the CSV file at "C:\Users\Bob\file.csv" into the table "myTable" in the already
              existing database "myData" in the instance "myInstance".
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/import-export)">
              [How-To: Importing and Exporting]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/import-export/)">
              [Overview of Importing and Exporting]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the active cloud sdk config for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.Instance">
            <summary>
            <para type="description">
            The name of the instance to have data exported to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.ImportFilePath">
            <summary>
            <para type="description">
             The path to the file where the import file is stored.
             A Google Cloud Storage path is in the form "gs://bucketName/fileName".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.Database">
            <summary>
            <para type="description">
             The database inside of the Instance (for example, "guestbook" or "orders") to which the import is made.
             It must already exist.
            </para>
            <para type="description">
             If filetype is SQL and no database is specified, it is assumed that the database is specified in the
             file to be imported. The filetype of the file is assumed to be the corresponding parameter set.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.DestinationTable">
            <summary>
            <para type="description">
             The table to which CSV data is imported. Must be specified for a CSV file.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.Column">
            <summary>
            <para type="description">
             The columns of the CSV data to import. If not specified, all columns are imported.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.GcsFileUploader">
            <summary>
            Class containing the local file upload methods.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.GcsFileUploader.CreateBucket(System.String)">
            <summary>
            Creates a Google Cloud Storage bucket.
            </summary>
            <param name="bucketName"></param>
            <returns></returns>
        </member>
        <member name="M:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.GcsFileUploader.UploadLocalFile(System.String,System.String)">
            <summary>
            Uploads a local file to a given bucket. The object's name will be the same as
            provided file path. (e.g. "C:\foo\bar.txt".)
            </summary>
        </member>
        <member name="M:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.GcsFileUploader.AdjustAcl(Google.Apis.Storage.v1.Data.Object,System.String)">
            <summary>
            Adjusts the ACL for an uploaded object so that a SQL instance can access it.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.GcsFileUploader.DeleteObject(Google.Apis.Storage.v1.Data.Object)">
            <summary>
            Deletes the bucket object from the Google Cloud Storage bucket.
            </summary>
        </member>
        <member name="M:Google.PowerShell.Sql.ImportGcSqlInstanceCmdlet.GcsFileUploader.DeleteBucket(Google.Apis.Storage.v1.Data.Bucket)">
            <summary>
            Deletes a Google Cloud Storage bucket.
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.RestartGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Restarts a Cloud SQL Instance.
            </para>
            <para type="description">
            Restarts the specified Cloud SQL Instance.
            </para>
            <para type="description">
            If a Project is specified, it will restart the specified Instance in that project. Otherwise, the Project 
            defaults to the Cloud SDK config for properties. 
            </para>
            <example>
              <code>PS C:\> Restart-GcSqlInstance -Project "testing" -Instance "test1"</code>
              <para>Restart the SQL instance "test1" from the Project "testing."</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestartGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project in which the instance resides.
            Defaults to the Cloud SDK config for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestartGcSqlInstanceCmdlet.Instance">
            <summary>
            <para type="description">
            The name/ID of the Instance resource to restart.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestartGcSqlInstanceCmdlet.InstanceObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the Instance we want to restart.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.StartGcSqlReplicaCmdlet">
            <summary>
            <para type="synopsis">
            Starts a Cloud SQL Replica.
            </para>
            <para type="description">
            Starts the specified Cloud SQL Replica.
            </para>
            <para type="description">
            If a Project is specified, it will start the specified Replica in that Project. Otherwise, starts the replica
            in the Cloud SDK config project. 
            </para>
            <example>
              <code>PS C:\> Start-GcSqlReplica -Project "testing" -Replica "testRepl1"</code>
              <para>Start the SQL Replica "testRepl1" from the Project "testing."</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/replica)">[Replica Instances]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.StartGcSqlReplicaCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project in which the instance Replica resides.
            Defaults to the Cloud SDK config for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.StartGcSqlReplicaCmdlet.Replica">
            <summary>
            <para type="description">
            The name/ID of the Replica resource to start.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.StartGcSqlReplicaCmdlet.ReplicaObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the Replica we want to start.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.StopGcSqlReplicaCmdlet">
            <summary>
            <para type="synopsis">
            Stops a Cloud SQL Replica.
            </para>
            <para type="description">
            Stops the specified Cloud SQL Replica.
            </para>
            <para type="description">
            If a Project is specified, it will stop the specified Replica in that Project. Otherwise, stops the replica
            in the Cloud SDK config project. 
            </para>
            <example>
              <code>PS C:\> Stop-GcSqlReplica -Project "testing" -Replica "testRepl1"</code>
              <para>Stop the SQL Replica "testRepl1" from the Project "testing."</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/replica)">[Replica Instances]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.StopGcSqlReplicaCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project in which the instance Replica resides.
            Defaults to the Cloud SDK config for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.StopGcSqlReplicaCmdlet.Replica">
            <summary>
            <para type="description">
            The name/ID of the Replica resource to stop.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.StopGcSqlReplicaCmdlet.ReplicaObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the Replica we want to stop.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.ConvertToGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Convert a Cloud SQL Replica to an SQL Instance.
            </para>
            <para type="description">
            Convert the specified Cloud SQL Replica to a stand-alone Instance.
            </para>
            <para type="description">
            If a Project is specified, it will promote the specified Replica in that Project. Otherwise, promotes the 
            replica in the Cloud SDK config project. 
            </para>
            <example>
              <code>PS C:\> ConvertTo-GcSqlInstance -Project "testing" -Replica "testRepl1"</code>
              <para>Convert the SQL Replica "testRepl1" from the Project "testing."</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/replica)">[Replica Instances]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ConvertToGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project in which the instance Replica resides.
            Defaults to the Cloud SDK config for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ConvertToGcSqlInstanceCmdlet.Replica">
            <summary>
            <para type="description">
            The name/ID of the Replica resource to promote.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ConvertToGcSqlInstanceCmdlet.ReplicaObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the Replica we want to promote.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.RestoreGcSqlInstanceBackupCmdlet">
            <summary>
            <para type="synopsis">
            Restores a backup of a Cloud SQL Instance.
            </para>
            <para type="description">
            Restores the specified backup of the specified Cloud SQL Instance.
            </para>
            <para type="description">
            If a BackupInstance is specified, it will restore the specified backup run of that instance to the specified
            Instance. Otherwise, it will assume the backup instance is the same as the specified Instance. 
            </para>
            <para type="description">
            If a Project is specified, it will restore the specified backup in that project. Otherwise, restores the 
            backup in the Cloud SDK config project. 
            </para>
            <example>
              <code>
                PS C:\> Restore-GcSqlInstanceBackup -Project "testing" -BackupRunId 1243244 -Instance "testRepl1"
              </code>
              <para>
              Restores backup run with id 0 of the SQL Instance "testRepl1" from the Project "testing" to the same SQL
              Instance.
              </para>
            </example>
            <example>
              <code>
                PS C:\> Restore-GcSqlInstanceBackup -Project "testing" -BackupRunId 0 -Instance "testRepl1" `
                                                    -BackupInstance "testRepl2"
              </code>
              <para>
              Restores backup run with id 0 of the SQL Instance "testRepl2" from the Project "testing" to the SQL Instance 
              "testRepl1" (which must be in the same project).
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/backup)">
              [Managing Backups]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/backup-recovery/backups)">
              [Overview of Backups]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/backup-recovery/restore)">
              [Overview of Restoring an instance]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestoreGcSqlInstanceBackupCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project in which the instances to backup to and from reside.
            Defaults to the Cloud SDK config for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestoreGcSqlInstanceBackupCmdlet.BackupRunId">
            <summary>
            <para type="description">
            The id of the BackupRun to restore to. 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestoreGcSqlInstanceBackupCmdlet.Instance">
            <summary>
            <para type="description">
            The name/ID of Instance we are restoring the backup to. 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestoreGcSqlInstanceBackupCmdlet.InstanceObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the Instance we are restoring the backup to. 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RestoreGcSqlInstanceBackupCmdlet.BackupInstance">
            <summary>
            <para type="description">
            The name/ID of Instance we are backing up from. 
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet">
            <summary>
            <para type="synopsis">
            Updates settings of a Cloud SQL instance, or patches them.
            </para>
            <para type="description">
            Updates settings of the specified Cloud SQL instance, or patches them. 
            If “Update” is true, it will update them. Otherwise it patches.
            </para>
            <para>
            Caution: If "Update" is true, this is not a partial update, so you must include values for all the settings that you want to retain.
            </para>
            <example>
              <code>
                PS C:\> Update-GcSqlInstance "myInstance" `
                    15 -MaintenanceWindowDay 1 -MaintenanceWindowHour "22:00" -Project "testing" 
              </code>
              <para>
              Patches the SQL Instance "myInstance" (with setting version of 15)
              so that it can have maintenance on Monday at 22:00.
              </para>
            </example>
            <example>
              <code>
                PS C:\> Update-GcSqlInstance "myInstance" 18 -Update
              </code>
              <para>
              Updates the SQL Instance "myInstance" (with and setting version of 18)
              so that its settings default.
              </para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.Instance">
            <summary>
            <para type="description">
            The name of the instance to be updated/patched.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.SettingsVersion">
            <summary>
            <para type="description">
            The version of instance settings. Required field to make sure concurrent updates are handled properly.
            During update, use the most recent settingsVersion value for the instance and do not try to update this value.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.InstanceObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the instance we want to update/patch.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.Update">
            <summary>
            <para type="description">
            If true, updates the instance with only the specified parameters. All other parameters revert back to the default.
            If false, follows patch semantics and patches the instance. Unspecified parameters will stay the same.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.Tier">
            <summary>
            <para type="description">
            The tier of service for this instance, for example "db-n1-standard-1".
            Pricing information is available at https://cloud.google.com/sql/pricing.
            Get-GcSqlTiers will also tell you what tiers are available for your project.
            If not specified, this will be acquired from the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.DatabaseReplicationEnabled">
            <summary>
            <para type="description">
            Configuration specific to read replica instances. Indicates whether replication is enabled or not.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.Policy">
            <summary>
            <para type="description">
            The activation policy specifies when the instance is activated;
            it is applicable only when the instance state is RUNNABLE. Can be ALWAYS, or NEVER. 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.BackupBinaryLogEnabled">
            <summary>
            <para type="description">
            Whether binary log is enabled. If backup configuration is disabled, binary log must be
            disabled as well.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.BackupEnabled">
            <summary>
            <para type="description">
            Whether the backup configuration is enabled or not.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.BackupStartTime">
            <summary>
            <para type="description">
            Start time for the daily backup configuration in UTC timezone in the 24 hour format - HH:MM
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.DataDiskSizeGb">
            <summary>
            <para type="description">
            The size of data disk, in GB. The data disk size minimum is 10 GB.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.DatabaseFlag">
            <summary>
            <para type="description">
            The database flags passed to the instance at startup.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.IpConfigAuthorizedNetwork">
            <summary>
            <para type="description">
            The list of external networks that are allowed to connect to the instance using the IP.
            In CIDR notation, also known as 'slash' notation (e.g. "192.168.100.0/24").
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.IpConfigIpv4Enabled">
            <summary>
            <para type="description">
            Whether the instance should be assigned an IP address or not.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.IpConfigRequireSsl">
            <summary>
            <para type="description">
            Whether the mysqld should default to “REQUIRE X509” for users connecting over IP.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.LocationPreferenceFollowGae">
            <summary>
            <para type="description">
            The AppEngine application to follow, it must be in the same region as the Cloud SQL instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.LocationPreferenceZone">
            <summary>
            <para type="description">
            The preferred Compute Engine Zone (e.g. us-central1-a, us-central1-b, etc.).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.MaintenanceWindowDay">
            <summary>
            <para type="description">
            Day of the week (1-7) starting monday that the instance may be restarted for maintenance purposes.
            Applies only to Second Generation instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.MaintenanceWindowHour">
            <summary>
            <para type="description">
            Hour of day (0-23) that the instance may be restarted for maintenance purposes.
            Applies only to Second Generation instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.StorageAutoResize">
            <summary>
            <para type="description">
            Configuration to increase storage size automatically.
            Applies only to Second Generation instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.UpdateGcSqlInstanceCmdlet.DiskType">
            <summary>
            <para type="description">
            The type of data disk: PD_SSD (default) or PD_HDD.
            Applies only to Second Generation instances.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.InvokeGcSqlInstanceFailoverCmdlet">
            <summary>
            <para type="synopsis">
            Failover a Cloud SQL Instance.
            </para>
            <para type="description">
            Failover the specified Cloud SQL Instance to its failover replica instance.
            </para>
            <para type="description">
            If a Project is specified, it will failover the specified Instance in that Project. Otherwise, failsover the 
            Instance in the Cloud SDK config project. 
            </para>
            <example>
              <code>PS C:\> Invoke-GcSqlInstanceFailover -Project "testing" -Instance "test1"</code>
              <para>Failover the SQL Instance "test1" in the Project "testing."</para>
            </example>
            <example>
              <code>PS C:\> Invoke-GcSqlInstanceFailover -Project "testing" -Instance "test1" - SettingsVersion 3</code>
              <para>Failover the SQL Instance "test1" with current settings version 3 in the Project "testing."</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/replica)">[Replica Instances]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.InvokeGcSqlInstanceFailoverCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project in which the Instance resides.
            Defaults to the Cloud SDK config project if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.InvokeGcSqlInstanceFailoverCmdlet.Instance">
            <summary>
            <para type="description">
            The name/ID of the Instance resource to failover.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.InvokeGcSqlInstanceFailoverCmdlet.InstanceObject">
            <summary>
            <para type="description">
            The DatabaseInstance that describes the Instance we want to failover.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.InvokeGcSqlInstanceFailoverCmdlet.SettingsVersion">
            <summary>
            <para type="description">
            The current settings version of the Instance.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet">
            TODO: Update the configuration cmdlets once the patch/update problem is figured out.
            Currently they are only meant for Add-GcSqlInstance
            <summary>
            <para type="synopsis">
            Makes a new Google Cloud SQL instance description.
            </para>
            <para type="description"> 
            Makes a new Google Cloud SQL instance description.
            Use Add-GcSqlInstance to instantiate the instance within a project.
            </para>
            <example>
              <code>PS C:\> New-GcSqlInstanceConfig "myInstance" $mySettings</code>
              <para>Creates an instance resource with name "myInstance" and settings $mySettings</para>
            </example>
            <example>
              <code>PS C:\> New-GcSqlInstanceConfig "myInstance" $mySettings -ReplicaConfig $myRepl</code>
              <para>
              Creates an instance resource with name "myInstance", settings $mySettings, and replica
              configuration $myRepl
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/setup)">
              [How-To: Setting up Instances]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/instance-settings)">
              [Instance Settings]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.Project">
            <summary>
            <para type="description">
            The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.Name">
            <summary>
            <para type="description">
            Name of the Cloud SQL instance. This does not include the project ID. 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.SettingConfig">
            <summary>
            <para type="description">
            The user settings. Can be created with New-GcSqlSettingConfig.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.DatabaseVer">
            <summary>
            <para type="description">
            The database engine type and version. This cannot be changed after instance creation.
            </para>
            <para type="description">
            e.g. "MYSQL_5_6" or "MYSQL_5_7". Defaults to "MYSQL_5_7".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.MasterInstanceName">
            <summary>
            <para type="description">
            The name of the instance which will act as master in the replication setup. 
            Should only be used for read-replica instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.FailoverReplica">
            <summary>
            <para type="description">
            The name of the failover replica. If specified at instance creation, a failover replica is created for the instance.
            This property is applicable only to Second Generation instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.ReplicaConfig">
            <summary>
            <para type="description">
            The ReplicaConfiguration created by New-GcSqlInstanceReplicaConfig.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceConfigCmdlet.Region">
            <summary>
            <para type="description">
             The geographical region. Can be us-central1, asia-east1, or europe-west1.
            </para>
            <para type="description">
             Defaults to us-central1 and cannot be changed after instance creation.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet">
            <summary>
            <para type="synopsis">
            Creates a configuration for a replicaConfiguration. 
            </para>
            <para type="description"> 
            Creates a configuration for a replicaConfiguration. 
            Can be pipelined into New-GcSqlInstanceConfig.
            </para>
            <para type="description">
            NOTE: If any parameter is incorrect/invalid, this cmdlet not fail. You will only
            receive an error once you try to update or add an instance with this configuration to your
            project.
            </para>
            <example>
              <code>PS C:\> New-GcSqlInstanceReplicaConfig</code>
              <para>Creates a basic replica configuration resource with default values.</para>
            </example>
            <example>
              <code>PS C:\> New-GcSqlInstanceReplicaConfig -MySqlRetryInterval 10</code>
              <para>Creates a basic replica configuration resource with a retry interval of 10 seconds.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/setup)">
              [Setting up Instances]
            </para>
            <para type="link" uri="(https://cloud.google.com/tools/powershell/docs/sql/replica)">
              [Replica Instances]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/replication/)">
              [Replication Options]
            </para>
            <para type="link" uri="(https://cloud.google.com/sql/docs/replication/tips)">
              [Replication Requirements and Tips]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.FailoverTarget">
            <summary>
            <para type="description">
            Specifies if the replica is the failover target.  If the field is set to true the
            replica will be designated as a failover replica. In case the master instance fails,
            the replica instance will be promoted as the new master instance.
            </para>
            <para type="description"> 
            Only one replica can be specified as failover target, and the replica has to be in
            different zone with the master instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlCaCert">
            <summary>
            <para type="description">
            PEM representation of the trusted CA’s x509 certificate.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlClientCert">
            <summary>
            <para type="description">
            PEM representation of the slave’s x509 certificate.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlClientKey">
            <summary>
            <para type="description">
             PEM representation of the slave’s private key. 
             The corresponding public key is encoded in the client’s certificate.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlRetryInterval">
            <summary>
            <para type="description">
            Seconds to wait between connect retries. The default is 60 seconds.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlDumpPath">
            <summary>
            <para type="description">
            Path to a SQL dump file in Google Cloud Storage from which the slave instance is to be created. 
            The URI is in the form "gs://bucketName/fileName". Compressed gzip files (.gz) are also supported. 
            Dumps should have the binlog co-ordinates from which replication should begin. 
            This can be accomplished by setting --master-data to 1 when using mysqldump.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlHeartbeatPeriod">
            <summary>
            <para type="description">
            Interval in milliseconds between replication heartbeats.
            Defaults to 20 seconds.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlPassword">
            <summary>
            <para type="description">
            The password for the replication connection.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlSslCipher">
            <summary>
            <para type="description">
            A list of permissible ciphers to use for SSL encryption.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlUser">
            <summary>
            <para type="description">
            The username for the replication connection.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlInstanceReplicaConfigCmdlet.MySqlVerifyCertificate">
            <summary>
            <para type="description">
            Whether or not to check the master’s Common Name value
            in the certificate that it sends during the SSL handshake.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.GetGcSqlOperationCmdlet">
            <summary>
            <para type="synopsis">
            Retrieves an instance operation that has been performed on an instance,
            or a list of operations used on the instance.
            </para>
            <para type="description">
            Retrieves an instance operation that has been performed on an instance,
            or a list of operations used on the instance. This is decided by if you provide a Name or not.
            </para>
            <example>
              <code>PS C:\> Get-GcSqlOperation -Instance "myInstance"</code>
              <para>Gets a list of operations done on the instance "myInstance".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcSqlOperation -Name "1d402..."</code>
              <para>Gets a resource for the operation with ID "1d402...".</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlOperationCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlOperationCmdlet.Name">
            <summary>
            <para type="description">
            Instance operation ID/name.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlOperationCmdlet.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet">
            <summary>
            <para type="synopsis">
            Makes a new Google Cloud SQL Instance Settings configuration for a second generation instance.
            </para>
            <para type="description"> 
            Creates a settings configuration specified by the passed in parameters. 
            Meant to be only for Second generation instances. 
            Can be pipelined into New-GcSqlInstanceConfig.
            </para>
            <para type="description">
            NOTE: If any parameter is incorrect/invalid, this cmdlet not fail. You will only
            receive an error once you try to update or add an instance with this configuration to your
            project.
            </para>
            <example>
              <code>PS C:\> New-GcSqlSettingConfig "db-n1-standard-1"</code>
              <para>Creates a settings resource with tier "db-n1-standard-1".</para>
            </example>
            <example>
              <code>
                PS C:\> New-GcSqlSettingConfig "db-n1-standard-1" -MaintenanceWindowDay 1 -MaintenanceWindowHour "22:00"
              </code>
              <para>
              Creates a settings resource with tier "db-n1-standard-1", and a maintenance window on monday at 22:00.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/sql/docs/instance-settings)">
              [Instance Settings]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.TierConfig">
            <summary>
            <para type="description">
            The tier of service for this instance, for example "db-n1-standard-1".
            Pricing information is available at https://cloud.google.com/sql/pricing.
            Get-GcSqlTiers will also tell you what tiers are available for your project.
            Defaults to "db-n1-standard-1"
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.Policy">
            <summary>
            <para type="description">
            The activation policy specifies when the instance is activated;
            it is applicable only when the instance state is RUNNABLE. Can be ALWAYS, or NEVER. 
            Defaults to ALWAYS
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.BinaryLogEnabled">
            <summary>
            <para type="description">
            Whether binary log is enabled.
            If backup configuration is disabled, binary log must be disabled as well.
            Defaults to true for non-replica instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.BackupConfigEnabled">
            <summary>
            <para type="description">
            Whether the backup configuration is enabled or not.
            Defaults to true for non-replica instances.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.BackupConfigStartTime">
            <summary>
            <para type="description">
            Start time for the daily backup configuration in UTC timezone in the 24 hour format - HH:MM
            Defaults to 22:00
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.DataDiskSizeGb">
            <summary>
            <para type="description">
            The size of data disk, in GB. The data disk size minimum is 10 GB. (Defaults to 50). 
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.DatabaseFlag">
            <summary>
            <para type="description">
            The database flags passed to the instance at startup.
            Defaults to an empty list.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.IpConfigAuthorizedNetwork">
            <summary>
            <para type="description">
            The list of external networks that are allowed to connect to the instance using the IP.
            In CIDR notation, also known as 'slash' notation (e.g. "192.168.100.0/24").
            May include other ipConfiguration params, but unsure.
            Defaults to an empty list.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.IpConfigIpv4Enabled">
            <summary>
            <para type="description">
            Whether the instance should be assigned an IP address or not.
            Defaults to false.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.IpConfigRequireSsl">
            <summary>
            <para type="description">
            Whether the mysqld should default to “REQUIRE X509” for users connecting over IP.
            Defaults to false.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.LocationPreferenceFollowGae">
            <summary>
            <para type="description">
            The AppEngine application to follow, it must be in the same region as the Cloud SQL instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.LocationPreferenceZone">
            <summary>
            <para type="description">
            The preferred Compute Engine Zone (e.g. us-central1-a, us-central1-b, etc.).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.MaintenanceWindowDay">
            <summary>
            <para type="description">
            Day of the week (1-7) starting monday that the instance may be restarted for maintenance purposes.
            Defaults to 5 (Friday).
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.MaintenanceWindowHour">
            <summary>
            <para type="description">
            Hour of day (0-23) that the instance may be restarted for maintenance purposes.
            Defaults to 22;
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.StorageAutoResize">
            <summary>
            <para type="description">
            Configuration to increase storage size automatically.
            The default value is false.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.NewGcSqlSettingConfigCmdlet.DiskType">
            <summary>
            <para type="description">
            The type of data disk: PD_SSD (default) or PD_HDD.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.GetGcSqlSslCmdlet">
            <summary>
            <para type="synopsis">
            Retrieves a particular SSL certificate, or lists the current SSL certificates for an instance.
            Does not include the private key- for the private key must be saved from the response to initial creation.
            </para>
            <para type="description">
            Retrieves the specified SSL certificate, or lists the current SSL certificates for that instance.
            This is determined by if an Sha1Fingerprint is specified or not.
            Does not include the private key.
            </para>
            <example>
              <code>PS C:\> Get-GcSqlSslCert "myInstance"</code>
              <para>Gets a list of SSL Certificates for the instance "myInstance".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcSqlSslCert $myInstance</code>
              <para>Gets a list of SSL Certificates for the instance stored in $myInstance.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcSqlSslCert "myInstance" "myFinger"</code>
              <para>
              Get a resource for the SSL Certificate identified by the Sha1Fingerprint "myFinger" for the instance "myInstance".
              </para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlSslCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlSslCmdlet.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlSslCmdlet.Sha1Fingerprint">
            <summary>
            <para type="description">
            Sha1 FingerPrint for the SSL Certificate.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GetGcSqlSslCmdlet.InstanceObject">
            <summary>
            <para type="description">
            An instance resource that you want to get the SSL certificates from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.AddGcSqlSslCmdlet">
            <summary>
            <para type="synopsis">
            Creates an SSL certificate and returns it along with the private key and server certificate authority. 
            The new certificate is not usable until the instance is restarted for first-generation instances.
            </para>
            <para type="description">
            Creates an SSL certificate inside the given instance and returns it along with the private key and server certificate authority.
            The new certificate is not usable until the instance is restarted for first-generation instances
            </para>
            <example>
              <code>PS C:\> Add-GcSqlSslCert "myInstance" "myCert"</code>
              <para>Adds the SSL Certificate called "myCert" to the instance "myInstance".</para>
            </example>
            <example>
              <code>PS C:\> $myInstance | Add-GcSqlSslCert "myCert"</code>
              <para>Adds the SSL Certificate called "myCert" to the instance stored in $myInstance.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlSslCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlSslCmdlet.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlSslCmdlet.CommonName">
            <summary>
            <para type="description">
            Distinct name for the certificate being added to the instance.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlSslCmdlet.InstanceObject">
            <summary>
            <para type="description">
            The Instance we want to add an SSL Certificate to.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.RemoveGcSqlSslCmdlet">
            <summary>
            <para type="synopsis">
            Deletes the SSL certificate. 
            The change will not take effect until the instance is restarted for first-generation instances.
            </para>
            <para type="description">
            Deletes the SSL certificate for the instance.
            </para>
            <example>
              <code>PS C:\> Remove-GcSqlSslCert "myInstance" "myFinger"</code>
              <para>
              Removes the SSL Certificate identified with the sha1Fingerprint "myFinger" from the instance "myInstance".
              </para>
            </example>
            <example>
              <para>Removes the SSL Certificate stored in "myInstance".</para>
              <code>PS C:\> Remove-GcSqlSslCert "myInstance"</code>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlSslCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlSslCmdlet.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlSslCmdlet.Sha1Fingerprint">
            <summary>
            <para type="description">
            Sha1 FingerPrint for the SSL Certificate you want to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.RemoveGcSqlSslCmdlet.Cert">
            <summary>
            <para type="description">
            The SSL Certificate that describes the SSL Certificate to remove.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.AddGcSqlSslEphemeralCmdlet">
            <summary>
            <para type="synopsis">
            Generates a short-lived X509 certificate containing the provided public key
            and signed by a private key specific to the target instance.
            Users may use the certificate to authenticate as themselves when connecting to the database. 
            </para>
            <para type="description">
            Generates a short-lived X509 certificate containing the provided public key
            and signed by a private key specific to the target instance.
            Users may use the certificate to authenticate as themselves when connecting to the database. 
            </para>
            <example>
              <code>
                PS C:\> Add-GcSqlSslEphemeral "myInstance" "-----BEGIN PUBLIC KEY-----..."
              </code>
              <para>Adds an ephemeral SSL Certificate to the instance "myInstance"</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlSslEphemeralCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlSslEphemeralCmdlet.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.AddGcSqlSslEphemeralCmdlet.PublicKey">
            <summary>
            <para type="description">
            PEM encoded public key to include in the signed certificate.
            Should be RSA or EC. Line endings should be LF.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.ResetGcSqlSslConfig">
            <summary>
            <para type="synopsis">
            Deletes all client certificates and generates a new server SSL certificate for the instance. 
            </para>
            <para type="description">
            Deletes all client certificates and generates a new server SSL certificate for the instance. 
            The changes will not take effect until the instance is restarted. 
            Existing instances without a server certificate will need to call this once to set a server certificate.
            </para>
            <example>
              <code>PS C:\> Reset-GcSqlSslConfig "myInstance"</code>
              <para>Resets the SSL Certificates for the "myInstance" instance.</para>
            </example>
            <example>
              <code>PS C:\> Reset-GcSqlSslConfig $instance</code>
              <para>
              Resets the SSL Certificates for the instance represented by the resource stored in $instance.
              </para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ResetGcSqlSslConfig.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ResetGcSqlSslConfig.Instance">
            <summary>
            <para type="description">
            Cloud SQL instance name.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.ResetGcSqlSslConfig.InstanceObject">
            <summary>
            <para type="description">
            An instance resourve that you want to reset the SSL Configuration for.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.Sql.GcSqlTiersCmdlet">
            <summary>
            <para type="synopsis">
            Lists all available service tiers for Google Cloud SQL, for example D1, D2. 
            </para>
            <para type="description">
            Lists all available service tiers for Google Cloud SQL, for example D1, D2. 
            Pricing information is available at https://cloud.google.com/sql/pricing.
            </para>
            <example>
              <code>PS C:\> Get-GcSqlTiers</code>
              <para>Gets a list of tiers available for the project set in gcloud config.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.Sql.GcSqlTiersCmdlet.Project">
            <summary>
            <para type="description">
            Name of the project. Defaults to the Cloud SDK configuration for properties if not specified.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GcsAclCmdlet">
            <summary>
            Base class for ACL-related Cloud Storage cmdlets. Contains inherited parameters to be used in derived classes.
            Derived classes are expected to have 6 different parameter sets, corresponding to the scope of the ACL being
            added/removed. e.g. User, Group, Team, etc.
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsAclCmdlet.User">
            <summary>
            <para type="description">
            The user holding the access control. This can either be an email or a user ID.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsAclCmdlet.Group">
            <summary>
            <para type="description">
            The group holding the access control. This can either be an email or an ID.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsAclCmdlet.Domain">
            <summary>
            <para type="description">
            The domain holding the access control.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsAclCmdlet.ProjectNumber">
            <summary>
            <para type="description">
            The project number of the project holding the access control.
            This is used in conjunction with -ProjectRole parameter to specify a project team.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsAclCmdlet.ProjectRole">
            <summary>
            <para type="description">
            The project role (in the project specified by -ProjectNumber) holding the access control.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsAclCmdlet.AllUsers">
            <summary>
            <para type="description">
            If set, the access control will be for all user.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsAclCmdlet.AllAuthenticatedUsers">
            <summary>
            <para type="description">
            If set, the access control will be for all authenticated user.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsAclCmdlet.GetAclEntity">
            <summary>
            Returns the entity holding the access control based on the cmdlet parameters.
            Entity will be of the form user-userId, user-emailAddress, group-groupId,
            group-emailAddress, project-role-projectNumber, allUsers or allAuthenticatedUsers.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.AddGcsBucketAcl">
            <summary>
            <para type="synopsis">
            Add an access control to a Google Cloud Storage bucket.
            </para>
            <para type="description">
            Add an access control to a Google Cloud Storage bucket for an entity.
            Entity can be user ID, user email address, project team, group ID,
            group email address, all users or all authenticated users.
            The roles that can be assigned to an entity are Reader, Writer and Owner.
            User must have access to the bucket.
            </para>
            <example>
              <code>PS C:\> Add-GcsBucketAcl -Role Reader -Bucket "my-bucket" -User user@example.com</code>
              <para>Adds reader access control to bucket "my-bucket" for user user@example.com.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcsBucketAcl -Role Writer -Bucket "my-bucket" -Domain example.com</code>
              <para>Adds writer access control to bucket "my-bucket" for the domain example.com.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcsBucketAcl -Role Owner -Bucket "my-bucket" -AllUsers</code>
              <para>Adds owner access control to bucket "my-bucket" for all users.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcsBucketAcl -Role Owner -Bucket "my-bucket" -ProjectRole Owners -ProjectNumber 3423432</code>
              <para>Adds owner access control to bucket "my-bucket" for all owners of project 3423432.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls)">
            [Bucket Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.AddGcsBucketAcl.Name">
            <summary>
            <para type="description">
            The name of the bucket that the access control will be applied to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.AddGcsBucketAcl.Role">
            <summary>
            <para type="description">
            The role of the access control.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GetGcsBucketAcl">
            <summary>
            <para type="synopsis">
            Gets all the access controls of a Google Cloud Storage bucket.
            </para>
            <para type="description">
            Gets all the access controls of a Google Cloud Storage bucket. 
            User must have access to the bucket.
            </para>
            <example>
              <code>PS C:\> Get-GetGcsBucketAcl -Bucket "my-bucket"</code>
              <para>Gets all access controls of bucket "my-bucket".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls)">
            [Bucket Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsBucketAcl.Name">
            <summary>
            <para type="description">
            The name of the bucket that we retrieves the access controls from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.RemoveGcsBucketAcl">
            <summary>
            <para type="synopsis">
            Removes an access control from a Google Cloud Storage bucket.
            </para>
            <para type="description">
            Removes an access control from a Google Cloud Storage bucket for an entity.
            Entity can be user ID, user email address, project team, group ID,
            group email address, all users or all authenticated users.
            The roles that can be assigned to an entity are Reader, Writer and Owner.
            User must have access to the bucket. Assumes the entity already
            have an access control for the bucket.
            </para>
            <example>
              <code>PS C:\> Remove-GcsBucketAcl -Bucket "my-bucket" -User user@example.com</code>
              <para>Removes access control to bucket "my-bucket" for user user@example.com.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsBucketAcl -Bucket "my-bucket" -Domain example.com</code>
              <para>Removes access control to bucket "my-bucket" for the domain example.com.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsBucketAcl -Bucket "my-bucket" -AllUsers</code>
              <para>Removes access control to bucket "my-bucket" for all users.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsBucketAcl -Bucket "my-bucket" -ProjectRole Owners -ProjectNumber 3423432</code>
              <para>Removes access control to bucket "my-bucket" for all owners of project 3423432.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls)">
            [Bucket Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsBucketAcl.Name">
            <summary>
            <para type="description">
            The name of the bucket that the access control will be removed from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.AddGcsObjectAcl">
            <summary>
            <para type="synopsis">
            Add an access control to a Google Cloud Storage object.
            </para>
            <para type="description">
            Add an access control to a Google Cloud Storage object for an entity.
            Entity can be user ID, user email address, project team, group ID,
            group email address, all users or all authenticated users.
            The roles that can be assigned to an entity are Reader, Writer and Owner.
            User must have access to the object.
            </para>
            <example>
              <code>PS C:\> Add-GcsObjectAcl -Role Reader -Bucket "my-bucket" -ObjectName "my-object" -User user@example.com</code>
              <para>Adds reader access control to the object "my-object" in bucket "my-bucket" for user user@example.com.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcsObjectAcl -Role Writer -Bucket "my-bucket" -ObjectName "my-object"  -Domain example.com</code>
              <para>Adds writer access control to the object "my-object" in bucket "my-bucket" for the domain example.com.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcsObjectAcl -Role Owner -Bucket "my-bucket" -ObjectName "my-object"  -AllUsers</code>
              <para>Adds owner access control to the object "my-object" in bucket "my-bucket" for all users.</para>
            </example>
            <example>
              <code>
              PS C:\> Add-GcsObjectAcl -Role Owner -Bucket "my-bucket" -ObjectName "my-object"  -ProjectRole Owners -ProjectNumber 3423432
              </code>
              <para>
              Adds owner access control to the object "my-object" in bucket "my-bucket" for all owners of project 3423432.
              </para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls)">
            [Object Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.AddGcsObjectAcl.Bucket">
            <summary>
            <para type="description">
            The name of the bucket that the access control will be applied to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.AddGcsObjectAcl.ObjectName">
            <summary>
            <para type="description">
            The name of the object that the access control will be applied to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.AddGcsObjectAcl.Role">
            <summary>
            <para type="description">
            The role of the access control.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GetGcsObjectAcl">
            <summary>
            <para type="synopsis">
            Gets all the access controls of a Google Cloud Storage object.
            </para>
            <para type="description">
            Gets all the access controls of a Google Cloud Storage object. 
            User must have access to the object.
            </para>
            <example>
              <code>PS C:\> Get-GcsObjectAcl -Bucket "my-bucket" -ObjectName "my-object"</code>
              <para>Gets all access controls of the object "my-object" in bucket "my-bucket".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls)">
            [Object Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsObjectAcl.Bucket">
            <summary>
            <para type="description">
            The name of the bucket that we retrieves the access controls from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsObjectAcl.ObjectName">
            <summary>
            <para type="description">
            The name of the object that we retrieves the access controls from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.RemoveGcsObjectAcl">
            <summary>
            <para type="synopsis">
            Removes an access control from a Google Cloud Storage object.
            </para>
            <para type="description">
            Removes an access control from a Google Cloud Storage object for an entity.
            Entity can be user ID, user email address, project team, group ID,
            group email address, all users or all authenticated users.
            The roles that can be assigned to an entity are Reader, Writer and Owner.
            User must have access to the bucket. Assumes the entity already
            have an access control for the bucket.
            </para>
            <example>
              <code>PS C:\> Remove-GcsObjectAcl -Bucket "my-bucket" -ObjectName "my-object" -User user@example.com</code>
              <para>Removes access control to the object "my-object" in bucket "my-bucket" for user user@example.com.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsObjectAcl -Bucket "my-bucket" -ObjectName "my-object" -Domain example.com</code>
              <para>Removes access control to the object "my-object" in bucket "my-bucket" for the domain example.com.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsObjectAcl -Bucket "my-bucket" -ObjectName "my-object" -AllUsers</code>
              <para>Removes access control to the object "my-object" in bucket "my-bucket" for all users.</para>
            </example>
            <example>
              <code>
              PS C:\> Remove-GcsObjectAcl -Bucket "my-bucket" -ObjectName "my-object" -ProjectRole Owners -ProjectNumber 3423432
              </code>
              <para>Removes access control to the object "my-object" in bucket "my-bucket" for all owners of project 3423432.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls)">
            [Object Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsObjectAcl.Bucket">
            <summary>
            <para type="description">
            The name of the bucket that the access control will be removed from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsObjectAcl.ObjectName">
            <summary>
            <para type="description">
            The name of the object that the access control will be removed from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.AddGcsDefaultObjectAcl">
            <summary>
            <para type="synopsis">
            Add a default access control to a Google Cloud Storage bucket.
            </para>
            <para type="description">
            Add a default access control to a Google Cloud Storage bucket for an entity.
            The default access control will be aplied to a new object when no access control is provided.
            Entity can be user ID, user email address, project team, group ID,
            group email address, all users or all authenticated users.
            The roles that can be assigned to an entity are Reader, Writer and Owner.
            User must have access to the bucket.
            </para>
            <example>
              <code>PS C:\> Add-GcsDefaultObjectAcl -Role Reader -Bucket "my-bucket" -User user@example.com</code>
              <para>Adds reader default access control to bucket "my-bucket" for user user@example.com.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcsDefaultObjectAcl -Role Writer -Bucket "my-bucket" -Domain example.com</code>
              <para>Adds writer default access control to bucket "my-bucket" for the domain example.com.</para>
            </example>
            <example>
              <code>PS C:\> Add-GcsDefaultObjectAcl -Role Owner -Bucket "my-bucket" -AllUsers</code>
              <para>Adds owner default access control to bucket "my-bucket" for all users.</para>
            </example>
            <example>
              <code>
              PS C:\> Add-GcsDefaultObjectAcl -Role Owner -Bucket "my-bucket" -ProjectRole Owners -ProjectNumber 3423432
              </code>
              <para>Adds owner default access control to bucket "my-bucket" for all owners of project 3423432.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls)">
            [Default Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.AddGcsDefaultObjectAcl.Name">
            <summary>
            <para type="description">
            The name of the bucket that the access control will be applied to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.AddGcsDefaultObjectAcl.Role">
            <summary>
            <para type="description">
            The role of the access control.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GetGcsDefaultObjectAcl">
            <summary>
            <para type="synopsis">
            Gets all the default access controls of a Google Cloud Storage object.
            </para>
            <para type="description">
            Gets all the default access controls of a Google Cloud Storage object. 
            User must have access to the object.
            </para>
            <example>
              <code>PS C:\> Get-GcsDefaultObjectAcl -Bucket "my-bucket" -ObjectName "my-object"</code>
              <para>Gets all default access controls of the object "my-object" in bucket "my-bucket".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls)">
            [Default Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsDefaultObjectAcl.Name">
            <summary>
            <para type="description">
            The name of the bucket that we retrieves the access controls from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.RemoveGcsDefaultObjectAcl">
            <summary>
            <para type="synopsis">
            Removes a default access control from a Google Cloud Storage bucket.
            </para>
            <para type="description">
            Removes a default access control from a Google Cloud Storage bucket for an entity.
            Entity can be user ID, user email address, project team, group ID,
            group email address, all users or all authenticated users.
            The roles that can be assigned to an entity are Reader, Writer and Owner.
            User must have access to the bucket. Assumes the entity already
            have an access control for the bucket.
            </para>
            <example>
              <code>PS C:\> Remove-GcsDefaultObjectAcl -Bucket "my-bucket" -User user@example.com</code>
              <para>Removes default access control to bucket "my-bucket" for user user@example.com.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsDefaultObjectAcl -Bucket "my-bucket" -Domain example.com</code>
              <para>Removes default access control to bucket "my-bucket" for the domain example.com.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsDefaultObjectAcl -Bucket "my-bucket" -AllUsers</code>
              <para>Removes default access control to bucket "my-bucket" for all users.</para>
            </example>
            <example>
              <code>PS C:\> Remove-GcsDefaultObjectAcl -Bucket "my-bucket" -ProjectRole Owners -ProjectNumber 3423432</code>
              <para>Removes default access control to bucket "my-bucket" for all owners of project 3423432.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-control/lists)">
            [Access Control Lists (ACLs)]
            </para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls)">
            [Default Access Controls]
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsDefaultObjectAcl.Name">
            <summary>
            <para type="description">
            The name of the bucket that the access control will be removed from.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GetGcsBucketCmdlet">
            <summary>
            <para type="synopsis">
            Gets Google Cloud Storage buckets
            </para>
            <para type="description">
            If a name is specified, gets the Google Cloud Storage bucket with the given name. The gcloud user must
            have access to view the bucket.
            </para>
            <para type="description">
            If a name is not specified, gets all Google Cloud Storage buckets owned by a project. The project can
            be specifed. If it is not, the project in the active Cloud SDK configuration will be used. The gcloud
            user must have access to view the project.
            </para>
            <example>
              <code>PS C:\> Get-GcsBucket "widget-co-logs"</code>
              <para>Get the bucket named "widget-co-logs".</para>
            </example>
            <example>
              <code>PS C:\> Get-GcsBucket -Project "widget-co"</code>
              <para>Get all buckets for project "widget-co".</para>
            </example>
            <example>
              <code>Get-GcsBucket</code>
              <para>Get all buckets for current project in the active gcloud configuration.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsBucketCmdlet.Name">
            <summary>
            <para type="description">
            The name of the bucket to return.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsBucketCmdlet.Project">
            <summary>
            <para type="description">
            The project to check for Storage buckets. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.NewGcsBucketCmdlet">
            <summary>
            <para type="synopsis">
            Creates a new Google Cloud Storage bucket.
            </para>
            <para type="description">
            Creates a new Google Cloud Storage bucket. Bucket names must be globally unique. No two projects may
            have buckets with the same name.
            </para>
            <example>
              <code>PS C:\> New-Gcsbucket "widget-co-logs"</code>
              <para>Creates a new bucket named "widget-co-logs".</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsBucketCmdlet.Name">
            <summary>
            <para type="description">
            Name of the bucket.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsBucketCmdlet.Project">
            <summary>
            <para type="description">
            The name of the project associated with the command. If not set via PowerShell parameter processing, will
            default to the Cloud SDK's DefaultProject property.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsBucketCmdlet.StorageClass">
            <summary>
            <para type="description">
            Storage class for the bucket. COLDLINE, DURABLE_REDUCED_AVAILABILITY, MULTI_REGIONAL, NEARLINE,
            REGIONAL or STANDARD. See https://cloud.google.com/storage/docs/storage-classes for more information.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsBucketCmdlet.Location">
            <summary>
            <para type="description">
            Location for the bucket. e.g. ASIA, EU, US.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsBucketCmdlet.DefaultBucketAcl">
            <summary>
            <para type="description">
            Default ACL for the bucket.
            "Private__" gives the bucket owner "OWNER" permission. All other permissions are removed.
            "ProjectPrivate" gives permission to the project team based on their roles. Anyone who is part of the team has "READER" permission.
            Project owners and project editors have "OWNER" permission. All other permissions are removed.
            "AuthenticatedRead" gives the bucket owner "OWNER" permission and gives all authenticated Google account holders "READER" permission.
            All other permissions are removed.
            "PublicRead" gives the bucket owner "OWNER" permission and gives all users "READER" permission. All other permissions are removed.
            "PublicReadWrite" gives the bucket owner "OWNER" permission and gives all user "READER" and "WRITER" permission.
            All other permissions are removed.
            </para>
            <para type="description">
            To set fine-grained (e.g. individual users or domains) ACLs using PowerShell, use Add-GcsBucketAcl cmdlets.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsBucketCmdlet.DefaultObjectAcl">
            <summary>
            <para type="description">
            Default ACL for objects added to the bucket.
            "Private__" gives the object owner "OWNER" permission. All other permissions are removed.
            "ProjectPrivate" gives permission to the project team based on their roles. Anyone who is part of the team has "READER" permission.
            Project owners and project editors have "OWNER" permission. All other permissions are removed.
            "AuthenticatedRead" gives the object owner "OWNER" permission and gives all authenticated Google account holders "READER" permission.
            All other permissions are removed.
            "PublicRead" gives the object owner "OWNER" permission and gives all users "READER" permission. All other permissions are removed.
            "BucketOwnerRead" gives the object owner "OWNER" permission and the bucket owner "READER" permission. All other permissions are removed.
            "BucketOwnerFullControl" gives the object and bucket owners "OWNER" permission. All other permissions are removed.
            </para>
            <para type="description">
            To set fine-grained (e.g. individual users or domains) ACLs using PowerShell, use Add-GcsObjectAcl cmdlets.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.RemoveGcsBucketCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a Google Cloud Storage Bucket.
            </para>
            <para type="description">
            Deletes a Google Cloud Storage Bucket.
            </para>
            <example>
            <code>PS C:\> Remove-GcsBucket "unique-bucket-name"</code>
            <para> Deletes the bucket "unique-bucket-name"</para>
            </example>
            <example>
            <code>PS C:\> Get-GcsBucket "bucket-with-files" | Remove-GcsBucket -Force</code>
            <para>Forces the deletion of "bucket-with-files, despite the bucket containing objects.</para>
            </example>
            <example>
              <code>
              PS C:\> Remove-GcsBucket prod-database -WhatIf
              What if: Performing the operation "Delete Bucket" on target "prod-database".
              </code>
              <para>Prints what would happen if trying to delete bucket "prod-database".</para>
            </example>
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.RemoveGcsBucketCmdlet.s_activityIdGenerator">
            <summary>
            Used for generating activity ids used by WriteProgress.
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsBucketCmdlet.Name">
            <summary>
            <para type="description">
            The name of the bucket to remove. This parameter will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsBucketCmdlet.Force">
            <summary>
            <para type="description">
            When deleting a bucket with objects still inside, use Force to proceed with the deletion without
            a prompt.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.RemoveGcsBucketCmdlet.AskDeleteObjects(Google.Apis.Storage.v1.StorageService)">
            <summary>
            Asks the user about deleting bucket objects, and starts async tasks to do so.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.RemoveGcsBucketCmdlet.WaitDeleteTasks(System.Collections.Generic.List{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Waits on the list of delete tasks to compelet, updating progress as it does so.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.TestGcsBucketCmdlet">
            <summary>
            <para type="synopsis">
            Tests if a bucket with the given name already exists.
            </para>
            <para type="description">
            Tests if a bucket with the given name already exists. Returns true if such a bucket already exists.
            </para>
            <example>
            <code>
            PS C:\> Test-GcsBucket "bucket-name"
            True
            </code>
            <para>Tests that a bucket named "bucket-name" does exist. A new bucket with this name may not be
            created.</para>
            </example>
            <example>
              <code>
              PS C:\> Test-GcsBucket "foo"
              </code>
              <para>Check if bucket "foo" exists.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.TestGcsBucketCmdlet.Name">
            <summary>
            <para type="description">
            The name of the bucket to test for. This parameter will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.RemoveGcsBucketLoggingCmdlet">
            <summary>
            <para type="synopsis">
            Removes the logging data associated with a Cloud Storage Bucket.
            </para>
            <para type="description">
            Removes the logging data associated with a Cloud Storage Bucket.
            </para>
            <example>
              <code>PS C:\> Remove-GcsBucketLogging "widgetco"</code>   
              <para>Stop generating logs data for access to bucket "widgetco".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-logs)">[Access Logs]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsBucketLoggingCmdlet.Name">
            <summary>
            <para type="description">
            The name of the bucket to remove logging for. This parameter will also accept a Bucket
            object.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.WriteGcsBucketLoggingCmdlet">
            <summary>
            <para type="synopsis">
            Updates the logging data associated with a Cloud Storage Bucket.
            </para>
            <para type="description">
            Updates the logging data associated with a Cloud Storage Bucket.
            </para>
            <example>
              <code>
              Write-GcsBucketLogging "widgetco" -LogBucket "widgetco-logs" `
                  -LogObjectPrefix "log-output/bucket"
              </code>
              <para>Start generating logs data for access to bucket "widgetco".</para>
              <para>Logs should be accessible afterwards via, at 
              "gs://widgetco-logs/log-output/bucket_usage_&lt;timestamp&gt;_&lt;id&gt;_v0".</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/access-logs)">[Access Logs]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsBucketLoggingCmdlet.Name">
            <summary>
            <para type="description">
            The name of the bucket to configure. This parameter will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsBucketLoggingCmdlet.LogBucket">
            <summary>
            <para type="description">
            The destination bucket where the current bucket's logs should be placed.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsBucketLoggingCmdlet.LogObjectPrefix">
            <summary>
            <para type="description">
            Prefix for the log object's name.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.RemoveGcsBucketWebsiteCmdlet">
            <summary>
            <para type="synopsis">
            Removes the website associated with a Cloud Storage Bucket.
            </para>
            <para type="description">
            Removes the website associated with a Cloud Storage Bucket.
            </para>
            <example>
              <code>PS C:\> Remove-GcsBucketWebsite $bucket</code>
              <para>Remove the website data for $bucket.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/hosting-static-website)">[Static Website Hosting]</para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/static-website)">[Static Website Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsBucketWebsiteCmdlet.Name">
            <summary>
            <para type="description">
            The name of the bucket to remove logging for. This parameter will also accept a Bucket
            object.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.WriteGcsBucketWebsiteCmdlet">
            <summary>
            <para type="synopsis">
            Updates the website associated with a Cloud Storage Bucket.
            </para>
            <para type="description">
            Updates the website associated with a Cloud Storage Bucket.
            </para>
            <example>
              <code>Write-GcsBucketWebsite $bucket -MainPageSuffix "main.html" -NotFoundPage "error.html"</code>   
              <para>Host http://example.com from the contents of $bucket.</para>
              <para>Next, set the domains DNS records to point to Cloud Storage. See the "Static WebsiteHosting"
              help topic for more information.</para>
            </example>
            <para type="link" uri="(https://cloud.google.com/storage/docs/hosting-static-website)">[Static Website Hosting]</para>
            <para type="link" uri="(https://cloud.google.com/storage/docs/static-website)">[Static Website Troubleshooting]</para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsBucketWebsiteCmdlet.Name">
            <summary>
            <para type="description">
            The name of the bucket to configure. This parameter will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsBucketWebsiteCmdlet.MainPageSuffix">
            <summary>
            <para type="description">
            Storage object for the "main page" of the website, e.g. what is served from "http://example.com/".
            Defaults to "index.html".
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsBucketWebsiteCmdlet.NotFoundPage">
            <summary>
            <para type="description">
            Storage object to render when no appropriate file is found, e.g. what is served from "http://example.com/sadjkffasugmd".
            Defaults to "404.html".
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GcsCmdlet">
            <summary>
            Base class for Google Cloud Storage-based cmdlets.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.GcsCmdlet.OctetStreamMimeType">
            <summary>
            MIME attachment for general binary data. (Octets of bits, commonly referred to as bytes.)
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.GcsCmdlet.UTF8TextMimeType">
            <summary>
            MIME attachment for UTF-8 encoding text.
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GcsCmdlet.Service">
            <summary>
            The storage service.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsCmdlet.GetBaseUri(System.String,System.String)">
            <summary>
            Constructs the media URL of an object from its bucket and name. This does not include the generation
            or any preconditions. The returned string will always have a query parameter, so later query parameters
            can unconditionally be appended with an "&amp;" prefix.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsCmdlet.ConvertToDictionary(System.Collections.Hashtable)">
            <summary>
            Convert a PowerShell HashTable object into a string/string Dictionary.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsCmdlet.ConvertToDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts an IDictionary into a Dictionary instance. (This method is preferred over passing it to
            the constructor for Dictionary since this will handle the null case.)
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsCmdlet.InferContentType(System.String)">
            <summary>
            Infer the MIME type of a non-qualified file path.
            Returns octet stream mime type if no match is found.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsCmdlet.GetFixedTypeMetadata(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Gets fixed type metadata from the cmdlet parameter if user provides that.
            If not, tries retrieving it from the metadata dictionary using keyNameInMetadataDictionary.
            If that also fails, returns the default content type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GcsObjectCmdlet">
            <summary>
            Base class for Cloud Storage Object cmdlets. Used to reuse common methods.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsObjectCmdlet.TestObjectExists(Google.Apis.Storage.v1.StorageService,System.String,System.String)">
            <summary>
            Returns whether or not a storage object with the given name exists in the provided
            bucket. Will return false if the object exists but is not visible to the current
            user.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsObjectCmdlet.UploadGcsObject(Google.Apis.Storage.v1.StorageService,System.String,System.String,System.IO.Stream,System.String,System.Nullable{Google.Apis.Storage.v1.ObjectsResource.InsertMediaUpload.PredefinedAclEnum},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Uploads a local file to Google Cloud storage, overwriting any existing object and clobber existing metadata
            values.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsObjectCmdlet.UpdateObjectMetadata(Google.Apis.Storage.v1.StorageService,Google.Apis.Storage.v1.Data.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Patch the GCS object with new metadata.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsObjectCmdlet.PerformActionOnGcsProviderBucketAndPrefix(System.Action{System.String},System.Action{System.String})">
            <summary>
            Gets and performs action on bucket and prefix name if the cmdlet is in Google Cloud Storage provider location.
            For example, if we are in gs:\my-bucket\my-folder\my-subfolder, the array returned will be { "my-bucket", "my-folder\my-subfolder" }
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.GcsObjectCmdlet.ConvertLocalToGcsFolderPath(System.String)">
            <summary>
            Replace \ with / in path to comply with GCS path
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet">
            <summary>
            <para type="synopsis">
            Uploads a local file or folder into a Google Cloud Storage bucket.
            </para>
            <para type="description">
            Uploads a local file or folder into a Google Cloud Storage bucket. You can set the value of the new object
            directly with -Value, read it from a file with -File, or define neither to create an empty object. You
            can also upload an entire folder by giving the folder path to -Folder. However, you will not be able to
            use -ObjectName or -ContentType parameter in this case.
            Use this instead of Write-GcsObject when creating a new Google Cloud Storage object. You will get
            a warning if the object already exists.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the folder name to the object name.
            For example, if the location is gs:\my-bucket\folder-1\folder-2, the cmdlet will prefix "folder-1/folder-2/" to the
            object name. If -ObjectNamePrefix is used, the automatically determined folder prefix will be appended to the front
            of the value of -ObjectNamePrefix.
            </para>
            <para type="description">
            Note: Most Google Cloud Storage utilities, including the PowerShell Provider and the Google Cloud
            Console treat '/' as a path separator. They do not, however, treat '\' the same. If you wish to create
            an empty object to treat as a folder, the name should end with '/'.
            </para>
            <example>
              <code>
              PS C:\> New-GcsObject -Bucket "widget-co-logs" -File "C:\logs\log-000.txt"
              </code>
              <para>
              Upload a local file to GCS. The -ObjectName parameter will default to the file name, "log-000.txt".
              </para>
            </example>
            <example>
              <code>
              PS C:\> "Hello, World!" | New-GcsObject -Bucket "widget-co-logs" -ObjectName "log-000.txt" `
                  -Metadata @{ "logsource" = $env:computername }
              </code>
              <para>Pipe a string to a file on GCS. Sets a custom metadata value.</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket\my-folder
              PS gs:\my-bucket\my-folder> "Hello, World!" | New-GcsObject -ObjectName "log-000.txt"
              </code>
              <para>Pipe a string to a file on GCS while using the GCS Provider. Here, the object created will be "my-folder/log-000.txt".</para>
            </example>
            <example>
             <code>PS C:\> New-GcsObject -Bucket "widget-co-logs" -Folder "$env:SystemDrive\inetpub\logs\LogFiles"</code>
              <para>Upload a folder and its contents to GCS. The names of the
              created objects will be relative to the folder.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.Bucket">
            <summary>
            <para type="description">
            The name of the bucket to upload to. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.ObjectName">
            <summary>
            <para type="description">
            The name of the created Cloud Storage object.
            </para>
            <para type="description">
            If uploading a file, will default to the name of the file if not set.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.Value">
            <summary>
            <para type="description">
            Text content to write to the Storage object. Ignored if File or Folder is specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.File">
            <summary>
            <para type="description">
            Local path to the file to upload.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.Folder">
            <summary>
            <para type="description">
            Local path to the folder to upload.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.ObjectNamePrefix">
            <summary>
            <para type="description">
            When uploading the contents of a directory into Google Cloud Storage, this is the prefix
            applied to every object which is uploaded.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.ContentType">
            <summary>
            <para type="description">
            Content type of the Cloud Storage object. e.g. "image/png" or "text/plain".
            </para>
            <para type="description">
            For file uploads, the type will be inferred based on the file extension, defaulting to
            "application/octet-stream" if no match is found. When passing object content via the
            -Value parameter, the type will default to "text/plain; charset=utf-8".
            </para>
            <para type="description">
            If this parameter is specified, will take precedence over any "Content-Type" value
            specifed by the -Metadata parameter.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.ContentEncoding">
            <summary>
            <para type="description">
            Content encoding of the Cloud Storage object. e.g. "gzip".
            </para>
            <para type="description">
            This metadata can be used to indcate that an object is compressed, while still
            maitaining the object's underlying Content-Type. For example, a text file that
            is gazip compressed can have the fact that it's a text file indicated in ContentType
            and the fact that it's gzip compressed indicated in ContentEncoding.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.ContentLanguage">
            <summary>
            <para type="description">
            Content language of the Cloud Storage object. e.g. "en".
            </para>
            <para type="description">
            This metadata indicates the language(s) that the object is intended for.
            Refer to https://www.loc.gov/standards/iso639-2/php/code_list.php
            for the supported values of this metadata.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.ContentDisposition">
            <summary>
            <para type="description">
            Specifies presentation information about the data being transmitted.
            </para>
            <para type="description">
            This metadata allows you to control presentation style of the content,
            for example determining whether an attachment should be automatically displayed
            or whether some form of actions from the user should be required to open it.
            See https://tools.ietf.org/html/rfc6266.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.CacheControl">
            <summary>
            <para type="description">
            This metadata specifies two different aspects of how data is served
            from Cloud Storage: whether data can be cached and whether data can be transformed.
            </para>
            <para type="description">
            Sets the value to "no-cache" if you do not want the object to be cached.
            Sets the value to "max-age=[TIME_IN_SECONDS]" so the object can be cached up to
            the specified length of time.
            See https://cloud.google.com/storage/docs/metadata#cache-control for more information.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.PredefinedAcl">
            <summary>
            <para type="description">
            Set the object's ACL using PredefinedAcl.
            "Private__" gives the object owner "OWNER" permission. All other permissions are removed.
            "ProjectPrivate" gives permission to the project team based on their roles. Anyone who is part of the team has "READER" permission.
            Project owners and project editors have "OWNER" permission. All other permissions are removed.
            "AuthenticatedRead" gives the object owner "OWNER" permission and gives all authenticated Google account holders "READER" permission.
            All other permissions are removed.
            "PublicRead" gives the object owner "OWNER" permission and gives all users "READER" permission. All other permissions are removed.
            "BucketOwnerRead" gives the object owner "OWNER" permission and the bucket owner "READER" permission. All other permissions are removed.
            "BucketOwnerFullControl" gives the object and bucket owners "OWNER" permission. All other permissions are removed.
            </para>
            <para type="description">
            To set fine-grained (e.g. individual users or domains) ACLs using PowerShell, use Add-GcsObjectAcl cmdlets.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.Metadata">
            <summary>
            <para type="description">
            Provide metadata for the Cloud Storage object(s). Note that some values, such as "Content-Type", "Content-MD5",
            "ETag" have a special meaning to Cloud Storage.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.Force">
            <summary>
            <para type="description">
            Force the operation to succeed, overwriting existing Storage objects if needed.
            </para>
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.UploadDirectory(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Upload a directory to a GCS bucket, aiming to maintain that directory structure as well.
            For example, if we are uploading folder A with file C.txt and subfolder B with file D.txt,
            then the bucket should have A\C.txt and A\B\D.txt
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.NewGcsObjectCmdlet.UploadStreamToGcsObject(System.IO.Stream,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Upload a GCS object using a stream.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GetGcsObjectCmdlet">
            <summary>
            <para type="synopsis">
            Get-GcsObject returns Google Cloud Storage Objects and their metadata.
            (Use Read-GcsObject to get its contents.)
            </para>
            <para type="description">
            Given a Google Cloud Storage Bucket, returns Google Cloud Storage Objects and their metadata.
            </para>
            <para type="description">
            If no parameter besides -Bucket is provided, all objects in the bucket are returned.
            If a given prefix string is provided, returns all Cloud Storage objects identified
            by the prefix string.
            </para>
            <para type="description">
            An optional delimiter may be provided. If used, will return results in a
            directory-like mode, delimited by the given string. This means that the names
            of all objects returned will not, aside from the prefix, contain the delimiter.
            For example, with objects "1", "2", "subdir/3", "subdir/subdir/4",
            if the delimiter is "/", only "1" and "2" will be returned.
            If the delimiter is "/" and the prefix is "subdir/", only "subdir/3"
            will be returned.
            </para>
            <para type="description">
            To gets a specific Cloud Storage Object by name, use the -ObjectName parameter.
            This parameter cannot be used together with -Prefix and -Delimiter parameters.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the name of the folder to -ObjectName
            if -ObjectName is used. If -ObjectName is not used, the cmdlet will use the name of the folder as a prefix by default if -Prefix
            is not used or prefix the folder name to -Prefix if -Prefix is used.
            </para>
            <example>
              <code>PS C:\> Get-GcsObject -Bucket "widget-co-logs" -ObjectName "log-000.txt"</code>
              <para>Get the object name "log-000.txt" and their metadata.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcsObject -Bucket "widget-co-logs"</code>
              <para>Get all objects in a storage bucket.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcsObject -Bucket "widget-co-logs" -Prefix "pictures/winter" -Delimiter "/"</code>
              <para>Get all objects in a specific folder Storage Bucket.</para>
              <para>Because the Delimiter parameter was set, will not return objects under "pictures/winter/2016/".
              The search will omit any objects matching the prefix containing the delimiter.</para>
            </example>
            <example>
              <code>PS C:\> Get-GcsObject -Bucket "widget-co-logs" -Prefix "pictures/winter"</code>
              <para>Get all objects in a specific folder Storage Bucket. Will return objects in pictures/winter/2016/.</para>
              <para>Because the Delimiter parameter was not set, will return objects under "pictures/winter/2016/".</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket\my-folder
              PS gs:\my-bucket\my-folder> Get-GcsObject -ObjectName "Blah.txt"
              </code>
              <para>
              Get the object Blah.txt in folder "my-folder" in bucket "my-bucket".
              This has the same effect as "Get-GcsObject -Bucket my-bucket -ObjectName "my-folder/Blah.txt"
              </para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsObjectCmdlet.Bucket">
            <summary>
            <para type="description">
            Name of the bucket to check. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsObjectCmdlet.ObjectName">
            <summary>
            <para type="description">
            Name of the object to inspect.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsObjectCmdlet.Prefix">
            <summary>
            <para type="description">
            Object prefix to use. e.g. "/logs/". If not specified all
            objects in the bucket will be returned.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.GetGcsObjectCmdlet.Delimiter">
            <summary>
            <para type="description">
            Returns results in a directory-like mode, delimited by the given string. e.g.
            with objects "1, "2", "subdir/3" and delimited "/", "subdir/3" would not be
            returned.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GcsObjectWithBucketAndPrefixValidationCmdlet">
            <summary>
            Base class for cmdlet that uses either ObjectName and Bucket OR InputObject to access a Google Cloud Storage object.
            This class also takes into account whether the cmdlet is in a Google Cloud Storage Provider location or not.
            If so, it will try to resolve bucket name and prefix from the current location.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.SetGcsObjectCmdlet">
            <summary>
            <para type="synopsis">
            Set-GcsObject updates metadata associated with a Cloud Storage Object.
            </para>
            <para type="description">
            Updates the metadata associated with a Cloud Storage Object, such as ACLs.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the folder name to the object name.
            </para>
            <example>
              <code>PS C:\> Set-GcsObject -Bucket "widget-co-logs" -ObjectName "my-object" -PredefinedAcl PublicRead</code>
              <para>Sets the ACL on object "my-object" in bucket "widget-co-logs" to PublicRead.</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket
              PS gs:\my-bucket> Set-GcsObject -ObjectName "my-object" -PredefinedAcl PublicRead
              </code>
              <para>Sets the ACL on object "my-object" in bucket "my-bucket" to PublicRead.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.SetGcsObjectCmdlet.Bucket">
            <summary>
            <para type="description">
            Name of the bucket to check. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.SetGcsObjectCmdlet.ObjectName">
            <summary>
            <para type="description">
            Name of the object to update.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.SetGcsObjectCmdlet.InputObject">
            <summary>
            <para type="description">
            Storage object instance to update.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.SetGcsObjectCmdlet.PredefinedAcl">
            <summary>
            <para type="description">
            Set the object's ACL using PredefinedAcl.
            "Private__" gives the object owner "OWNER" permission. All other permissions are removed.
            "ProjectPrivate" gives permission to the project team based on their roles. Anyone who is part of the team has "READER" permission.
            Project owners and project editors have "OWNER" permission. All other permissions are removed.
            "AuthenticatedRead" gives the object owner "OWNER" permission and gives all authenticated Google account holders "READER" permission.
            All other permissions are removed.
            "PublicRead" gives the object owner "OWNER" permission and gives all users "READER" permission. All other permissions are removed.
            "BucketOwnerRead" gives the object owner "OWNER" permission and the bucket owner "READER" permission. All other permissions are removed.
            "BucketOwnerFullControl" gives the object and bucket owners "OWNER" permission. All other permissions are removed.
            </para>
            <para type="description">
            To set fine-grained (e.g. individual users or domains) ACLs using PowerShell, use Add-GcsObjectAcl cmdlets.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.RemoveGcsObjectCmdlet">
            <summary>
            <para type="synopsis">
            Deletes a Cloud Storage object.
            </para>
            <para type="description">
            Deletes a Cloud Storage object.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the folder name to the object name.
            </para>
            <example>
              <code>PS C:\> Remove-GcsObject ppiper-prod text-files/14683615 -WhatIf</code>
              <code>What if: Performing the operation "Delete Object" on target "[ppiper-prod]" text-files/14683615".</code>
              <para>Delete storage object named "text-files/14683615".</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket
              PS gs:\my-bucket> Remove-GcsObject -ObjectName "my-object"
              </code>
              <para>Removes the storage object "my-object" in bucket "my-bucket".</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsObjectCmdlet.Bucket">
            <summary>
            <para type="description">
            Name of the bucket containing the object. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsObjectCmdlet.ObjectName">
            <summary>
            <para type="description">
            Name of the object to delete.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.RemoveGcsObjectCmdlet.InputObject">
            <summary>
            <para type="description">
            Name of the object to delete.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.ReadGcsObjectCmdlet">
            <summary>
            <para type="synopsis">
            Read the contents of a Cloud Storage object.
            </para>
            <para type="description">
            Reads the contents of a Cloud Storage object. By default the contents will be
            written to the pipeline. If the -OutFile parameter is set, it will be written
            to disk instead.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the folder name to the object name.
            </para>
            <example>
              <code>
              PS C:\> Read-GcsObject -Bucket "widget-co-logs" -ObjectName "log-000.txt" `
              >>    -OutFile "C:\logs\log-000.txt"
              </code>
              <para>Write the objects of a Storage Object to local disk at "C:\logs\log-000.txt".</para>
            </example>
            <example>
              <code>PS C:\> Read-GcsObject -Bucket "widget-co-logs" -ObjectName "log-000.txt" | Write-Host</code>
              <para>Returns the storage object's contents as a string.</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket
              PS gs:\my-bucket> Read-GcsObject -ObjectName "log-000.txt" | Write-Host
              </code>
              <para>Returns contents of the storage object "log-000.txt" in bucket "my-bucket" as a string.</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.ReadGcsObjectCmdlet.Bucket">
            <summary>
            <para type="description">
            Name of the bucket containing the object. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.ReadGcsObjectCmdlet.ObjectName">
            <summary>
            <para type="description">
            Name of the object to read.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.ReadGcsObjectCmdlet.InputObject">
            <summary>
            <para type="description">
            The Google Cloud Storage object to read.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.ReadGcsObjectCmdlet.OutFile">
            <summary>
            <para type="description">
            Local file path to write the contents to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.ReadGcsObjectCmdlet.Force">
            <summary>
            <para type="description">
            Force the operation to succeed, overwriting any local files.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet">
            <summary>
            <para type="synopsis">
            Replaces the contents of a Cloud Storage object.
            </para>
            <para type="description">
            Replaces the contents of a Cloud Storage object with data from the local disk or a value
            from the pipeline. Use this instead of New-GcsObject to set the contents of a Google Cloud Storage
            object that already exists. You will get a warning if the object does not exist.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the folder name to the object name.
            </para>
            <example>
              <code>
              PS C:\> Get-GcsObject -Bucket "widget-co-logs" -ObjectName "status.txt" | Write-GcsObject -Value "OK"
              </code>
              <para>Update the contents of the Storage Object piped from Get-GcsObject.</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket
              PS gs:\my-bucket> Write-GcsObject -ObjectName "log-000.txt" -Value "OK"
              </code>
              <para>Updates the contents of the storage object "log-000.txt" in bucket "my-bucket".</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.InputObject">
            <summary>
            <para type="description">
            The Google Cloud Storage object to write to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.Bucket">
            <summary>
            <para type="description">
            Name of the bucket containing the object. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.ObjectName">
            <summary>
            <para type="description">
            Name of the object to write to.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.Value">
            <summary>
            <para type="description">
            Text content to write to the Storage object. Ignored if File is specified.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.File">
            <summary>
            <para type="description">
            Local file path to read, writing its contents into Cloud Storage.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.ContentType">
            <summary>
            <para type="description">
            Content type of the Cloud Storage object. e.g. "image/png" or "text/plain".
            </para>
            <para type="description">
            For file uploads, the type will be inferred based on the file extension, defaulting to
            "application/octet-stream" if no match is found. When passing object content via the
            -Value parameter, the type will default to "text/plain; charset=utf-8".
            </para>
            <para>
            If this parameter is specified, will take precedence over any "Content-Type" value
            specifed by the Metadata parameter.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.ContentEncoding">
            <summary>
            <para type="description">
            Content encoding of the Cloud Storage object. e.g. "gzip".
            </para>
            <para type="description">
            This metadata can be used to indcate that an object is compressed, while still
            maitaining the object's underlying Content-Type. For example, a text file that
            is gazip compressed can have the fact that it's a text file indicated in ContentType
            and the fact that it's gzip compressed indicated in ContentEncoding.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.ContentLanguage">
            <summary>
            <para type="description">
            Content language of the Cloud Storage object. e.g. "en".
            </para>
            <para type="description">
            This metadata indicates the language(s) that the object is intended for.
            Refer to https://www.loc.gov/standards/iso639-2/php/code_list.php
            for the supported values of this metadata.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.ContentDisposition">
            <summary>
            <para type="description">
            Specifies presentation information about the data being transmitted.
            </para>
            <para type="description">
            This metadata allows you to control presentation style of the content,
            for example determining whether an attachment should be automatically displayed
            or whether some form of actions from the user should be required to open it.
            See https://tools.ietf.org/html/rfc6266.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.CacheControl">
            <summary>
            <para type="description">
            This metadata specifies two different aspects of how data is served
            from Cloud Storage: whether data can be cached and whether data can be transformed.
            </para>
            <para type="description">
            Sets the value to "no-cache" if you do not want the object to be cached.
            Sets the value to "max-age=[TIME_IN_SECONDS]" so the object can be cached up to
            the specified length of time.
            See https://cloud.google.com/storage/docs/metadata#cache-control for more information.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.Metadata">
            <summary>
            <para type="description">
            Metadata for the Cloud Storage object. Values will be merged into the existing object.
            To delete a Metadata value, provide an empty string for its value.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.WriteGcsObjectCmdlet.Force">
            <summary>
            <para type="description">
            Force the operation to succeed, ignoring errors if no existing Storage object exists.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.TestGcsObjectCmdlet">
            <summary>
            <para type="synopsis">
            Verify the existence of a Cloud Storage Object.
            </para>
            <para type="description">
            Verify the existence of a Cloud Storage Object.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the folder name to the object name.
            </para>
            <example>
              <code>PS C:\> Test-GcsObject -Bucket "widget-co-logs" -ObjectName "status.txt"</code>
              <para>Test if an object named "status.txt" exists in the bucket "widget-co-logs".</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket
              PS gs:\my-bucket> Test-GcsObject -ObjectName "status.txt"
              </code>
              <para>Test if an object named "status.txt" exists in the bucket "my-bucket".</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.TestGcsObjectCmdlet.Bucket">
            <summary>
            <para type="description">
            Name of the containing bucket. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.TestGcsObjectCmdlet.ObjectName">
            <summary>
            <para type="description">
            Name of the object to check for.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.CopyGcsObject">
            <summary>
            <para type="synopsis">
            Copies a Google Cloud Storage object to another location.
            </para>
            <para type="description">
            Copies a Google Cloud Storage object to another location The target location may be in the same bucket
            with a different name or a different bucket with any name.
            </para>
            <para type="description">
            If this cmdlet is used when PowerShell is in a Google Cloud Storage Provider location (i.e, the shell's location starts
            with gs:\), then you may not need to supply -Bucket. For example, if the location is gs:\my-bucket, the cmdlet will
            automatically fill out -Bucket with "my-bucket". If -Bucket is still used, however, whatever value given will override "my-bucket".
            If the location is inside a folder on Google Cloud Storage, then the cmdlet will prefix the folder name to the object name.
            </para>
            <example>
              <code>PS C:\> Copy-GcsObject -Bucket "widget-co-logs" -ObjectName "status.txt" -DestinationBucket "another-bucket"</code>
              <para>Copy object "status.txt" in bucket "widget-co-logs" to bucket "another-bucket".</para>
            </example>
            <example>
              <code>
              PS C:\> cd gs:\my-bucket
              PS gs:\my-bucket> Copy-GcsObject -ObjectName "status.txt" -DestinationBucket "another-bucket" -DestinationObjectName "new-name.txt"
              </code>
              <para>Copy object "status.txt" in bucket "my-bucket" to bucket "another-bucket" as "new-name.txt".</para>
            </example>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.CopyGcsObject.InputObject">
            <summary>
            <para type="description">
            A Google Cloud Storage object to read from. Can be obtained with Get-GcsObject.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.CopyGcsObject.Bucket">
            <summary>
            <para type="description">
            Name of the bucket containing the object to read from. Will also accept a Bucket object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.CopyGcsObject.ObjectName">
            <summary>
            <para type="description">
            Name of the object to read from.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.CopyGcsObject.DestinationBucket">
            <summary>
            <para type="description">
            Name of the bucket in which the copy will reside. Defaults to the source bucket.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.CopyGcsObject.DestinationObjectName">
            <summary>
            <para type="description">
            The name of the copy. Defaults to the name of the source object.
            </para>
            </summary>
        </member>
        <member name="P:Google.PowerShell.CloudStorage.CopyGcsObject.Force">
            <summary>
            <para type="description">
            If set, will overwrite existing objects without prompt.
            </para>
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.BucketModel">
            <summary>
            This class maintains a local description of the objects in a bucket. It is used by the
            GoogleCloudStorageProvider to prevent redundant service calls e.g. to discover if an object
            exists. It keeps track of real objects, which we treat as files, and of name prefixes,
            which act like folders. A real object named "myFolder/" will be both a prefix "myFolder" and an object
            "myFolder/".
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.BucketModel._objectMap">
            <summary>
            Map of known object names to objects.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.BucketModel._prefixes">
            <summary>
            Map of prefixes (folders), and whether they have children.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.BucketModel._bucket">
            <summary>
            The name of the bucket this is a model of.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.BucketModel._service">
            <summary>
            The storage service used to connect to Google Cloud Storage.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.BucketModel._pageLimited">
            <summary>
            Set to true if the bucket has more objects than could retrieved in a single request.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.BucketModel.SeparatorString">
            <summary>
            The string the provider uses as a folder separator.
            </summary>
        </member>
        <member name="F:Google.PowerShell.CloudStorage.BucketModel.Separator">
            <summary>
            The character the provider uses as a folder separator
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.BucketModel.#ctor(System.String,Google.Apis.Storage.v1.StorageService)">
            <summary>
            Initializes the bucket model.
            </summary>
            <param name="bucket">The name of the bucket this models.</param>
            <param name="service">The storage service used to maintain the model.</param>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.BucketModel.PopulateModel">
            <summary>
            Gets a clean set of data from the service. If the bucket has more than a single page of objects,
            the model will only take the first page.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.BucketModel.ObjectExists(System.String)">
            <summary>
            Checks if an object exists. If the model did not read all of the objects during its last update, it
            may make a service call if the object is not found in its data.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.BucketModel.IsContainer(System.String)">
            <summary>
            Checks to see if the given object is a folder.
            </summary>
            <param name="objectName">The name of the object to check.</param>
            <returns>True if the object name is an existant object that ends with "/", or is a prefix for other
            existant objects.</returns>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.BucketModel.GetGcsObject(System.String)">
            <summary>
            Gets the Google Cloud Storage object of a given object name.
            </summary>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.BucketModel.AddObject(Google.Apis.Storage.v1.Data.Object)">
            <summary>
            Adds or updates a Google Cloud Storage object to the model.
            </summary>
            <param name="gcsObject">The Google Cloud Storage object to add or update.</param>
        </member>
        <member name="M:Google.PowerShell.CloudStorage.BucketModel.IsReal(System.String)">
            <summary>
            Checks if the given object is a real object. An object could "exist" but not be "real" if it is a
            prefix for another object (a logical folder that is not "real").
            </summary>
            <param name="objectName">The name of the object to check.</param>
            <returns>True if the object actually exists.</returns>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GcsContentWriter">
            <summary>
            Required by GoogleCloudStorageProvider.GetContentWriter, which is used by the cmdlet Set-Content.
            </summary>
        </member>
        <member name="T:Google.PowerShell.CloudStorage.GcsStringReader">
            <summary>
            Required by GoogleCloudStorageProvider.GetContentReader, used by Get-Contents.
            </summary>
        </member>
    </members>
</doc>
